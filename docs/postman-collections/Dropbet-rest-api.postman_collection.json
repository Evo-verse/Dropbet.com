{
	"info": {
		"_postman_id": "9beb569f-c244-41aa-be83-76824b1a2b8e",
		"name": "Dropbet-rest-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39707524",
		"_collection_link": "https://speeding-rocket-681129.postman.co/workspace/Team-Workspace~123632ec-4336-4108-84b9-25e50e736c2e/collection/39112613-9beb569f-c244-41aa-be83-76824b1a2b8e?action=share&source=collection_link&creator=39707524"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "player",
					"item": [
						{
							"name": "auth",
							"item": [
								{
									"name": "sign up",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData=pm.response.json()\r",
													"console.log(responseData.accessToken)\r",
													"pm.collectionVariables.set(\"access_token\", responseData.accessToken.token);\r",
													"pm.collectionVariables.set(\"refresh_token\", responseData.refreshToken.token);\r",
													"pm.globals.set(\"socket_token\", responseData.socketToken.token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "is-capture-on",
												"value": "off",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// {\r\n//     \"email\": \"user@localhost.com\",\r\n//     \"password\": \"string\",\r\n//     \"displayName\": \"displayName\",\r\n//     \"captchaId\": \"captchaId\",\r\n//     \"genTime\": \"1231231313\",\r\n//     \"lotNumber\": \"lotNumber\",\r\n//     \"passToken\": \"passToken\",\r\n//     \"captchaOutput\": \"captchaOutput\"\r\n// }\r\n {\r\n    \"email\": \"ceberlifer11@gmail.com\",\r\n    \"password\": \")k70?*75%8GR\",\r\n    \"username\": \"GR8test\"\r\n\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/auth/sign-up",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "sign in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// pm.test(\"set token\", function () {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.globals.set('api_token', jsonData.token)\r",
													"// });\r",
													"let responseData=pm.response.json()\r",
													"console.log(responseData.accessToken)\r",
													"pm.collectionVariables.set(\"access_token\", responseData.accessToken.token);\r",
													"pm.collectionVariables.set(\"refresh_token\", responseData.refreshToken.token);\r",
													"pm.globals.set(\"socket_token\", responseData.socketToken.token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"admin\"\r\n    // \"username\": \"Cortes\"\r\n}\r\n\r\n// {\r\n//     \"email\": \"user_1_2644@example.com\",\r\n//     \"password\": \"admin\"\r\n//     // \"username\": \"Cortes\"\r\n// }\r\n\r\n// {\r\n//     \"email\": \"user_2_8477@example.com\",\r\n//     \"password\": \"Welcome123@\"\r\n// }\r\n// {\r\n//     \"email\": \"pm8test21@mailto.plus\",\r\n//     \"password\": \"Welcome123@\"\r\n// }\r\n\r\n// {\r\n//     \"email\": \"gr8test@fexpost.com\",\r\n//     \"password\": \"Welcome123@\"\r\n// }\r\n\r\n//  {\r\n//     \"email\": \"ceberlifer11@gmail.com\",\r\n//     \"password\": \")k70?*75%8GR\"\r\n// }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/auth/sign-in",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// pm.test(\"set token\", function () {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.globals.set('api_token', jsonData.token)\r",
													"// });\r",
													"let responseData=pm.response.json()\r",
													"console.log(responseData.accessToken)\r",
													"pm.collectionVariables.set(\"access_token\", responseData.accessToken.token);\r",
													"pm.collectionVariables.set(\"refresh_token\", responseData.refreshToken.token);\r",
													"pm.globals.set(\"socket_token\", responseData.socketToken.token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "refresh-token",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsInNJZCI6IjZlNzBkNGE1LTFiMTMtNGVhMi04Y2JkLWQ5MzllM2VmOTNkZSIsImlhdCI6MTczMjcxODc2NSwiZXhwIjoxNzMyODkxNTY1fQ.cLHhq9kLRUM_LTTVplXLGjIVkPfLn6NjBWTmS0lhUt8",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/auth/refresh",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"auth",
												"refresh"
											]
										}
									},
									"response": []
								},
								{
									"name": "Steam Google Auth",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJodHRwczovL3N0ZWFtY29tbXVuaXR5LmNvbS9vcGVuaWQvaWQvNzY1NjExOTgzNzA0OTk1NzMiLCJpc1RlbXBVc2VyIjp0cnVlLCJpYXQiOjE3MzQwMjcyNzgsImV4cCI6MTczNDAyNzU3OH0.P4AK3BR_tYakAVL4X_QVswq1ikqA7xvL_Mdmiwp9JO4",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"HuySgoti\",\r\n    \"email\": \"liksonic@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:4000/auth/setup-username?setupUsernameToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJodHRwczovL3N0ZWFtY29tbXVuaXR5LmNvbS9vcGVuaWQvaWQvNzY1NjExOTgzNzA0OTk1NzMiLCJpc1RlbXBVc2VyIjp0cnVlLCJpYXQiOjE3MzQwMjcyNzgsImV4cCI6MTczNDAyNzU3OH0.P4AK3BR_tYakAVL4X_QVswq1ikqA7xvL_Mdmiwp9JO4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "4000",
											"path": [
												"auth",
												"setup-username"
											],
											"query": [
												{
													"key": "setupUsernameToken",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJodHRwczovL3N0ZWFtY29tbXVuaXR5LmNvbS9vcGVuaWQvaWQvNzY1NjExOTgzNzA0OTk1NzMiLCJpc1RlbXBVc2VyIjp0cnVlLCJpYXQiOjE3MzQwMjcyNzgsImV4cCI6MTczNDAyNzU3OH0.P4AK3BR_tYakAVL4X_QVswq1ikqA7xvL_Mdmiwp9JO4"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "profile",
							"item": [
								{
									"name": "sessions",
									"item": [
										{
											"name": "get sessions",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{serverUri}}/api/v1/player/auth/sessions",
													"host": [
														"{{serverUri}}"
													],
													"path": [
														"api",
														"v1",
														"player",
														"auth",
														"sessions"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "balance",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverUri}}/api/v1/player/balances",
											"host": [
												"{{serverUri}}"
											],
											"path": [
												"api",
												"v1",
												"player",
												"balances"
											]
										}
									},
									"response": []
								},
								{
									"name": "profile",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "mailerSender",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"liksonic@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/mailer/reset-pass",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"mailer",
												"reset-pass"
											]
										}
									},
									"response": []
								},
								{
									"name": "update-avatar",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "update-user-profile",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isStreamer\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/user/me",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"user",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "get-user-profile",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{TestApi}}/user/me",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"user",
												"me"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "tips",
							"item": [
								{
									"name": "Send Tips",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"recipientUsername\": \"user_1_80\",\r\n    \"amount\": \"4\",\r\n    \"currencyId\": \"DBC\",\r\n    \"isPublic\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/tips",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"tips"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Tips ADMIN",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"recipientUserId\": 2,\r\n    \"amount\": \"0.04\",\r\n    \"currencyId\": \"EVO\",\r\n    \"isPublic\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/admin/admin-tips",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"admin",
												"admin-tips"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "admin",
							"item": [
								{
									"name": "GET admin audit",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{TestApi}}/admin/user/admin-audit?userId=1&reqType=[\"successful\"]",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"admin",
												"user",
												"admin-audit"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												},
												{
													"key": "reqType",
													"value": "[\"successful\"]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "UPDATE user profile",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"hiynya\",\r\n  \"canSponsorBattles\": true,\r\n  \"customMinAffiliateLevel\": 0,\r\n  \"isTest\": true,\r\n  \"isPrivate\": false,\r\n  \"isStreamer\": true,\r\n  \"isEmailNotificationsEnabled\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/admin/user/25",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"admin",
												"user",
												"25"
											]
										}
									},
									"response": []
								},
								{
									"name": "UPDATE user profile Copy",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"hiynya\",\r\n  \"canSponsorBattles\": true,\r\n  \"customMinAffiliateLevel\": 0,\r\n  \"isTest\": true,\r\n  \"isPrivate\": false,\r\n  \"isStreamer\": true,\r\n  \"isEmailNotificationsEnabled\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/admin/user/25",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"admin",
												"user",
												"25"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET users all",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{TestApi}}/admin/user/admin-audit?userId=1&reqType=[\"successful\"]",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"admin",
												"user",
												"admin-audit"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												},
												{
													"key": "reqType",
													"value": "[\"successful\"]"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "bets",
							"item": [
								{
									"name": "GET USERS BETS",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{TestApi}}/bets",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"bets"
											]
										}
									},
									"response": []
								},
								{
									"name": "ONE BET INFO",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{TestApi}}/bets/house-games/info/0014d857-9535-4d0e-bb16-5b5c6eecf3ad",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"bets",
												"house-games",
												"info",
												"0014d857-9535-4d0e-bb16-5b5c6eecf3ad"
											]
										}
									},
									"response": []
								},
								{
									"name": "ONE BET INFO SLOT",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{TestApi}}/bets/slots/info/:betId",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"bets",
												"slots",
												"info",
												":betId"
											],
											"variable": [
												{
													"key": "betId",
													"value": "betId=bet-15sg:h12-ba582788-98b2-5dc7-afdb-b43ac18ccbf9"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "registration_info",
							"item": [
								{
									"name": "Take registration info",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							]
						},
						{
							"name": "VipProgram",
							"item": [
								{
									"name": "ADMIN",
									"item": [
										{
											"name": "GET APPLICATIONS",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{TestApi}}/admin/vip-program/all?page=1&take=20&sortBy=UPDATED_AT&sortOrder=asc&status=INBOX&userId=43847",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"admin",
														"vip-program",
														"all"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														},
														{
															"key": "sortBy",
															"value": "UPDATED_AT"
														},
														{
															"key": "sortOrder",
															"value": "asc"
														},
														{
															"key": "status",
															"value": "INBOX"
														},
														{
															"key": "userId",
															"value": "43847"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET APPLICATION",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{TestApi}}/admin/vip-program/all?page=1&take=20&sortBy=UPDATED_AT&sortOrder=asc&status=INBOX&userId=43847",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"admin",
														"vip-program",
														"all"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														},
														{
															"key": "sortBy",
															"value": "UPDATED_AT"
														},
														{
															"key": "sortOrder",
															"value": "asc"
														},
														{
															"key": "status",
															"value": "INBOX"
														},
														{
															"key": "userId",
															"value": "43847"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update APPLICATION",
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"status\": \"ACTIVE\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{TestApi}}/admin/vip-program/:id/status",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"admin",
														"vip-program",
														":id",
														"status"
													],
													"variable": [
														{
															"key": "id",
															"value": "555"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete APPLICATION",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{TestApi}}/admin/vip-program/:id",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"admin",
														"vip-program",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "1244"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create Application",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Jane Doe\",\r\n    \"social\": \"TELEGRAM\",\r\n    \"socialNick\": \"jane_d\",\r\n    \"transferSite\": \"https://example.com/transfer\",\r\n    \"transferWagger\": 1500,\r\n    \"transferReasons\": \"Looking for better VIP rewards and faster withdrawals\",\r\n    \"transferAvgDeposit\": 300.75,\r\n    \"transferPlaysWeek\": 25,\r\n    \"favoritesGames\": \"Poker, Blackjack, Roulette\",\r\n    \"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/vip-program/application",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"vip-program",
												"application"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Application",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Jane Doe\",\r\n    \"social\": \"TELEGRAM\",\r\n    \"social_nick\": \"jane_d\",\r\n    \"transferSite\": \"https://example.com/transfer\",\r\n    \"transferWagger\": 1500,\r\n    \"transferReasons\": \"Looking for better VIP rewards and faster withdrawals\",\r\n    \"transferAvgDeposit\": 300.75,\r\n    \"transferPlaysWeek\": 25,\r\n    \"favoritesGames\": \"Poker, Blackjack, Roulette\",\r\n    \"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/vip-program/application",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"vip-program",
												"application"
											]
										}
									},
									"response": []
								},
								{
									"name": "UploadStats",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{TestApi}}/vip-program/upload/stats",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"vip-program",
												"upload",
												"stats"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "rackeback",
							"item": [
								{
									"name": "CLAIM",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"DAILY\",\r\n    \"double\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/rakeback/claim",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"rakeback",
												"claim"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get rakeback",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"DAILY\",\r\n    \"double\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/rakeback",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"rakeback"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "tips-admin",
					"item": [
						{
							"name": "Send Tips Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"recipientUserId\": 54,\r\n    \"amount\": \"0.04\",\r\n    \"currencyId\": \"TRX\",\r\n    \"isPublic\": true,\r\n    \"notes\": \"Huerverk\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/admin/admin-tips",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"admin-tips"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "payments",
					"item": [
						{
							"name": "ccpayment",
							"item": [
								{
									"name": "address bySymbol",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{serverUri}}/api/v1/payments/addresses/symbol?symbol=ETH&network=ETH_SEPOLIA",
											"host": [
												"{{serverUri}}"
											],
											"path": [
												"api",
												"v1",
												"payments",
												"addresses",
												"symbol"
											],
											"query": [
												{
													"key": "symbol",
													"value": "ETH"
												},
												{
													"key": "network",
													"value": "ETH_SEPOLIA"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "list currencies",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{api_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUri}}/api/v1/payments/addresses/list-currencies",
									"host": [
										"{{serverUri}}"
									],
									"path": [
										"api",
										"v1",
										"payments",
										"addresses",
										"list-currencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "list cc supported currencies",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{api_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUri}}/api/v1/payments/addresses/supported-currencies",
									"host": [
										"{{serverUri}}"
									],
									"path": [
										"api",
										"v1",
										"payments",
										"addresses",
										"supported-currencies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "games",
					"item": [
						{
							"name": "slots",
							"item": [
								{
									"name": "Take Providers",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{TestApi}}/casino/games/providers",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"casino",
												"games",
												"providers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Take Slots",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							]
						},
						{
							"name": "MonkeyRun",
							"item": [
								{
									"name": "bet MonkeyRun",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// // ----------------------------------------\r",
													"// // 1) Initialize or increment environment variables\r",
													"// // ----------------------------------------\r",
													"\r",
													"// // A) Retrieve or set up array of thresholds\r",
													"// let thresholds = pm.environment.get(\"thresholds\");\r",
													"// if (!thresholds) {\r",
													"//     thresholds = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\r",
													"//     pm.environment.set(\"thresholds\", JSON.stringify(thresholds));\r",
													"// }\r",
													"\r",
													"// // B) currentThresholdIndex\r",
													"// let currentThresholdIndex = pm.environment.get(\"currentThresholdIndex\");\r",
													"// if (!currentThresholdIndex) {\r",
													"//     currentThresholdIndex = 0;\r",
													"// } else {\r",
													"//     currentThresholdIndex = parseInt(currentThresholdIndex, 10);\r",
													"// }\r",
													"\r",
													"// // C) maxBetsPerThreshold\r",
													"// let maxBetsPerThreshold = pm.environment.get(\"maxBetsPerThreshold\");\r",
													"// if (!maxBetsPerThreshold) {\r",
													"//     maxBetsPerThreshold = 10000;\r",
													"//     pm.environment.set(\"maxBetsPerThreshold\", maxBetsPerThreshold);\r",
													"// } else {\r",
													"//     maxBetsPerThreshold = parseInt(maxBetsPerThreshold, 10);\r",
													"// }\r",
													"\r",
													"// // D) betIteration\r",
													"// let betIteration = pm.environment.get(\"betIteration\");\r",
													"// if (!betIteration) {\r",
													"//     betIteration = 1;\r",
													"// } else {\r",
													"//     betIteration = parseInt(betIteration, 10);\r",
													"// }\r",
													"\r",
													"// // E) lossesForThreshold\r",
													"// let lossesForThreshold = pm.environment.get(\"lossesForThreshold\");\r",
													"// if (!lossesForThreshold) {\r",
													"//     lossesForThreshold = 0;\r",
													"// } else {\r",
													"//     lossesForThreshold = parseInt(lossesForThreshold, 10);\r",
													"// }\r",
													"\r",
													"// // F) profitLossForThreshold\r",
													"// let profitLossForThreshold = pm.environment.get(\"profitLossForThreshold\");\r",
													"// if (!profitLossForThreshold) {\r",
													"//     profitLossForThreshold = 0;\r",
													"// } else {\r",
													"//     profitLossForThreshold = parseFloat(profitLossForThreshold);\r",
													"// }\r",
													"\r",
													"// // G) Convert thresholds from JSON if needed\r",
													"// if (typeof thresholds === 'string') {\r",
													"//     thresholds = JSON.parse(thresholds);\r",
													"// }\r",
													"\r",
													"// // Determine the actual threshold value to use in this iteration\r",
													"// const thresholdValue = thresholds[currentThresholdIndex];\r",
													"\r",
													"// // ----------------------------------------\r",
													"// // 2) Set the request body or query param\r",
													"// //    with the threshold & betAmount\r",
													"// // ----------------------------------------\r",
													"\r",
													"// // Example: if your request body looks like:\r",
													"// // {\r",
													"// //   \"betAmount\": \"10.00\",\r",
													"// //   \"threshold\": 0,\r",
													"// //   \"currencyId\": \"USD\"\r",
													"// // }\r",
													"// const betBody = {\r",
													"//     betAmount: \"10.00\",   // fixed bet\r",
													"//     threshold: thresholdValue,\r",
													"//     currencyId: \"DBC\"\r",
													"// };\r",
													"\r",
													"// // We then update the request body in the environment\r",
													"// pm.variables.set(\"diceRequestBody\", JSON.stringify(betBody));\r",
													"\r",
													"// // or if you prefer to manipulate pm.request.body directly:\r",
													"// // pm.request.body.raw = JSON.stringify(betBody);\r",
													"\r",
													"// /**\r",
													"//  * This ensures your request uses the dynamic threshold value.\r",
													"//  * Next, the main request will send with `diceRequestBody`.\r",
													"//  */\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// // ----------------------------------------\r",
													"// // 1) Parse the response to see outcome\r",
													"// // ----------------------------------------\r",
													"// let responseJson = {};\r",
													"// try {\r",
													"//     responseJson = pm.response.json();\r",
													"// } catch (e) {\r",
													"//     console.log(\"No valid JSON in response or parse error\", e);\r",
													"// }\r",
													"\r",
													"// // e.g. we expect a shape like:\r",
													"// // {\r",
													"// //   \"betId\": \"...\",\r",
													"// //   \"randomValue\": 56.78,\r",
													"// //   \"threshold\": 30,\r",
													"// //   \"didWin\": true,\r",
													"// //   \"betAmount\": 10.00,\r",
													"// //   \"payout\": 37.00,\r",
													"// //   \"currencyId\": \"USD\",\r",
													"// //   \"createdAt\": \"...\"\r",
													"// // }\r",
													"\r",
													"// // betIteration, currentThresholdIndex, thresholds, lossesForThreshold, profitLossForThreshold\r",
													"// let betIteration = parseInt(pm.environment.get(\"betIteration\"), 10);\r",
													"// let currentThresholdIndex = parseInt(pm.environment.get(\"currentThresholdIndex\"), 10);\r",
													"// let lossesForThreshold = parseInt(pm.environment.get(\"lossesForThreshold\"), 10);\r",
													"// let profitLossForThreshold = parseFloat(pm.environment.get(\"profitLossForThreshold\"));\r",
													"// let maxBetsPerThreshold = parseInt(pm.environment.get(\"maxBetsPerThreshold\"), 10);\r",
													"\r",
													"// let thresholds = pm.environment.get(\"thresholds\");\r",
													"// if (thresholds && typeof thresholds === 'string') {\r",
													"//     thresholds = JSON.parse(thresholds);\r",
													"// }\r",
													"// const thresholdValue = thresholds[currentThresholdIndex];\r",
													"\r",
													"// // ----------------------------------------\r",
													"// // 2) Calculate this request's profit/loss\r",
													"// //    For example: (payout - betAmount)\r",
													"// // ----------------------------------------\r",
													"// let lastProfit = 0;\r",
													"// if (responseJson && responseJson.betAmount && responseJson.payout) {\r",
													"//     const betAmount = parseFloat(responseJson.betAmount);\r",
													"//     const payout = parseFloat(responseJson.payout);\r",
													"//     lastProfit = payout - betAmount;  // positive if payout > bet\r",
													"// } else {\r",
													"//     // If we can't parse or there's an error, set a large negative or 0\r",
													"//     lastProfit = 0;\r",
													"// }\r",
													"\r",
													"// // If user lost, increment losses\r",
													"// if (responseJson.didWin === false) {\r",
													"//     lossesForThreshold += 1;\r",
													"// }\r",
													"\r",
													"// // accumulate total profit/loss\r",
													"// profitLossForThreshold += lastProfit;\r",
													"\r",
													"// // Update environment\r",
													"// pm.environment.set(\"lossesForThreshold\", lossesForThreshold);\r",
													"// pm.environment.set(\"profitLossForThreshold\", profitLossForThreshold);\r",
													"\r",
													"// // ----------------------------------------\r",
													"// // 3) Check if we are done with this threshold\r",
													"// //    or continue\r",
													"// // ----------------------------------------\r",
													"// if (betIteration < maxBetsPerThreshold) {\r",
													"//     // - We haven't done 10k bets for this threshold yet\r",
													"//     // increment betIteration\r",
													"//     betIteration += 1;\r",
													"//     pm.environment.set(\"betIteration\", betIteration);\r",
													"\r",
													"//     // repeat same request\r",
													"//     pm.setNextRequest(pm.info.requestName);\r",
													"// } else {\r",
													"//     // we've completed 10k bets for thresholdValue\r",
													"//     // store the results (losses, final profitLoss) somewhere\r",
													"//     // e.g. in a \"resultsLog\" environment variable\r",
													"//     let resultsLog = pm.environment.get(\"resultsLog\");\r",
													"//     if (!resultsLog) resultsLog = {};\r",
													"//     else if (typeof resultsLog === 'string') resultsLog = JSON.parse(resultsLog);\r",
													"\r",
													"//     // set final stats for this threshold\r",
													"//     resultsLog[`Threshold_${thresholdValue}`] = {\r",
													"//         totalBets: betIteration,\r",
													"//         losses: lossesForThreshold,\r",
													"//         profitLoss: profitLossForThreshold\r",
													"//     };\r",
													"\r",
													"//     // Save that\r",
													"//     pm.environment.set(\"resultsLog\", JSON.stringify(resultsLog));\r",
													"\r",
													"//     // reset bet iteration counters\r",
													"//     pm.environment.set(\"betIteration\", 1);\r",
													"//     pm.environment.set(\"lossesForThreshold\", 0);\r",
													"//     pm.environment.set(\"profitLossForThreshold\", 0);\r",
													"\r",
													"//     // move to next threshold\r",
													"//     currentThresholdIndex += 1;\r",
													"//     pm.environment.set(\"currentThresholdIndex\", currentThresholdIndex);\r",
													"\r",
													"//     // if we still have thresholds left, repeat\r",
													"//     if (currentThresholdIndex < thresholds.length) {\r",
													"//         pm.setNextRequest(pm.info.requestName);\r",
													"//     } else {\r",
													"//         // done with all thresholds\r",
													"//         // log final results in the console\r",
													"//         console.log(\"Done with all thresholds. Final results: \", resultsLog);\r",
													"\r",
													"//         // optional: Clear environment or do something\r",
													"//         // pm.environment.clear();\r",
													"//         // pm.setNextRequest(null); // to stop\r",
													"//     }\r",
													"// }\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"betAmount\": \"10.00\",  \r\n    \"difficulty\": \"EXTREME\",\r\n    \"currencyId\": \"DBC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/casino/games/house/monkey-run/bet",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"casino",
												"games",
												"house",
												"monkey-run",
												"bet"
											]
										}
									},
									"response": []
								},
								{
									"name": "play MonkeyRun",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"makeStep\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/casino/games/house/monkey-run/play",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"casino",
												"games",
												"house",
												"monkey-run",
												"play"
											]
										}
									},
									"response": []
								},
								{
									"name": "cachOut MonkeyRun",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{TestApi}}/casino/games/house/monkey-run/cash-out",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"casino",
												"games",
												"house",
												"monkey-run",
												"cash-out"
											]
										}
									},
									"response": []
								},
								{
									"name": "get current MonkeyRun",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"betAmount\": \"10.00\",  \r\n    \"currencyId\": \"DBC\",\r\n    \"difficulty\": \"EASY\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/casino/games/house/monkey-run/game",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"casino",
												"games",
												"house",
												"monkey-run",
												"game"
											]
										}
									},
									"response": []
								},
								{
									"name": "get config MonkeyRun",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"betAmount\": \"10.00\",  \r\n    \"currencyId\": \"DBC\",\r\n    \"difficulty\": \"EASY\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/casino/games/house/monkey-run/config",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"casino",
												"games",
												"house",
												"monkey-run",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "launch game",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"set token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.globals.set('api_token', jsonData.token)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"    "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gameId\": 1829,\r\n  \"symbol\": \"ETH\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUri}}/api/v1/games/launch",
									"host": [
										"{{serverUri}}"
									],
									"path": [
										"api",
										"v1",
										"games",
										"launch"
									]
								}
							},
							"response": []
						},
						{
							"name": "limbo play",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"betAmount\": \"100.00\",\r\n  \"multiplier\": 1.5,\r\n  \"currencyId\": \"DBC\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/casino/games/house/limbo/bet",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"casino",
										"games",
										"house",
										"limbo",
										"bet"
									]
								}
							},
							"response": []
						},
						{
							"name": "dice play",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// // ----------------------------------------\r",
											"// // 1) Initialize or increment environment variables\r",
											"// // ----------------------------------------\r",
											"\r",
											"// // A) Retrieve or set up array of thresholds\r",
											"// let thresholds = pm.environment.get(\"thresholds\");\r",
											"// if (!thresholds) {\r",
											"//     thresholds = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\r",
											"//     pm.environment.set(\"thresholds\", JSON.stringify(thresholds));\r",
											"// }\r",
											"\r",
											"// // B) currentThresholdIndex\r",
											"// let currentThresholdIndex = pm.environment.get(\"currentThresholdIndex\");\r",
											"// if (!currentThresholdIndex) {\r",
											"//     currentThresholdIndex = 0;\r",
											"// } else {\r",
											"//     currentThresholdIndex = parseInt(currentThresholdIndex, 10);\r",
											"// }\r",
											"\r",
											"// // C) maxBetsPerThreshold\r",
											"// let maxBetsPerThreshold = pm.environment.get(\"maxBetsPerThreshold\");\r",
											"// if (!maxBetsPerThreshold) {\r",
											"//     maxBetsPerThreshold = 10000;\r",
											"//     pm.environment.set(\"maxBetsPerThreshold\", maxBetsPerThreshold);\r",
											"// } else {\r",
											"//     maxBetsPerThreshold = parseInt(maxBetsPerThreshold, 10);\r",
											"// }\r",
											"\r",
											"// // D) betIteration\r",
											"// let betIteration = pm.environment.get(\"betIteration\");\r",
											"// if (!betIteration) {\r",
											"//     betIteration = 1;\r",
											"// } else {\r",
											"//     betIteration = parseInt(betIteration, 10);\r",
											"// }\r",
											"\r",
											"// // E) lossesForThreshold\r",
											"// let lossesForThreshold = pm.environment.get(\"lossesForThreshold\");\r",
											"// if (!lossesForThreshold) {\r",
											"//     lossesForThreshold = 0;\r",
											"// } else {\r",
											"//     lossesForThreshold = parseInt(lossesForThreshold, 10);\r",
											"// }\r",
											"\r",
											"// // F) profitLossForThreshold\r",
											"// let profitLossForThreshold = pm.environment.get(\"profitLossForThreshold\");\r",
											"// if (!profitLossForThreshold) {\r",
											"//     profitLossForThreshold = 0;\r",
											"// } else {\r",
											"//     profitLossForThreshold = parseFloat(profitLossForThreshold);\r",
											"// }\r",
											"\r",
											"// // G) Convert thresholds from JSON if needed\r",
											"// if (typeof thresholds === 'string') {\r",
											"//     thresholds = JSON.parse(thresholds);\r",
											"// }\r",
											"\r",
											"// // Determine the actual threshold value to use in this iteration\r",
											"// const thresholdValue = thresholds[currentThresholdIndex];\r",
											"\r",
											"// // ----------------------------------------\r",
											"// // 2) Set the request body or query param\r",
											"// //    with the threshold & betAmount\r",
											"// // ----------------------------------------\r",
											"\r",
											"// // Example: if your request body looks like:\r",
											"// // {\r",
											"// //   \"betAmount\": \"10.00\",\r",
											"// //   \"threshold\": 0,\r",
											"// //   \"currencyId\": \"USD\"\r",
											"// // }\r",
											"// const betBody = {\r",
											"//     betAmount: \"10.00\",   // fixed bet\r",
											"//     threshold: thresholdValue,\r",
											"//     currencyId: \"DBC\"\r",
											"// };\r",
											"\r",
											"// // We then update the request body in the environment\r",
											"// pm.variables.set(\"diceRequestBody\", JSON.stringify(betBody));\r",
											"\r",
											"// // or if you prefer to manipulate pm.request.body directly:\r",
											"// // pm.request.body.raw = JSON.stringify(betBody);\r",
											"\r",
											"// /**\r",
											"//  * This ensures your request uses the dynamic threshold value.\r",
											"//  * Next, the main request will send with `diceRequestBody`.\r",
											"//  */\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // ----------------------------------------\r",
											"// // 1) Parse the response to see outcome\r",
											"// // ----------------------------------------\r",
											"// let responseJson = {};\r",
											"// try {\r",
											"//     responseJson = pm.response.json();\r",
											"// } catch (e) {\r",
											"//     console.log(\"No valid JSON in response or parse error\", e);\r",
											"// }\r",
											"\r",
											"// // e.g. we expect a shape like:\r",
											"// // {\r",
											"// //   \"betId\": \"...\",\r",
											"// //   \"randomValue\": 56.78,\r",
											"// //   \"threshold\": 30,\r",
											"// //   \"didWin\": true,\r",
											"// //   \"betAmount\": 10.00,\r",
											"// //   \"payout\": 37.00,\r",
											"// //   \"currencyId\": \"USD\",\r",
											"// //   \"createdAt\": \"...\"\r",
											"// // }\r",
											"\r",
											"// // betIteration, currentThresholdIndex, thresholds, lossesForThreshold, profitLossForThreshold\r",
											"// let betIteration = parseInt(pm.environment.get(\"betIteration\"), 10);\r",
											"// let currentThresholdIndex = parseInt(pm.environment.get(\"currentThresholdIndex\"), 10);\r",
											"// let lossesForThreshold = parseInt(pm.environment.get(\"lossesForThreshold\"), 10);\r",
											"// let profitLossForThreshold = parseFloat(pm.environment.get(\"profitLossForThreshold\"));\r",
											"// let maxBetsPerThreshold = parseInt(pm.environment.get(\"maxBetsPerThreshold\"), 10);\r",
											"\r",
											"// let thresholds = pm.environment.get(\"thresholds\");\r",
											"// if (thresholds && typeof thresholds === 'string') {\r",
											"//     thresholds = JSON.parse(thresholds);\r",
											"// }\r",
											"// const thresholdValue = thresholds[currentThresholdIndex];\r",
											"\r",
											"// // ----------------------------------------\r",
											"// // 2) Calculate this request's profit/loss\r",
											"// //    For example: (payout - betAmount)\r",
											"// // ----------------------------------------\r",
											"// let lastProfit = 0;\r",
											"// if (responseJson && responseJson.betAmount && responseJson.payout) {\r",
											"//     const betAmount = parseFloat(responseJson.betAmount);\r",
											"//     const payout = parseFloat(responseJson.payout);\r",
											"//     lastProfit = payout - betAmount;  // positive if payout > bet\r",
											"// } else {\r",
											"//     // If we can't parse or there's an error, set a large negative or 0\r",
											"//     lastProfit = 0;\r",
											"// }\r",
											"\r",
											"// // If user lost, increment losses\r",
											"// if (responseJson.didWin === false) {\r",
											"//     lossesForThreshold += 1;\r",
											"// }\r",
											"\r",
											"// // accumulate total profit/loss\r",
											"// profitLossForThreshold += lastProfit;\r",
											"\r",
											"// // Update environment\r",
											"// pm.environment.set(\"lossesForThreshold\", lossesForThreshold);\r",
											"// pm.environment.set(\"profitLossForThreshold\", profitLossForThreshold);\r",
											"\r",
											"// // ----------------------------------------\r",
											"// // 3) Check if we are done with this threshold\r",
											"// //    or continue\r",
											"// // ----------------------------------------\r",
											"// if (betIteration < maxBetsPerThreshold) {\r",
											"//     // - We haven't done 10k bets for this threshold yet\r",
											"//     // increment betIteration\r",
											"//     betIteration += 1;\r",
											"//     pm.environment.set(\"betIteration\", betIteration);\r",
											"\r",
											"//     // repeat same request\r",
											"//     pm.setNextRequest(pm.info.requestName);\r",
											"// } else {\r",
											"//     // we've completed 10k bets for thresholdValue\r",
											"//     // store the results (losses, final profitLoss) somewhere\r",
											"//     // e.g. in a \"resultsLog\" environment variable\r",
											"//     let resultsLog = pm.environment.get(\"resultsLog\");\r",
											"//     if (!resultsLog) resultsLog = {};\r",
											"//     else if (typeof resultsLog === 'string') resultsLog = JSON.parse(resultsLog);\r",
											"\r",
											"//     // set final stats for this threshold\r",
											"//     resultsLog[`Threshold_${thresholdValue}`] = {\r",
											"//         totalBets: betIteration,\r",
											"//         losses: lossesForThreshold,\r",
											"//         profitLoss: profitLossForThreshold\r",
											"//     };\r",
											"\r",
											"//     // Save that\r",
											"//     pm.environment.set(\"resultsLog\", JSON.stringify(resultsLog));\r",
											"\r",
											"//     // reset bet iteration counters\r",
											"//     pm.environment.set(\"betIteration\", 1);\r",
											"//     pm.environment.set(\"lossesForThreshold\", 0);\r",
											"//     pm.environment.set(\"profitLossForThreshold\", 0);\r",
											"\r",
											"//     // move to next threshold\r",
											"//     currentThresholdIndex += 1;\r",
											"//     pm.environment.set(\"currentThresholdIndex\", currentThresholdIndex);\r",
											"\r",
											"//     // if we still have thresholds left, repeat\r",
											"//     if (currentThresholdIndex < thresholds.length) {\r",
											"//         pm.setNextRequest(pm.info.requestName);\r",
											"//     } else {\r",
											"//         // done with all thresholds\r",
											"//         // log final results in the console\r",
											"//         console.log(\"Done with all thresholds. Final results: \", resultsLog);\r",
											"\r",
											"//         // optional: Clear environment or do something\r",
											"//         // pm.environment.clear();\r",
											"//         // pm.setNextRequest(null); // to stop\r",
											"//     }\r",
											"// }\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"betAmount\": \"10.00\",\r\n    \"threshold\": 40,\r\n    \"above\": true,\r\n    \"currencyId\": \"DBC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/casino/games/house/dice/bet",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"casino",
										"games",
										"house",
										"dice",
										"bet"
									]
								}
							},
							"response": []
						},
						{
							"name": "dice conf",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// // ----------------------------------------\r",
											"// // 1) Initialize or increment environment variables\r",
											"// // ----------------------------------------\r",
											"\r",
											"// // A) Retrieve or set up array of thresholds\r",
											"// let thresholds = pm.environment.get(\"thresholds\");\r",
											"// if (!thresholds) {\r",
											"//     thresholds = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\r",
											"//     pm.environment.set(\"thresholds\", JSON.stringify(thresholds));\r",
											"// }\r",
											"\r",
											"// // B) currentThresholdIndex\r",
											"// let currentThresholdIndex = pm.environment.get(\"currentThresholdIndex\");\r",
											"// if (!currentThresholdIndex) {\r",
											"//     currentThresholdIndex = 0;\r",
											"// } else {\r",
											"//     currentThresholdIndex = parseInt(currentThresholdIndex, 10);\r",
											"// }\r",
											"\r",
											"// // C) maxBetsPerThreshold\r",
											"// let maxBetsPerThreshold = pm.environment.get(\"maxBetsPerThreshold\");\r",
											"// if (!maxBetsPerThreshold) {\r",
											"//     maxBetsPerThreshold = 10000;\r",
											"//     pm.environment.set(\"maxBetsPerThreshold\", maxBetsPerThreshold);\r",
											"// } else {\r",
											"//     maxBetsPerThreshold = parseInt(maxBetsPerThreshold, 10);\r",
											"// }\r",
											"\r",
											"// // D) betIteration\r",
											"// let betIteration = pm.environment.get(\"betIteration\");\r",
											"// if (!betIteration) {\r",
											"//     betIteration = 1;\r",
											"// } else {\r",
											"//     betIteration = parseInt(betIteration, 10);\r",
											"// }\r",
											"\r",
											"// // E) lossesForThreshold\r",
											"// let lossesForThreshold = pm.environment.get(\"lossesForThreshold\");\r",
											"// if (!lossesForThreshold) {\r",
											"//     lossesForThreshold = 0;\r",
											"// } else {\r",
											"//     lossesForThreshold = parseInt(lossesForThreshold, 10);\r",
											"// }\r",
											"\r",
											"// // F) profitLossForThreshold\r",
											"// let profitLossForThreshold = pm.environment.get(\"profitLossForThreshold\");\r",
											"// if (!profitLossForThreshold) {\r",
											"//     profitLossForThreshold = 0;\r",
											"// } else {\r",
											"//     profitLossForThreshold = parseFloat(profitLossForThreshold);\r",
											"// }\r",
											"\r",
											"// // G) Convert thresholds from JSON if needed\r",
											"// if (typeof thresholds === 'string') {\r",
											"//     thresholds = JSON.parse(thresholds);\r",
											"// }\r",
											"\r",
											"// // Determine the actual threshold value to use in this iteration\r",
											"// const thresholdValue = thresholds[currentThresholdIndex];\r",
											"\r",
											"// // ----------------------------------------\r",
											"// // 2) Set the request body or query param\r",
											"// //    with the threshold & betAmount\r",
											"// // ----------------------------------------\r",
											"\r",
											"// // Example: if your request body looks like:\r",
											"// // {\r",
											"// //   \"betAmount\": \"10.00\",\r",
											"// //   \"threshold\": 0,\r",
											"// //   \"currencyId\": \"USD\"\r",
											"// // }\r",
											"// const betBody = {\r",
											"//     betAmount: \"10.00\",   // fixed bet\r",
											"//     threshold: thresholdValue,\r",
											"//     currencyId: \"DBC\"\r",
											"// };\r",
											"\r",
											"// // We then update the request body in the environment\r",
											"// pm.variables.set(\"diceRequestBody\", JSON.stringify(betBody));\r",
											"\r",
											"// // or if you prefer to manipulate pm.request.body directly:\r",
											"// // pm.request.body.raw = JSON.stringify(betBody);\r",
											"\r",
											"// /**\r",
											"//  * This ensures your request uses the dynamic threshold value.\r",
											"//  * Next, the main request will send with `diceRequestBody`.\r",
											"//  */\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // ----------------------------------------\r",
											"// // 1) Parse the response to see outcome\r",
											"// // ----------------------------------------\r",
											"// let responseJson = {};\r",
											"// try {\r",
											"//     responseJson = pm.response.json();\r",
											"// } catch (e) {\r",
											"//     console.log(\"No valid JSON in response or parse error\", e);\r",
											"// }\r",
											"\r",
											"// // e.g. we expect a shape like:\r",
											"// // {\r",
											"// //   \"betId\": \"...\",\r",
											"// //   \"randomValue\": 56.78,\r",
											"// //   \"threshold\": 30,\r",
											"// //   \"didWin\": true,\r",
											"// //   \"betAmount\": 10.00,\r",
											"// //   \"payout\": 37.00,\r",
											"// //   \"currencyId\": \"USD\",\r",
											"// //   \"createdAt\": \"...\"\r",
											"// // }\r",
											"\r",
											"// // betIteration, currentThresholdIndex, thresholds, lossesForThreshold, profitLossForThreshold\r",
											"// let betIteration = parseInt(pm.environment.get(\"betIteration\"), 10);\r",
											"// let currentThresholdIndex = parseInt(pm.environment.get(\"currentThresholdIndex\"), 10);\r",
											"// let lossesForThreshold = parseInt(pm.environment.get(\"lossesForThreshold\"), 10);\r",
											"// let profitLossForThreshold = parseFloat(pm.environment.get(\"profitLossForThreshold\"));\r",
											"// let maxBetsPerThreshold = parseInt(pm.environment.get(\"maxBetsPerThreshold\"), 10);\r",
											"\r",
											"// let thresholds = pm.environment.get(\"thresholds\");\r",
											"// if (thresholds && typeof thresholds === 'string') {\r",
											"//     thresholds = JSON.parse(thresholds);\r",
											"// }\r",
											"// const thresholdValue = thresholds[currentThresholdIndex];\r",
											"\r",
											"// // ----------------------------------------\r",
											"// // 2) Calculate this request's profit/loss\r",
											"// //    For example: (payout - betAmount)\r",
											"// // ----------------------------------------\r",
											"// let lastProfit = 0;\r",
											"// if (responseJson && responseJson.betAmount && responseJson.payout) {\r",
											"//     const betAmount = parseFloat(responseJson.betAmount);\r",
											"//     const payout = parseFloat(responseJson.payout);\r",
											"//     lastProfit = payout - betAmount;  // positive if payout > bet\r",
											"// } else {\r",
											"//     // If we can't parse or there's an error, set a large negative or 0\r",
											"//     lastProfit = 0;\r",
											"// }\r",
											"\r",
											"// // If user lost, increment losses\r",
											"// if (responseJson.didWin === false) {\r",
											"//     lossesForThreshold += 1;\r",
											"// }\r",
											"\r",
											"// // accumulate total profit/loss\r",
											"// profitLossForThreshold += lastProfit;\r",
											"\r",
											"// // Update environment\r",
											"// pm.environment.set(\"lossesForThreshold\", lossesForThreshold);\r",
											"// pm.environment.set(\"profitLossForThreshold\", profitLossForThreshold);\r",
											"\r",
											"// // ----------------------------------------\r",
											"// // 3) Check if we are done with this threshold\r",
											"// //    or continue\r",
											"// // ----------------------------------------\r",
											"// if (betIteration < maxBetsPerThreshold) {\r",
											"//     // - We haven't done 10k bets for this threshold yet\r",
											"//     // increment betIteration\r",
											"//     betIteration += 1;\r",
											"//     pm.environment.set(\"betIteration\", betIteration);\r",
											"\r",
											"//     // repeat same request\r",
											"//     pm.setNextRequest(pm.info.requestName);\r",
											"// } else {\r",
											"//     // we've completed 10k bets for thresholdValue\r",
											"//     // store the results (losses, final profitLoss) somewhere\r",
											"//     // e.g. in a \"resultsLog\" environment variable\r",
											"//     let resultsLog = pm.environment.get(\"resultsLog\");\r",
											"//     if (!resultsLog) resultsLog = {};\r",
											"//     else if (typeof resultsLog === 'string') resultsLog = JSON.parse(resultsLog);\r",
											"\r",
											"//     // set final stats for this threshold\r",
											"//     resultsLog[`Threshold_${thresholdValue}`] = {\r",
											"//         totalBets: betIteration,\r",
											"//         losses: lossesForThreshold,\r",
											"//         profitLoss: profitLossForThreshold\r",
											"//     };\r",
											"\r",
											"//     // Save that\r",
											"//     pm.environment.set(\"resultsLog\", JSON.stringify(resultsLog));\r",
											"\r",
											"//     // reset bet iteration counters\r",
											"//     pm.environment.set(\"betIteration\", 1);\r",
											"//     pm.environment.set(\"lossesForThreshold\", 0);\r",
											"//     pm.environment.set(\"profitLossForThreshold\", 0);\r",
											"\r",
											"//     // move to next threshold\r",
											"//     currentThresholdIndex += 1;\r",
											"//     pm.environment.set(\"currentThresholdIndex\", currentThresholdIndex);\r",
											"\r",
											"//     // if we still have thresholds left, repeat\r",
											"//     if (currentThresholdIndex < thresholds.length) {\r",
											"//         pm.setNextRequest(pm.info.requestName);\r",
											"//     } else {\r",
											"//         // done with all thresholds\r",
											"//         // log final results in the console\r",
											"//         console.log(\"Done with all thresholds. Final results: \", resultsLog);\r",
											"\r",
											"//         // optional: Clear environment or do something\r",
											"//         // pm.environment.clear();\r",
											"//         // pm.setNextRequest(null); // to stop\r",
											"//     }\r",
											"// }\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {{diceRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/casino/games/house/dice/config",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"casino",
										"games",
										"house",
										"dice",
										"config"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "index",
					"item": [
						{
							"name": "index",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUri}}/api/v1",
									"host": [
										"{{serverUri}}"
									],
									"path": [
										"api",
										"v1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "leaderboard",
					"item": [
						{
							"name": "get active leaderboard",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUri}}api/v1/leader-board/active?type=MONTHLY",
									"host": [
										"{{serverUri}}api"
									],
									"path": [
										"v1",
										"leader-board",
										"active"
									],
									"query": [
										{
											"key": "type",
											"value": "MONTHLY",
											"description": " DAILY / WEEKLY / MONTHLY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get leaderboard user stats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjI4LCJlbWFpbFZlcmlmaWVkIjp0cnVlLCJpYXQiOjE3MzEzMTI3MTUsImV4cCI6MTczMTQ4NTUxNX0.ZzBRjD_bq5r7Kor5xmK9o4YsEA_XXzd3JrMo-mpUofU",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{serverUri}}api/v1/leader-board/user-stats?leaderBoardId=3",
									"host": [
										"{{serverUri}}api"
									],
									"path": [
										"v1",
										"leader-board",
										"user-stats"
									],
									"query": [
										{
											"key": "leaderBoardId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "mailer-test",
					"item": [
						{
							"name": "New Request",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"liksonic@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverTest}}/mailer/reset-pass",
									"host": [
										"{{serverTest}}"
									],
									"path": [
										"mailer",
										"reset-pass"
									],
									"query": [
										{
											"key": "type",
											"value": "MONTHLY",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "user-limits",
					"item": [
						{
							"name": "self-exclude",
							"item": [
								{
									"name": "admin",
									"item": [
										{
											"name": "delete user self-exclude",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{TestApi}}/user-limits-admin/user-exclusion",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"user-limits-admin",
														"user-exclusion"
													]
												}
											},
											"response": []
										},
										{
											"name": "create new self-exclude Copy",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": 2,\r\n    \"excludeUntil\": \"2026-12-31T23:59:59Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{TestApi}}/admin/user-limits/user-exclusion",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"admin",
														"user-limits",
														"user-exclusion"
													]
												}
											},
											"response": []
										},
										{
											"name": "get user self-exclude",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{TestApi}}/admin/user-limits/user-exclusion/3",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"admin",
														"user-limits",
														"user-exclusion",
														"3"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create new self-exclude",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/self-exclude/user",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"self-exclude",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "one self-exclude",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/user-limits/self-exclude",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"user-limits",
												"self-exclude"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "gamblin-limit",
							"item": [
								{
									"name": "admin",
									"item": [
										{
											"name": "create/update gambling-limit",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": 2,\r\n    \"depositLimit\": \"50.60\",\r\n    \"betLimit\": \"10\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{TestApi}}/admin/user-limits/gambling-limits",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"admin",
														"user-limits",
														"gambling-limits"
													]
												}
											},
											"response": []
										},
										{
											"name": "one user gambling-limit",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userID\": 1,\r\n    \"excludeUntil\": \"2025-12-31T23:59:59Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{TestApi}}/admin/user-limits/gambling-limits/2",
													"host": [
														"{{TestApi}}"
													],
													"path": [
														"admin",
														"user-limits",
														"gambling-limits",
														"2"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create/update gambling-limit",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"depositLimit\": \"120.25\",\r\n    \"betLimit\": \"0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/user-limits/gambling-limits",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"user-limits",
												"gambling-limits"
											]
										}
									},
									"response": []
								},
								{
									"name": "user gambling-limit",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/user-limits/gambling-limits",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"user-limits",
												"gambling-limits"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "DEBUG-IMAGE",
					"item": [
						{
							"name": "Providers",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/L1ksoni/Pictures/Space_test/leo_test/41586_2015_Article_BF528452a_Figg_HTML.jpg"
										}
									]
								},
								"url": {
									"raw": "{{TestApi}}/casino/games/admin/providers/:slug/images",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"casino",
										"games",
										"admin",
										"providers",
										":slug",
										"images"
									],
									"variable": [
										{
											"key": "slug",
											"value": "test112"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Games",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/E:/Programing/EvoVerse/MEDIA/HOUSE-logo/Origins/original games/Roulette.png"
										}
									]
								},
								"url": {
									"raw": "{{TestApi}}/casino/games/admin/:slug/images",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"casino",
										"games",
										"admin",
										":slug",
										"images"
									],
									"variable": [
										{
											"key": "slug",
											"value": "roulette"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "dashboard",
					"item": [
						{
							"name": "Get DASHBOARDS",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/admin/dashboard/quick-stats?startDate=2025-03-04T00:00:01.000Z&endDate=2025-06-04T23:59:01.000Z&query=[\"UserTotalDepositsAndAverageQuery\"]",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"dashboard",
										"quick-stats"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2025-03-04T00:00:01.000Z"
										},
										{
											"key": "endDate",
											"value": "2025-06-04T23:59:01.000Z"
										},
										{
											"key": "query",
											"value": "[\"UserTotalDepositsAndAverageQuery\"]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DASHBOARDS Games",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/admin/dashboard/games-stats?startDate=2024-12-31T01:00:00.000Z&endDate=2024-12-31T23:00:00.000Z&query=[\"Ggr\"]&games=[\"plinko\",\"huinko\",\"mines\"]",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"dashboard",
										"games-stats"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2024-12-31T01:00:00.000Z"
										},
										{
											"key": "endDate",
											"value": "2024-12-31T23:00:00.000Z"
										},
										{
											"key": "query",
											"value": "[\"Ggr\"]"
										},
										{
											"key": "games",
											"value": "[\"plinko\",\"huinko\",\"mines\"]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DASHBOARDS Charts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/admin/dashboard/games-charts?startDate=2024-12-23T23:59:59.000Z&endDate=2024-12-27T23:59:00.000Z&games=[\"plinko\",\"compare to all\"]",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"dashboard",
										"games-charts"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2024-12-23T23:59:59.000Z"
										},
										{
											"key": "endDate",
											"value": "2024-12-27T23:59:00.000Z"
										},
										{
											"key": "games",
											"value": "[\"plinko\",\"compare to all\"]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DASHBOARDS Affiliate",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/admin/dashboard/affiliate-stats?startDate=2023-03-11T23:59:59.000Z&endDate=2025-03-13T23:59:00.000Z",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"dashboard",
										"affiliate-stats"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2023-03-11T23:59:59.000Z"
										},
										{
											"key": "endDate",
											"value": "2025-03-13T23:59:00.000Z"
										},
										{
											"key": "affiliateId",
											"value": "134",
											"disabled": true
										},
										{
											"key": "query",
											"value": "[\"ReferralsFTD\"]",
											"disabled": true
										},
										{
											"key": "isStreamer",
											"value": "true",
											"disabled": true
										},
										{
											"key": "adminTipsTags",
											"value": "[\"SALARY\",\"VIDEO_FILL\",\"TWITTER_GIVEAWAY\",\"CUSTOM_DEPOSIT_BONUS\",\"OTHER\",\"TESTING\",\"LOSSBACK\",\"STREAM_FILL\"]",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DASHBOARDS Providers",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/admin/dashboard/providers-stats?startDate=2023-03-11T23:59:59.000Z&endDate=2025-05-13T23:59:00.000Z",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"dashboard",
										"providers-stats"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2023-03-11T23:59:59.000Z"
										},
										{
											"key": "affiliateId",
											"value": "134",
											"disabled": true
										},
										{
											"key": "query",
											"value": "[\"ReferralsFTD\"]",
											"disabled": true
										},
										{
											"key": "isStreamer",
											"value": "true",
											"disabled": true
										},
										{
											"key": "adminTipsTags",
											"value": "[\"SALARY\",\"VIDEO_FILL\",\"TWITTER_GIVEAWAY\",\"CUSTOM_DEPOSIT_BONUS\",\"OTHER\",\"TESTING\",\"LOSSBACK\",\"STREAM_FILL\"]",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2025-05-13T23:59:00.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DASHBOARDS Finance Tab",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/admin/dashboard/finance-tab?startDate=2025-03-04T00:00:01.000Z&endDate=2025-06-04T23:59:01.000Z&isStreamer=true",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"dashboard",
										"finance-tab"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2025-03-04T00:00:01.000Z"
										},
										{
											"key": "endDate",
											"value": "2025-06-04T23:59:01.000Z"
										},
										{
											"key": "isStreamer",
											"value": "true"
										},
										{
											"key": "affiliateId",
											"value": "134",
											"disabled": true
										},
										{
											"key": "query",
											"value": "[\"ReferralsFTD\"]",
											"disabled": true
										},
										{
											"key": "isStreamer",
											"value": "true",
											"disabled": true
										},
										{
											"key": "adminTipsTags",
											"value": "[\"SALARY\",\"VIDEO_FILL\",\"TWITTER_GIVEAWAY\",\"CUSTOM_DEPOSIT_BONUS\",\"OTHER\",\"TESTING\",\"LOSSBACK\",\"STREAM_FILL\"]",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sportsbook",
					"item": [
						{
							"name": "GET META",
							"item": [
								{
									"name": "Auth",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "client_id",
												"value": "S2S_CL23_CL23BINT_Sportsbook_Prod_Client",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "fm59o33KuHPpbK5dpOGkHhcpiOlx3Pr6",
												"type": "text"
											},
											{
												"key": "X-Operator-Id",
												"value": "CL23BINT",
												"type": "text"
											},
											{
												"key": "X-Brand",
												"value": "CL23",
												"type": "text"
											},
											{
												"key": "grant_type",
												"value": "client_credentials",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientId\": \"S2S_CL23_CL23BINT_Sportsbook_Prod_Client\",\r\n    \"clientSecret\": \"fm59o33KuHPpbK5dpOGkHhcpiOlx3Pr6\"\r\n    \"xBrand\": \"CL23BINT\",\r\n    \"xOperatorId\": \"CL23\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/debug/gr8/auth",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"debug",
												"gr8",
												"auth"
											]
										}
									},
									"response": []
								},
								{
									"name": "Auth Copy",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "client_id",
												"value": "S2S_CL23_CL23BINT_Sportsbook_Prod_Client",
												"type": "text",
												"disabled": true
											},
											{
												"key": "client_secret",
												"value": "fm59o33KuHPpbK5dpOGkHhcpiOlx3Pr6",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-Operator-Id",
												"value": "CL23BINT",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-Brand",
												"value": "CL23",
												"type": "text",
												"disabled": true
											},
											{
												"key": "grant_type",
												"value": "client_credentials",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clientId\": \"S2S_CL23_CL23BINT_Sportsbook_Prod_Client\",\r\n    \"clientSecret\": \"fm59o33KuHPpbK5dpOGkHhcpiOlx3Pr6\",\r\n    \"xBrand\": \"CL23BINT\",\r\n    \"xOperatorId\": \"CL23\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/debug/gr8/auth",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"debug",
												"gr8",
												"auth"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Transaction",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "client_id",
												"value": "S2S_CL23_CL23BINT_Sportsbook_Prod_Client",
												"type": "text",
												"disabled": true
											},
											{
												"key": "client_secret",
												"value": "fm59o33KuHPpbK5dpOGkHhcpiOlx3Pr6",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-Operator-Id",
												"value": "CL23BINT",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-Brand",
												"value": "CL23",
												"type": "text",
												"disabled": true
											},
											{
												"key": "grant_type",
												"value": "client_credentials",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"betId\": \"8daf555d-97b7-46f5-8f79-0d7aa2f1ebef\",\r\n    \"xBrand\": \"CL23BINT\",\r\n    \"xOperatorId\": \"CL23\",\r\n    \"authorization\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3Wnl3c0x5WlJZaUsweDdsUHhWSFlGdl93c0hJYnMyRmtlSDBkUXpwS3pBIn0.eyJleHAiOjE3NDM3MTM3MzUsImlhdCI6MTc0MzcxMzQzNSwianRpIjoiNTZhOTkwNmQtMGE1Ni00Yzk4LTk3ZDctM2ZlZTZkOTNlZWI0IiwiaXNzIjoiaHR0cHM6Ly9hdXRoLWJhY2tvZmZpY2UuZ3I4LnRlY2gvcmVhbG1zL3Mycy1nYXRld2F5IiwiYXVkIjpbIlNQT1JUU0JPT0tfUFJJVkFURV9SZXNvdXJjZSIsIlNQT1JUU0JPT0tfUmVzb3VyY2UiLCJhY2NvdW50Il0sInN1YiI6IjI4MjRhOWRjLTU4YWItNDk4Ny05N2U3LWMzY2VhZjk3OTAzNiIsInR5cCI6IkJlYXJlciIsImF6cCI6IlMyU19DTDIzX0NMMjNCSU5UX1Nwb3J0c2Jvb2tfUHJvZF9DbGllbnQiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIi8qIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXMycy1nYXRld2F5Iiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7IlNQT1JUU0JPT0tfUFJJVkFURV9SZXNvdXJjZSI6eyJyb2xlcyI6WyJTcG9ydDpTcG9ydHNib29rOlBsYXllckhpc3Rvcnk6UmVhZCJdfSwiU1BPUlRTQk9PS19SZXNvdXJjZSI6eyJyb2xlcyI6WyJTcG9ydDpTcG9ydHNib29rOlBsYXllckhpc3Rvcnk6UmVhZCJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJjbGllbnRIb3N0IjoiMzUuMjMzLjYzLjIyNiIsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1zMnNfY2wyM19jbDIzYmludF9zcG9ydHNib29rX3Byb2RfY2xpZW50IiwiY2xpZW50QWRkcmVzcyI6IjM1LjIzMy42My4yMjYiLCJvcGVyYXRvcnNfY29uZmlnIjp7IkNMMjMiOlsiQ0wyM0JJTlQiXX0sImNsaWVudF9pZCI6IlMyU19DTDIzX0NMMjNCSU5UX1Nwb3J0c2Jvb2tfUHJvZF9DbGllbnQifQ.LCc-R_JU6DRNqPPs6SEf0SAzWORNegIAyi8vvrvUTiw7hO66BtDIPzElSArfBx6Rf5pN1imSCMsTP6WovzUX3qxLpTGhCl0TYPeF6sFJJJkWxXJamhRIRWpcKykUq0GLlqi-SsMqETyHsc4hV-V3kbeMP4L2YcphfhSADWsP2Sy0F5tzvyHcbRQEOQgrr3kIUrM0NIInar21xM5f7lTRCiEyCOnftSLq3lRrwEbt3jnEGsFWcK9eMd6fo9DHZZU_FwZvgEm0rIk6siYPJlC0bZTD_YS-wSP8ULyp8ThjXPqqXyHyO3Ue2beLIZkffA86ZSkU9Q4Z8BM3rHhLAuvdPw\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/debug/gr8/get-bet",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"debug",
												"gr8",
												"get-bet"
											]
										}
									},
									"response": []
								},
								{
									"name": "REQ HTTP",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							]
						},
						{
							"name": "balance Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Currency</th>\r",
											"        <th>Cash</th>\r",
											"        <th>Bonus</th>\r",
											"        <th>Locked</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>USDT</td>\r",
											"        <td>{{response.sport.sportsbook.USDT.cash}}</td>\r",
											"        <td>{{response.sport.sportsbook.USDT.bonus}}</td>\r",
											"        <td>{{response.sport.sportsbook.USDT.locked}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return { response: pm.response.json() }\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/sportsbook/2/balance?currencies=EVO",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"sportsbook",
										"2",
										"balance"
									],
									"query": [
										{
											"key": "currencies",
											"value": "EVO"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "transaction",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-BRAND",
										"value": "Liew",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"CL23_CL23BINT_EVO-38__55f25556-db3e-4f51-9bfc-868d4c657982-rollback\",\r\n    \"currency\": \"USD\",\r\n    \"platform\": \"sport\",\r\n    \"type\": \"rollback\",\r\n    \"createdAt\": \"2025-02-27T10:18:03Z\",\r\n    \"initiatedAt\": \"2025-02-27T10:18:03Z\",\r\n    \"context\": {\r\n        \"product\": \"sportbook\",\r\n        \"reason\": \"sport rollback\",\r\n        \"parentId\": \"55f25556-db3e-4f51-9bfc-868d4c657982\",\r\n        \"correlationId\": \"55f25556-db3e-4f51-9bfc-868d4c657982\",\r\n        \"betId\": \"55f25556-db3e-4f51-9bfc-868d4c657982\",\r\n        \"SportBonusOfferId\": \"\",\r\n        \"SportBonusPlayerOfferId\": \"\",\r\n        \"betAmount\": 2.0,\r\n        \"tax\": 0.0,\r\n        \"taxChanges\": 0.0\r\n    },\r\n    \"amountBreakdown\": {\r\n        \"cash\": 2.0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/sportsbook/integration/:uid/transactions",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"sportsbook",
										"integration",
										":uid",
										"transactions"
									],
									"variable": [
										{
											"key": "uid",
											"value": "EVO-38"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "transaction",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"currency\": \"USDT\",\r\n    \"platform\": \"sport\",\r\n    \"id\": \"c7178121-950a-4cea-aa31-bbecbacd33a9\",\r\n    \"type\": \"deposit\", // \"deposit\", \"withdrawal\", \"rollback\"\r\n    \"initiatedAt\": \"2021-01-20T00:00:00Z\",\r\n    \"createdAt\": \"2021-01-20T00:00:00Z\",\r\n    \"context\": {\r\n        \"product\": \"sportsbook\",\r\n        \"reason\": \"bet\",\r\n        \"betId\": \"c7178121-950a-4cea-aa31-bbecbacd33a9\"\r\n    },\r\n    \"amountBreakdown\": {\r\n        \"cash\": \"210\",\r\n        \"bonus\": \"0\",\r\n        \"locked\": \"0\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/sportsbook/:uid/transactions/:tid",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"sportsbook",
										":uid",
										"transactions",
										":tid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "2"
										},
										{
											"key": "tid",
											"value": "68c4247a-19a2-4bf9-b3ad-6c5c21435095"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "authIntegration",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "Get PUBLIC KEY GR8",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/sportsbook/integration/auth/get-sportsbook-public-key",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"sportsbook",
										"integration",
										"auth",
										"get-sportsbook-public-key"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "notification",
					"item": [
						{
							"name": "Notification User",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/notifications",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "debug",
					"item": [
						{
							"name": "Debug ACTION",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 1,\r\n  \"actions\": [\r\n    {\r\n      \"action\": \"deposit\",\r\n      \"currencyId\": \"EVO\",\r\n      \"amount\": \"100\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/debug/user/action",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"debug",
										"user",
										"action"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "accounting",
					"item": [
						{
							"name": "New Request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sortBy\": \"CREATED_AT\",\r\n  \"sortOrder\": \"asc\",\r\n  \"where\": {\r\n    \"tag\": \"DEPOSIT\",\r\n    \"createdAt\": {\r\n      \"lt\": \"2025-03-12T16:03:52.472Z\",\r\n      \"gt\": \"2025-03-12T16:03:52.472Z\",\r\n      \"lte\": \"2025-03-12T16:03:52.472Z\",\r\n      \"gte\": \"2025-03-12T16:03:52.472Z\"\r\n    },\r\n    \"userId\": 0,\r\n    \"amount\": {\r\n      \"lt\": \"1.25\",\r\n      \"gt\": \"1.25\",\r\n      \"lte\": \"1.25\",\r\n      \"gte\": \"1.25\",\r\n      \"equals\": \"1.25\"\r\n    }\r\n  },\r\n  \"page\": 1,\r\n  \"take\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/admin/accounting/transactions",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"accounting",
										"transactions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin-audit",
					"item": [
						{
							"name": "GET-AUDIT",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "POST-BLACKLISTED",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{TestApi}}/admin/accounting/transactions",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"accounting",
										"transactions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SLOTS pm8",
					"item": [
						{
							"name": "New Request",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Partner-Key",
										"value": "9o0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "evoverse-9o0",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "rqijZCUCU7NTx3y8p2Dk36CrdBE8VYfs",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://gateway.eva-digital-playground-stage.com/v0/management/token",
									"protocol": "https",
									"host": [
										"gateway",
										"eva-digital-playground-stage",
										"com"
									],
									"path": [
										"v0",
										"management",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Partner-Key",
										"value": "9o0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "evoverse-9o0",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "rqijZCUCU7NTx3y8p2Dk36CrdBE8VYfs",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://gateway.eva-digital-playground-stage.com/v0/management/token",
									"protocol": "https",
									"host": [
										"gateway",
										"eva-digital-playground-stage",
										"com"
									],
									"path": [
										"v0",
										"management",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Arbitrage",
					"item": [
						{
							"name": "Create Registration",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subId\": \"HuyPizda21\",\r\n    \"provider\": \"TMT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/traffic-income/registration",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"traffic-income",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Deposit",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subId\": \"HuyPizda21\",\r\n    \"provider\": \"TMT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/traffic-income/registration",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"traffic-income",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "New Request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissions\": [\r\n    \"user.view\",\r\n    \"user.transactions.view\",\r\n    \"user.bets.view\",\r\n    \"withdrawals.view\",\r\n    \"dashboard.view\",\r\n    \"deposits.view\",\r\n    \"leaderboard.view\",\r\n    \"api-key.view\",\r\n    \"user-note.view\",\r\n    \"user-limit.view\",\r\n    \"casino.games.view\",\r\n    \"rakebacks.view\",\r\n    \"affiliate.levels.view\",\r\n    \"affiliate.users.view\",\r\n    \"affiliate.find-one.view\",\r\n    \"affiliate.find-one-stats.view\",\r\n    \"tip.view\",\r\n    \"admin-tips.view\",\r\n    \"registration-info.view\",\r\n    \"transaction.view\",\r\n    \"affiliate.view\",\r\n    \"affiliate.streamer.view\",\r\n    \"balance.view\",\r\n    \"kyc.view\",\r\n    \"promo.code.view\",\r\n    \"challenge.view\",\r\n    \"vip.application.view\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.multibcj.com/admin/user/2889/permissions",
									"protocol": "https",
									"host": [
										"api",
										"multibcj",
										"com"
									],
									"path": [
										"admin",
										"user",
										"2889",
										"permissions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Bot Generator",
					"item": [
						{
							"name": "Get All Bots",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isActive\": true,\r\n    \"type\": \"WHALE\",\r\n    \"behavior\": \"STABLE\",\r\n    \"playDays\": [\r\n        \"MONDAY\",\r\n        \"WEDNESDAY\",\r\n        \"FRIDAY\"\r\n    ],\r\n    \"userId\": 31,\r\n    \"startTime\": \"18:33\",\r\n    \"games\": [\r\n        12,\r\n        13,\r\n        14\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/admin/bot-activity/all",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"bot-activity",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Bots",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isActive\": true,\r\n    \"type\": \"WHALE\",\r\n    \"behavior\": \"STABLE\",\r\n    \"playDays\": [\r\n        \"MONDAY\",\r\n        \"WEDNESDAY\",\r\n        \"FRIDAY\"\r\n    ],\r\n    \"userId\": 31,\r\n    \"startTime\": \"18:33\",\r\n    \"games\": [\r\n        12,\r\n        13,\r\n        14\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/admin/bot-activity/all",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"bot-activity",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upsert Bot config",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjg0LCJuYW1lIjoibDFrc29uaTIiLCJlbWFpbCI6Imxpa3NvbmljQGdtYWlsLmNvbSIsInNJZCI6ImI0ZmFkMTM1LWRkZWYtNDU2YS04NTlmLTA5YzI1Mjc5MDEzZiIsInNLZXkiOiI2ZDAxMWU5Yy0xYmU1LTRkZDMtOWVkZC0wMzAzOTUyOTk0ZDIiLCJydCI6ZmFsc2UsInJvbGVzIjpbIlVzZXIiXSwiaWF0IjoxNzUwNjY2MzA0LCJleHAiOjE3NTA3NTI3MDR9.72lbVSdKFFRFNXr3FCUZamacglifNQZ5ezcgzjMGWCs",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isActive\": true,\r\n    \"type\": \"WHALE\",\r\n    \"behavior\": \"TRICKSTER\",\r\n    \"playDays\": [\r\n        \"MONDAY\",\r\n        \"THURSDAY\",\r\n        \"WEDNESDAY\",\r\n        \"FRIDAY\"\r\n    ],\r\n    \"userId\": 2,\r\n    \"startTime\": \"14:40\",\r\n    \"games\": [\r\n        12,\r\n        13\r\n        // 925,\r\n        // 926,\r\n        // 927,\r\n        // 929,\r\n        // 930,\r\n        // 931,\r\n        // 932\r\n        // 1159,\r\n        // 1160,\r\n        // 1161,\r\n        // 1163,\r\n        // 1162\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/admin/bot-activity/manage",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"bot-activity",
										"manage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Bot config",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isActive\": false,\r\n  \"type\": \"WHALE\",\r\n  \"behavior\": \"STABLE\",\r\n  \"playDays\": [\"MONDAY\", \"WEDNESDAY\", \"FRIDAY\", \"THURSDAY\"],\r\n  \"userId\": 25,\r\n  \"startTime\": \"18:30\",\r\n\"games\": [12, 13, 14]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/admin/bot-activity/manage",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"bot-activity",
										"manage"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChangeBotToggle",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjg0LCJuYW1lIjoibDFrc29uaTIiLCJlbWFpbCI6Imxpa3NvbmljQGdtYWlsLmNvbSIsInNJZCI6ImRmNmQ1YzQ4LTE5NjUtNGM5NC05ZDExLTRmNmFmNWJkMjk2YiIsInNLZXkiOiI0ZjM1YzdiNi1mMjg4LTRkYzQtYjk2ZS1iZDMzYzY5NjliNTgiLCJydCI6ZmFsc2UsInJvbGVzIjpbIlVzZXIiXSwiaWF0IjoxNzUwODM2OTM4LCJleHAiOjE3NTA5MjMzMzh9.LgMcCcdCs1n_Yc4lqipOsqiYyDDvc-7S3NHd12LjM9g",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isBot\": true,\r\n  \"userId\": 1015\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{TestApi}}/admin/bot-activity/bot-toggle",
									"host": [
										"{{TestApi}}"
									],
									"path": [
										"admin",
										"bot-activity",
										"bot-toggle"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "fastTrack",
					"item": [
						{
							"name": "authIntegration",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					]
				},
				{
					"name": "хлам",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{api_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "chat",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "qa",
			"item": [
				{
					"name": "user api",
					"item": [
						{
							"name": "Authorization API",
							"item": [
								{
									"name": "reg via email",
									"item": [
										{
											"name": "sign up",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Проверка статуса ответа\r",
															"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
															"\r",
															"// Извлечение тела запроса\r",
															"const requestBody = pm.request.body.raw;\r",
															"let requestJson = {};\r",
															"if (requestBody) {\r",
															"    try {\r",
															"        requestJson = JSON.parse(requestBody);\r",
															"    } catch (error) {\r",
															"        console.error(\"Error parsing request body:\", error);\r",
															"    }\r",
															"}\r",
															"\r",
															"// Сохранение email и password из тела запроса\r",
															"const email = requestJson?.email;\r",
															"if (email) pm.environment.set(\"UserEmail\", email);\r",
															"\r",
															"const password = requestJson?.password;\r",
															"if (password) pm.environment.set(\"UserPassword\", password);\r",
															"\r",
															"// Извлечение тела ответа\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"// Тесты на наличие токенов в ответе\r",
															"pm.test(\"Response has accessToken\", () => {\r",
															"    pm.expect(responseJson).to.have.property(\"accessToken\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has refreshToken\", () => {\r",
															"    pm.expect(responseJson).to.have.property(\"refreshToken\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has socketToken\", () => {\r",
															"    pm.expect(responseJson).to.have.property(\"socketToken\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "is-capture-on",
														"value": "off",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Welcome123@\",\r\n  \"username\": \"{{$randomFirstName}}\",\r\n   \"isEmailNotificationsEnabled\": true,\r\n    // \"affiliateCode\": \"REFERRAL_CODE_REGEX\",\r\n  \"language\": \"en-US\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}auth/sign-up",
													"host": [
														"{{stagingUrl}}auth"
													],
													"path": [
														"sign-up"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "forgot-password",
									"item": [
										{
											"name": "New Request",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								},
								{
									"name": "reg via Google",
									"item": [
										{
											"name": "setup-username",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"SpongeBob\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}auth/setup-username",
													"host": [
														"{{stagingUrl}}auth"
													],
													"path": [
														"setup-username"
													],
													"query": [
														{
															"key": "setupUsernameToken",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "auth google",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJsaWFoLmFuZHJpeTIwQGdtYWlsLmNvbSIsImlzVGVtcFVzZXIiOnRydWUsImlhdCI6MTczMjAxMDQ5OSwiZXhwIjoxNzMyMDEwNTAwfQ.Z1anInuVIzMKm_VsHawm4HXUc0QUJodP7qaQ-oSWaiQ",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}auth/google",
													"host": [
														"{{stagingUrl}}auth"
													],
													"path": [
														"google"
													]
												}
											},
											"response": []
										},
										{
											"name": "google callback",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}auth/google/callback",
													"host": [
														"{{stagingUrl}}auth"
													],
													"path": [
														"google",
														"callback"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "reg via steam",
									"item": [
										{
											"name": "steam return",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}auth/steam/return",
													"host": [
														"{{stagingUrl}}auth"
													],
													"path": [
														"steam",
														"return"
													]
												}
											},
											"response": []
										},
										{
											"name": "steam",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "9E011EE879E37D9330AD69A124110E67",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}auth/steam",
													"host": [
														"{{stagingUrl}}auth"
													],
													"path": [
														"steam"
													]
												}
											},
											"response": []
										},
										{
											"name": "setup-username",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"SpongeBob\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}auth/setup-username",
													"host": [
														"{{stagingUrl}}auth"
													],
													"path": [
														"setup-username"
													],
													"query": [
														{
															"key": "setupUsernameToken",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "sing in",
									"item": [
										{
											"name": "login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"// Проверка статуса ответа\r",
															"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
															"\r",
															"// Извлечение тела ответа\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"// Тесты на наличие токенов в ответе\r",
															"pm.test(\"Response has accessToken\", () => {\r",
															"    pm.expect(responseJson).to.have.property(\"accessToken\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has refreshToken\", () => {\r",
															"    pm.expect(responseJson).to.have.property(\"refreshToken\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has socketToken\", () => {\r",
															"    pm.expect(responseJson).to.have.property(\"socketToken\");\r",
															"});\r",
															"\r",
															"// Проверка свойств токенов\r",
															"pm.test(\"Access token has required fields\", () => {\r",
															"    pm.expect(responseJson.accessToken).to.have.property(\"token\");\r",
															"    pm.expect(responseJson.accessToken).to.have.property(\"expirationDate\");\r",
															"});\r",
															"\r",
															"pm.test(\"Refresh token has required fields\", () => {\r",
															"    pm.expect(responseJson.refreshToken).to.have.property(\"token\");\r",
															"    pm.expect(responseJson.refreshToken).to.have.property(\"expirationDate\");\r",
															"});\r",
															"\r",
															"pm.test(\"Socket token has required fields\", () => {\r",
															"    pm.expect(responseJson.socketToken).to.have.property(\"token\");\r",
															"    pm.expect(responseJson.socketToken).to.have.property(\"expirationDate\");\r",
															"});\r",
															"\r",
															"// Сохранение токенов в переменные окружения\r",
															"if (responseJson.accessToken) {\r",
															"    pm.environment.set(\"accessToken\", responseJson.accessToken.token);\r",
															"    pm.environment.set(\"accessTokenExpiration\", responseJson.accessToken.expirationDate);\r",
															"}\r",
															"\r",
															"if (responseJson.refreshToken) {\r",
															"    pm.environment.set(\"refreshToken\", responseJson.refreshToken.token);\r",
															"    pm.environment.set(\"refreshTokenExpiration\", responseJson.refreshToken.expirationDate);\r",
															"}\r",
															"\r",
															"if (responseJson.socketToken) {\r",
															"    pm.environment.set(\"socketToken\", responseJson.socketToken.token);\r",
															"    pm.environment.set(\"socketTokenExpiration\", responseJson.socketToken.expirationDate);\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n//   \"email\": \"{{UserEmail}}\",\r\n  \"email\": \"nebajis208@btcours.com\",\r\n  \"password\": \"Welcome123@\"\r\n}\r\n\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}auth/sign-in",
													"host": [
														"{{stagingUrl}}auth"
													],
													"path": [
														"sign-in"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "logout",
									"item": [
										{
											"name": "session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Find sessionKey where isCurrent is false\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"   \r",
															"    if (responseJson.data && Array.isArray(responseJson.data)) {\r",
															"        \r",
															"        const targetObject = responseJson.data.find(item => item.isCurrent === false);\r",
															"\r",
															"        if (targetObject && targetObject.sessionKey) {\r",
															"       \r",
															"            pm.environment.set(\"sessionKey\", targetObject.sessionKey);\r",
															"            console.log(\"sessionKey saved:\", targetObject.sessionKey);\r",
															"        } else {\r",
															"           \r",
															"            pm.expect.fail(\"isCurrent false not found or sessionKey is missing\");\r",
															"        }\r",
															"    } else {\r",
															"     \r",
															"        pm.expect.fail(\"Response does not contain a valid 'data' array\");\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}session?onlyActive=true&page=1&take=20",
													"host": [
														"{{stagingUrl}}session"
													],
													"query": [
														{
															"key": "onlyActive",
															"value": "true"
														},
														{
															"key": "onlyActive",
															"value": "false",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "log-out/other",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}session/log-out/other",
													"host": [
														"{{stagingUrl}}session"
													],
													"path": [
														"log-out",
														"other"
													]
												}
											},
											"response": []
										},
										{
											"name": "log-out/current",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}session/log-out/current",
													"host": [
														"{{stagingUrl}}session"
													],
													"path": [
														"log-out",
														"current"
													]
												}
											},
											"response": []
										},
										{
											"name": "log-out/{{sessionKey}}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}session/log-out/{{sessionKey}}",
													"host": [
														"{{stagingUrl}}session"
													],
													"path": [
														"log-out",
														"{{sessionKey}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "verify-email",
									"item": [
										{
											"name": "request-verif email",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/request-email-verification",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"request-email-verification"
													],
													"query": [
														{
															"key": "token",
															"value": "u001.XEnpit98zvzJPDXLOoLXpe1oRGu4QllzDttxMEPtrsmLondhN8RCeL8-2BGlr6qpwDXk2ANo-2BfJDlUUkbF8cV52t6AvGpjHvOH-2BU-2B2JT34DIARf6gy6cEgSKVRs3Z3yEzwA2szERp-2Bkx1GYi7oWm4gNRX6uPYlYnhik2Pij4bdW-2BblamKuAd7Wc7wOJzYjD45z22b6OhZ-2FPftt1TIhaBF5DN9ENUsw2iPl4Nm7UwWrLxwYGvAMOalp8-2FqZsflPRoE9ssgEuKtTf6CGxci7Sqh-2F05mFKnPa9tewfyz1JZ-2FbRFOmZY2QInj2obPE0yxTu78zAtNpa6HiSED6R-2BqH8eAsvA-3D-3D2nXK_FMrF9ZI4qUzi47NO15fGnQ2mbtuwV8V4ReaeRrPMc8495OjYDxxb5yfIGBuKI4rJS3sv3E8hMG7aNF0v8Dckmzgs-2BjwD3qWB5WqVJp5SY70JRG5tjoDW2FL-2B6AmA7K9ZeNirtFZbVDD3CUrEVvf9aDpUgdAB6UKcTC7s-2B1joChH87zAct53SnhyZ2vYvfEF8E2xkNbkARj7043pVnVLCZg5F31V0gVqVUOWKChSsSwt986KFrOVhEM8n6UAkrZgmXx200Epa3-2BVVbet3cUXGmQBlRipZk0YX-2B4PS6-2BHff5hl8Z2vW0UvNbWzrD4SA1TyJFn93B16sz4EFeSea1tupTa2X8QXtLRgmsEk4MTjGHA-3D",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "verify-email",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/verify-email?token=u001.XEnpit98zvzJPDXLOoLXpe1oRGu4QllzDttxMEPtrsmLondhN8RCeL8-2BGlr6qpwDXk2ANo-2BfJDlUUkbF8cV52t6AvGpjHvOH-2BU-2B2JT34DIARf6gy6cEgSKVRs3Z3yEzwA2szERp-2Bkx1GYi7oWm4gNRX6uPYlYnhik2Pij4bdW-2BblamKuAd7Wc7wOJzYjD45z22b6OhZ-2FPftt1TIhaBF5DMgIUw7-2BDvik0w2xJM-2FEIXS6hGxv1Tilst6ksHZCbSl7IcaHso-2BTOhTqMqNd46AWCHwMNqJJNvhv4qCuj-2BJlU8CldPlB-2BRgjfvmHc7cetZj78zsam4DUqc2berGGc0dDbg-3D-3Dwfmi_FMrF9ZI4qUzi47NO15fGnQ2mbtuwV8V4ReaeRrPMc8495OjYDxxb5yfIGBuKI4rJS3sv3E8hMG7aNF0v8Dckmzgs-2BjwD3qWB5WqVJp5SY70JRG5tjoDW2FL-2B6AmA7K9ZeNirtFZbVDD3CUrEVvf9aDpUgdAB6UKcTC7s-2B1joChGGBbvkXcmlt4yGtkeddrkNV-2FhpmVYkEhszcB0LKh3qqMNDOdkTHKYP9Y6ujYatWjDjFVwvo7sX9cuSTCIzY6vC5-2BgnT1u1Y68hNVKQUkDRmBJyY4WW5VcjZ0RJ0LxOSidT1Hwr-2FWQUxvW0fzdbETq8M-2B-2FspLt63GJwuYe1zn2fKj0mjqk8zV-2FSe2q7fP2JA7o-3D",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"verify-email"
													],
													"query": [
														{
															"key": "token",
															"value": "u001.XEnpit98zvzJPDXLOoLXpe1oRGu4QllzDttxMEPtrsmLondhN8RCeL8-2BGlr6qpwDXk2ANo-2BfJDlUUkbF8cV52t6AvGpjHvOH-2BU-2B2JT34DIARf6gy6cEgSKVRs3Z3yEzwA2szERp-2Bkx1GYi7oWm4gNRX6uPYlYnhik2Pij4bdW-2BblamKuAd7Wc7wOJzYjD45z22b6OhZ-2FPftt1TIhaBF5DMgIUw7-2BDvik0w2xJM-2FEIXS6hGxv1Tilst6ksHZCbSl7IcaHso-2BTOhTqMqNd46AWCHwMNqJJNvhv4qCuj-2BJlU8CldPlB-2BRgjfvmHc7cetZj78zsam4DUqc2berGGc0dDbg-3D-3Dwfmi_FMrF9ZI4qUzi47NO15fGnQ2mbtuwV8V4ReaeRrPMc8495OjYDxxb5yfIGBuKI4rJS3sv3E8hMG7aNF0v8Dckmzgs-2BjwD3qWB5WqVJp5SY70JRG5tjoDW2FL-2B6AmA7K9ZeNirtFZbVDD3CUrEVvf9aDpUgdAB6UKcTC7s-2B1joChGGBbvkXcmlt4yGtkeddrkNV-2FhpmVYkEhszcB0LKh3qqMNDOdkTHKYP9Y6ujYatWjDjFVwvo7sX9cuSTCIzY6vC5-2BgnT1u1Y68hNVKQUkDRmBJyY4WW5VcjZ0RJ0LxOSidT1Hwr-2FWQUxvW0fzdbETq8M-2B-2FspLt63GJwuYe1zn2fKj0mjqk8zV-2FSe2q7fP2JA7o-3D"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "email verification",
									"item": [
										{
											"name": "Verify email",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}/user/verify-email?token=",
													"host": [
														"{{stagingUrl}}"
													],
													"path": [
														"user",
														"verify-email"
													],
													"query": [
														{
															"key": "token",
															"value": "",
															"description": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request email verification",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/request-email-verification",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"request-email-verification"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "2fa",
									"item": [
										{
											"name": "generate 2fa",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/generate-2fa",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"generate-2fa"
													]
												}
											},
											"response": []
										},
										{
											"name": "enabled-2fa",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"otpPassword\": \"%3A%2F%2Ftotp%\",\r\n  \"mfaSecret\": \"EIXHMCTTCN5VWOSK\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}user/enable-2fa",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"enable-2fa"
													]
												}
											},
											"response": []
										},
										{
											"name": "disable-2fa",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/disable-2fa",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"disable-2fa"
													]
												}
											},
											"response": []
										},
										{
											"name": "reset-2fa",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/reset-2fa",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"reset-2fa"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "admin-user",
									"item": [
										{
											"name": "admin user",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"Marchin12\",\n  \"password\": \"Qwerty123!\",\n  \"email\": \"gacijo7983@ikowat.com\",\n  \"permissions\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}user/admin-user",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"admin-user"
													]
												}
											},
											"response": []
										},
										{
											"name": "all-permissions",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/all-permissions",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"all-permissions"
													]
												}
											},
											"response": []
										},
										{
											"name": "user all",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user/all?withPermissions=false&withRoles=false&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user",
														"all"
													],
													"query": [
														{
															"key": "withPermissions",
															"value": "false",
															"description": "alse true"
														},
														{
															"key": "withRoles",
															"value": "false",
															"description": "also true"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "all-roles-with-users",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/get-all-roles-with-users",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"get-all-roles-with-users"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "rakeback",
							"item": [
								{
									"name": "rakeback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"\r",
													"// Проверяем статус ответа\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Функция для проверки rakeback\r",
													"function validateRakeback(type, expectedEmpty) {\r",
													"    pm.test(`${type} rakeback validation`, function () {\r",
													"        const rakeback = responseData[type]?.rakeback;\r",
													"\r",
													"        // Проверяем, что поле существует и является массивом\r",
													"        pm.expect(rakeback).to.be.an(\"array\");\r",
													"\r",
													"        if (expectedEmpty) {\r",
													"            // Если ожидается пустой массив\r",
													"            pm.expect(rakeback).to.have.lengthOf(0);\r",
													"        } else {\r",
													"            // Если массив может содержать элементы\r",
													"            pm.expect(rakeback.length).to.be.at.least(0); // Массив может быть пустым или содержать элементы\r",
													"\r",
													"            if (rakeback.length > 0) {\r",
													"                // Если есть элементы, проверяем их структуру\r",
													"                rakeback.forEach(item => {\r",
													"                    pm.expect(item).to.have.property(\"amount\").that.is.a(\"string\");\r",
													"                    pm.expect(item).to.have.property(\"currencyId\").that.is.a(\"string\");\r",
													"                });\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"// Проверяем \"instant\" (может содержать элементы)\r",
													"validateRakeback(\"instant\", false);\r",
													"\r",
													"// Проверяем \"daily\" (может содержать элементы)\r",
													"validateRakeback(\"daily\", false);\r",
													"\r",
													"// Проверяем \"weekly\" (может содержать элементы)\r",
													"validateRakeback(\"weekly\", false);\r",
													"\r",
													"// Проверяем \"monthly\" (ожидается пустой массив)\r",
													"validateRakeback(\"monthly\", true);\r",
													"\r",
													"// Дополнительный лог для проверки содержимого\r",
													"console.log(\"Instant rakeback:\", responseData.instant?.rakeback || \"No data\");\r",
													"console.log(\"Daily rakeback:\", responseData.daily?.rakeback || \"No data\");\r",
													"console.log(\"Weekly rakeback:\", responseData.weekly?.rakeback || \"No data\");\r",
													"console.log(\"Monthly rakeback:\", responseData.monthly?.rakeback || \"No data\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{stagingUrl}}rakeback",
											"host": [
												"{{stagingUrl}}rakeback"
											]
										}
									},
									"response": []
								},
								{
									"name": "rakeback/claim",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"WEEKLY\",\r\n//\"double\": true\r\n\"double\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}rakeback/claim",
											"host": [
												"{{stagingUrl}}rakeback"
											],
											"path": [
												"claim"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "profile",
							"item": [
								{
									"name": "KYC 1",
									"item": [
										{
											"name": "KYC 1",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"gender\": \"MALE\",\n  \"firstName\": \"xcvxc\",\n  \"lastName\": \"xcvxc\",\n  \"dateOfBirth\": \"2000-01-01T00:00:00.000\",\n  \"countryCode\": \"FR\",\n  \"address\": \"xcv\",\n  \"postalCode\": \"VR30037\",\n  \"city\": \"cdf\",\n  \"occupation\": \"vcbcv\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}kyc/level-one",
													"host": [
														"{{stagingUrl}}kyc"
													],
													"path": [
														"level-one"
													]
												}
											},
											"response": []
										},
										{
											"name": "country",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}country",
													"host": [
														"{{stagingUrl}}country"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "vault",
									"item": [
										{
											"name": "vault-deposit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Check if success is true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"amount\": \"10\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}accounting/to-vault",
													"host": [
														"{{stagingUrl}}accounting"
													],
													"path": [
														"to-vault"
													]
												}
											},
											"response": []
										},
										{
											"name": "vault-balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}accounting/vault-balances",
													"host": [
														"{{stagingUrl}}accounting"
													],
													"path": [
														"vault-balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "vault-withdraw",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Check if success is true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"amount\": \"5\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}accounting/from-vault",
													"host": [
														"{{stagingUrl}}accounting"
													],
													"path": [
														"from-vault"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "streamer",
									"item": [
										{
											"name": "me/stats",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/me",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"me"
													]
												}
											},
											"response": []
										},
										{
											"name": "streamer",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"isStreamer\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}user/me",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"me"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "private",
									"item": [
										{
											"name": "me/stats",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}user/me",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"me"
													]
												}
											},
											"response": []
										},
										{
											"name": "private",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"isPrivate\": true,\r\n  \"isEmailNotificationsEnabled\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}user/me",
													"host": [
														"{{stagingUrl}}user"
													],
													"path": [
														"me"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "balances",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверяем статус ответа\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Проверяем, что ответ содержит массив\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"// Проверяем, что каждый элемент имеет currencyId и amount\r",
													"pm.test(\"Each element has currencyId and amount\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    jsonData.forEach(item => {\r",
													"        pm.expect(item).to.have.property(\"currencyId\");\r",
													"        pm.expect(item).to.have.property(\"amount\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Проверяем, что currencyId уникальны\r",
													"pm.test(\"currencyId values are unique\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    const currencyIds = jsonData.map(item => item.currencyId);\r",
													"    const uniqueCurrencyIds = [...new Set(currencyIds)];\r",
													"    pm.expect(currencyIds.length).to.eql(uniqueCurrencyIds.length);\r",
													"});\r",
													"\r",
													"// Проверяем, что currencyId содержит ожидаемые значения\r",
													"pm.test(\"currencyId contains expected values\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    const expectedCurrencies = [\"BTC\", \"ETH\", \"USDT\", \"USDC\", \"LTC\", \"TRX\", \"POL\", \"BNB\", \"SOL\", \"TETH\"];\r",
													"    const actualCurrencies = jsonData.map(item => item.currencyId);\r",
													"    expectedCurrencies.forEach(currency => {\r",
													"        pm.expect(actualCurrencies).to.include(currency);\r",
													"    });\r",
													"});\r",
													"\r",
													"// Проверяем, что типы данных корректны\r",
													"pm.test(\"Data types are correct\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    jsonData.forEach(item => {\r",
													"        pm.expect(item.currencyId).to.be.a(\"string\");\r",
													"        pm.expect(item.amount).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Отслеживаем изменения для конкретной валюты\r",
													"pm.test(\"Track changes for USDT\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    const targetCurrency = \"USDT\";\r",
													"\r",
													"    // Найти объект с currencyId = USDT\r",
													"    const usdtData = jsonData.find(item => item.currencyId === targetCurrency);\r",
													"    if (usdtData) {\r",
													"        const currentAmount = parseFloat(usdtData.amount);\r",
													"\r",
													"        // Получить сохранённое значение предыдущей суммы\r",
													"        const previousAmount = parseFloat(pm.collectionVariables.get(\"USDT_PreviousAmount\")) || 0;\r",
													"\r",
													"        // Вычислить разницу\r",
													"        const difference = currentAmount - previousAmount;\r",
													"\r",
													"        // Выводим информацию в консоль\r",
													"        console.log(`Currency: ${targetCurrency}`);\r",
													"        console.log(`Previous Amount: ${previousAmount}`);\r",
													"        console.log(`Current Amount: ${currentAmount}`);\r",
													"        console.log(`Difference: ${difference}`);\r",
													"\r",
													"        // Сохраняем текущее значение как новое предыдущее\r",
													"        pm.collectionVariables.set(\"USDT_PreviousAmount\", currentAmount.toString());\r",
													"    } else {\r",
													"        console.log(`Currency ${targetCurrency} not found in the response.`);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}debug/deposit/emulate-success/13",
											"host": [
												"{{stagingUrl}}debug"
											],
											"path": [
												"deposit",
												"emulate-success",
												"13"
											]
										}
									},
									"response": []
								},
								{
									"name": "profile?",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверяем статус ответа\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Проверяем, что все ожидаемые поля существуют\r",
													"pm.test(\"Response has all required fields\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    // Основные поля\r",
													"    const requiredFields = [\r",
													"        \"createdAt\", \"username\", \"isPrivate\", \"isStreamer\", \"vipLevel\", \"exp\",\r",
													"        \"email\", \"googleEmail\", \"steamId\", \"avatar\", \"roles\", \"permissions\",\r",
													"        \"isBanned\", \"emailVerified\", \"emailVerificationPending\", \"botId\",\r",
													"        \"isBot\", \"isEmailNotificationsEnabled\", \"intercomToken\", \"kyc\"\r",
													"    ];\r",
													"    \r",
													"    requiredFields.forEach(field => {\r",
													"        pm.expect(jsonData).to.have.property(field);\r",
													"    });\r",
													"\r",
													"    // Проверяем наличие вложенного объекта kyc и его поля\r",
													"    const kycFields = [\"level\", \"verificationPending\", \"gender\", \"countryCode\", \"dateOfBirth\", \"firstName\", \"lastName\"];\r",
													"    kycFields.forEach(field => {\r",
													"        pm.expect(jsonData.kyc).to.have.property(field);\r",
													"    });\r",
													"});\r",
													"\r",
													"// Проверяем, что roles поле корректно\r",
													"pm.test(\"Roles field is correct\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.roles).to.be.an(\"array\").and.to.include(\"User\");\r",
													"});\r",
													"\r",
													"// Проверяем значения логических полей\r",
													"pm.test(\"Boolean fields have correct values\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    const booleanFields = [\r",
													"        \"isPrivate\", \"isStreamer\", \"isBanned\", \r",
													"        \"emailVerified\", \"emailVerificationPending\", \r",
													"        \"isBot\", \"isEmailNotificationsEnabled\"\r",
													"    ];\r",
													"\r",
													"    booleanFields.forEach(field => {\r",
													"        pm.expect(jsonData[field]).to.be.a(\"boolean\");\r",
													"    });\r",
													"\r",
													"    // Проверяем вложенные логические поля\r",
													"    pm.expect(jsonData.kyc.verificationPending).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"// Проверяем корректность типов данных\r",
													"pm.test(\"Field data types are correct\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.vipLevel).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.exp).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.email).to.satisfy(value => value === null || typeof value === \"string\");\r",
													"    pm.expect(jsonData.googleEmail).to.satisfy(value => value === null || typeof value === \"string\");\r",
													"    pm.expect(jsonData.steamId).to.satisfy(value => value === null || typeof value === \"string\");\r",
													"    pm.expect(jsonData.avatar).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.roles).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.permissions).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.botId).to.satisfy(value => value === null || typeof value === \"string\");\r",
													"    pm.expect(jsonData.intercomToken).to.be.a(\"string\");\r",
													"\r",
													"    // Проверяем типы вложенных полей kyc\r",
													"    const kyc = jsonData.kyc;\r",
													"    pm.expect(kyc.level).to.be.a(\"string\");\r",
													"    pm.expect(kyc.gender).to.be.a(\"string\");\r",
													"    pm.expect(kyc.countryCode).to.satisfy(value => value === null || typeof value === \"string\");\r",
													"    pm.expect(kyc.dateOfBirth).to.satisfy(value => value === null || typeof value === \"string\");\r",
													"    pm.expect(kyc.firstName).to.satisfy(value => value === null || typeof value === \"string\");\r",
													"    pm.expect(kyc.lastName).to.satisfy(value => value === null || typeof value === \"string\");\r",
													"});\r",
													"\r",
													"// Логируем содержимое для отладки\r",
													"console.log(\"Response data:\", pm.response.json());\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}user/me",
											"host": [
												"{{stagingUrl}}user"
											],
											"path": [
												"me"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User stats",
							"item": [
								{
									"name": "other stats",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}user/messingaround/stats",
											"host": [
												"{{stagingUrl}}user"
											],
											"path": [
												"messingaround",
												"stats"
											]
										}
									},
									"response": []
								},
								{
									"name": "me stats",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjMwMDUsIm5hbWUiOiJqb2Zpa2ExMDE2IiwiZW1haWwiOiJqb2Zpa2ExMDE2QGNhbG1wcm9zLmNvbSIsInNJZCI6IjRkY2JjNjIyLTZlNTEtNDUyYy05OTNlLWRlNmVjY2RiZmE3NSIsInNLZXkiOiJhZWQwZDhjYi1hNTUzLTQ4ZDAtYmM5NS05NmI4NjQ0MWY5MWUiLCJydCI6ZmFsc2UsInJvbGVzIjpbIlVzZXIiXSwiaWF0IjoxNzQ1MzI2NDkxLCJleHAiOjE3NDUzMzcyOTF9.VGTsoqU4pp42vVuocoLmBqayCcWQwGfHRA-9Z499oJI",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.dropbet.com/user/me/stats",
											"protocol": "https",
											"host": [
												"api",
												"dropbet",
												"com"
											],
											"path": [
												"user",
												"me",
												"stats"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "wallet",
							"item": [
								{
									"name": "Tips",
									"item": [
										{
											"name": "admin send for user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Проверяем статус ответа\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Проверяем основные ключи в корневом объекте\r",
															"pm.test(\"Response contains main keys\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"take\");\r",
															"    pm.expect(jsonData).to.have.property(\"page\");\r",
															"    pm.expect(jsonData).to.have.property(\"total\");\r",
															"    pm.expect(jsonData).to.have.property(\"totalPages\");\r",
															"    pm.expect(jsonData).to.have.property(\"data\");\r",
															"});\r",
															"\r",
															"\r",
															"// Проверяем структуру объекта внутри массива \"data\"\r",
															"pm.test(\"Data array contains correct objects\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    const item = jsonData.data[0];\r",
															"    pm.expect(item).to.have.property(\"id\");\r",
															"    pm.expect(item).to.have.property(\"currencyId\");\r",
															"    pm.expect(item).to.have.property(\"amount\");\r",
															"    pm.expect(item).to.have.property(\"isPublic\");\r",
															"    pm.expect(item).to.have.property(\"createdAt\");\r",
															"    pm.expect(item).to.have.property(\"sender\");\r",
															"    pm.expect(item).to.have.property(\"recipient\");\r",
															"});\r",
															"\r",
															"\r",
															"// Проверяем типы данных\r",
															"pm.test(\"Data types are correct\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    const item = jsonData.data[0];\r",
															"\r",
															"    pm.expect(item.id).to.be.a(\"number\");\r",
															"    pm.expect(item.currencyId).to.be.a(\"string\");\r",
															"    pm.expect(item.amount).to.be.a(\"string\");\r",
															"    pm.expect(item.isPublic).to.be.a(\"boolean\");\r",
															"    pm.expect(item.createdAt).to.be.a(\"string\");\r",
															"    pm.expect(item.sender).to.be.an(\"object\");\r",
															"    pm.expect(item.recipient).to.be.an(\"object\");\r",
															"\r",
															"    pm.expect(item.sender.username).to.be.a(\"string\");\r",
															"    pm.expect(item.sender.avatar).to.be.a(\"string\");\r",
															"    pm.expect(item.recipient.username).to.be.a(\"string\");\r",
															"    pm.expect(item.recipient.avatar).to.be.a(\"string\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin-tips?SortBy=createdAt&sortDirection=asc&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin-tips"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "amount",
															"disabled": true
														},
														{
															"key": "SortBy",
															"value": "createdAt"
														},
														{
															"key": "sortDirection",
															"value": "asc"
														},
														{
															"key": "sortDirection",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "tips user for user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Проверяем статус ответа\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Проверяем основные ключи в корневом объекте\r",
															"pm.test(\"Response contains main keys\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"take\");\r",
															"    pm.expect(jsonData).to.have.property(\"page\");\r",
															"    pm.expect(jsonData).to.have.property(\"total\");\r",
															"    pm.expect(jsonData).to.have.property(\"totalPages\");\r",
															"    pm.expect(jsonData).to.have.property(\"data\");\r",
															"});\r",
															"\r",
															"\r",
															"// Проверяем структуру объекта внутри массива \"data\"\r",
															"pm.test(\"Data array contains correct objects\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    const item = jsonData.data[0];\r",
															"    pm.expect(item).to.have.property(\"id\");\r",
															"    pm.expect(item).to.have.property(\"currencyId\");\r",
															"    pm.expect(item).to.have.property(\"amount\");\r",
															"    pm.expect(item).to.have.property(\"isPublic\");\r",
															"    pm.expect(item).to.have.property(\"createdAt\");\r",
															"    pm.expect(item).to.have.property(\"sender\");\r",
															"    pm.expect(item).to.have.property(\"recipient\");\r",
															"});\r",
															"\r",
															"\r",
															"// Проверяем типы данных\r",
															"pm.test(\"Data types are correct\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    const item = jsonData.data[0];\r",
															"\r",
															"    pm.expect(item.id).to.be.a(\"number\");\r",
															"    pm.expect(item.currencyId).to.be.a(\"string\");\r",
															"    pm.expect(item.amount).to.be.a(\"string\");\r",
															"    pm.expect(item.isPublic).to.be.a(\"boolean\");\r",
															"    pm.expect(item.createdAt).to.be.a(\"string\");\r",
															"    pm.expect(item.sender).to.be.an(\"object\");\r",
															"    pm.expect(item.recipient).to.be.an(\"object\");\r",
															"\r",
															"    pm.expect(item.sender.username).to.be.a(\"string\");\r",
															"    pm.expect(item.sender.avatar).to.be.a(\"string\");\r",
															"    pm.expect(item.recipient.username).to.be.a(\"string\");\r",
															"    pm.expect(item.recipient.avatar).to.be.a(\"string\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}tips?SortBy=createdAt&sortDirection=asc&page=1&take=20",
													"host": [
														"{{stagingUrl}}tips"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "amount",
															"disabled": true
														},
														{
															"key": "SortBy",
															"value": "createdAt"
														},
														{
															"key": "sortDirection",
															"value": "asc"
														},
														{
															"key": "sortDirection",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "tips",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Проверяем статус ответа\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"// Проверяем, что тело ответа содержит ключ \"success\" со значением true\r",
															"pm.test(\"Response contains success: true\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
															"});\r",
															"\r",
															"// Проверяем, что тело ответа имеет правильный формат\r",
															"pm.test(\"Response is a valid JSON\", function () {\r",
															"    pm.response.to.have.jsonBody();\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": \"100000\",\r\n  \"currencyId\": \"EVO\",\r\n  \"recipientUsername\": \"dianabhk\",\r\n  \"isPublic\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}tips",
													"host": [
														"{{stagingUrl}}tips"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "wallet api",
									"item": [
										{
											"name": "deposit",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}payments/deposit?page=1&take=20",
													"host": [
														"{{stagingUrl}}payments"
													],
													"path": [
														"deposit"
													],
													"query": [
														{
															"key": "status",
															"value": "PENDING",
															"disabled": true
														},
														{
															"key": "status",
															"value": "CONFIRMED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "COMPLETE",
															"disabled": true
														},
														{
															"key": "status",
															"value": "FAILED",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "CREATED_AT",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "USD_AMOUNT",
															"disabled": true
														},
														{
															"key": "sortOrder ",
															"value": "asc",
															"disabled": true
														},
														{
															"key": "sortOrder ",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "withdraw",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}payments/withdraw?sortBy =USD_AMOUNT&sortOrder =desc&page=1&take=20",
													"host": [
														"{{stagingUrl}}payments"
													],
													"path": [
														"withdraw"
													],
													"query": [
														{
															"key": "status",
															"value": "PENDING",
															"disabled": true
														},
														{
															"key": "status",
															"value": "CONFIRMED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "COMPLETE",
															"disabled": true
														},
														{
															"key": "status",
															"value": "DENIED",
															"disabled": true
														},
														{
															"key": "sortBy ",
															"value": "CREATED_AT",
															"disabled": true
														},
														{
															"key": "sortBy ",
															"value": "USD_AMOUNT"
														},
														{
															"key": "sortOrder ",
															"value": "asc",
															"disabled": true
														},
														{
															"key": "sortOrder ",
															"value": "desc"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "withdraw fee",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}payments/withdraw/fee",
													"host": [
														"{{stagingUrl}}payments"
													],
													"path": [
														"withdraw",
														"fee"
													],
													"query": [
														{
															"key": "currencyId",
															"value": "TRX",
															"disabled": true
														},
														{
															"key": "networkId",
															"value": "TRX",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "wallet",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}wallet?currencyId=USDT&networkId=TRX",
													"host": [
														"{{stagingUrl}}wallet"
													],
													"query": [
														{
															"key": "currencyId",
															"value": "USDT"
														},
														{
															"key": "networkId",
															"value": "TRX"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "withdraw",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": \"6300\",\r\n  \"currencyId\": \"USDT\",\r\n  \"networkId\": \"TRX\",\r\n  \"recipientAddress\": \"TWXjzHVvGT1yHSiqbQYSsaJjqG8hWGM3rY\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}withdraw",
													"host": [
														"{{stagingUrl}}withdraw"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "give me money",
							"item": [
								{
									"name": "give me money",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}user/me/give-money?debug_token={{accessToken}}",
											"host": [
												"{{stagingUrl}}user"
											],
											"path": [
												"me",
												"give-money"
											],
											"query": [
												{
													"key": "debug_token",
													"value": "{{accessToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "casino api",
							"item": [
								{
									"name": "Games",
									"item": [
										{
											"name": "BlackJack",
											"item": [
												{
													"name": "solo",
													"item": [
														{
															"name": "init",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"const jsonData = pm.response.json();\r",
																			"\r",
																			"// Маппинг ID карт на текстовые значения и их номиналы\r",
																			"const cardMapping = {\r",
																			"    1: { text: \"♠2\", value: 2 }, 2: { text: \"♠3\", value: 3 }, 3: { text: \"♠4\", value: 4 },\r",
																			"    4: { text: \"♠5\", value: 5 }, 5: { text: \"♠6\", value: 6 }, 6: { text: \"♠7\", value: 7 },\r",
																			"    7: { text: \"♠8\", value: 8 }, 8: { text: \"♠9\", value: 9 }, 9: { text: \"♠10\", value: 10 },\r",
																			"    10: { text: \"♠J\", value: 10 }, 11: { text: \"♠Q\", value: 10 }, 12: { text: \"♠K\", value: 10 },\r",
																			"    13: { text: \"♠A\", value: 11 }, 14: { text: \"♥2\", value: 2 }, 15: { text: \"♥3\", value: 3 },\r",
																			"    16: { text: \"♥4\", value: 4 }, 17: { text: \"♥5\", value: 5 }, 18: { text: \"♥6\", value: 6 },\r",
																			"    19: { text: \"♥7\", value: 7 }, 20: { text: \"♥8\", value: 8 }, 21: { text: \"♥9\", value: 9 },\r",
																			"    22: { text: \"♥10\", value: 10 }, 23: { text: \"♥J\", value: 10 }, 24: { text: \"♥Q\", value: 10 },\r",
																			"    25: { text: \"♥K\", value: 10 }, 26: { text: \"♥A\", value: 11 }, 27: { text: \"♦2\", value: 2 },\r",
																			"    28: { text: \"♦3\", value: 3 }, 29: { text: \"♦4\", value: 4 }, 30: { text: \"♦5\", value: 5 },\r",
																			"    31: { text: \"♦6\", value: 6 }, 32: { text: \"♦7\", value: 7 }, 33: { text: \"♦8\", value: 8 },\r",
																			"    34: { text: \"♦9\", value: 9 }, 35: { text: \"♦10\", value: 10 }, 36: { text: \"♦J\", value: 10 },\r",
																			"    37: { text: \"♦Q\", value: 10 }, 38: { text: \"♦K\", value: 10 }, 39: { text: \"♦A\", value: 11 },\r",
																			"    40: { text: \"♣2\", value: 2 }, 41: { text: \"♣3\", value: 3 }, 42: { text: \"♣4\", value: 4 },\r",
																			"    43: { text: \"♣5\", value: 5 }, 44: { text: \"♣6\", value: 6 }, 45: { text: \"♣7\", value: 7 },\r",
																			"    46: { text: \"♣8\", value: 8 }, 47: { text: \"♣9\", value: 9 }, 48: { text: \"♣10\", value: 10 },\r",
																			"    49: { text: \"♣J\", value: 10 }, 50: { text: \"♣Q\", value: 10 }, 51: { text: \"♣K\", value: 10 },\r",
																			"    52: { text: \"♣A\", value: 11 }\r",
																			"};\r",
																			"\r",
																			"// Функция для преобразования ID карт в текстовые значения\r",
																			"function getCardsText(cards) {\r",
																			"    return cards.map(cardId => cardMapping[cardId]?.text || `Unknown (${cardId})`);\r",
																			"}\r",
																			"\r",
																			"// Функция для подсчёта очков\r",
																			"function calculateScore(cards) {\r",
																			"    let total = 0;\r",
																			"    let aces = 0;\r",
																			"\r",
																			"    cards.forEach(cardId => {\r",
																			"        const card = cardMapping[cardId];\r",
																			"        if (card) {\r",
																			"            total += card.value;\r",
																			"            if (card.text.includes(\"A\")) {\r",
																			"                aces += 1;\r",
																			"            }\r",
																			"        }\r",
																			"    });\r",
																			"\r",
																			"    // Корректируем значение тузов (A), если сумма превышает 21\r",
																			"    while (total > 21 && aces > 0) {\r",
																			"        total -= 10; // Считаем туза как 1 вместо 11\r",
																			"        aces -= 1;\r",
																			"    }\r",
																			"\r",
																			"    return total;\r",
																			"}\r",
																			"\r",
																			"// Извлекаем данные\r",
																			"const dealerHand = jsonData.data.dealerHand;\r",
																			"const mainPlayerHand = jsonData.data.mainPlayerHand;\r",
																			"const splitPlayerHand = jsonData.data.splitPlayerHand || [];\r",
																			"const mainPlayerActions = jsonData.data.mainPlayerActions || [];\r",
																			"const splitPlayerActions = jsonData.data.splitPlayerActions || [];\r",
																			"const mainHandOutcome = jsonData.data.mainHandOutcome;\r",
																			"const splitHandOutcome = jsonData.data.splitHandOutcome;\r",
																			"const sideBet = jsonData.data.sideBet || {};\r",
																			"\r",
																			"// Преобразуем ID карт в текстовые значения\r",
																			"const dealerHandText = getCardsText(dealerHand);\r",
																			"const mainPlayerHandText = getCardsText(mainPlayerHand);\r",
																			"const splitPlayerHandText = getCardsText(splitPlayerHand);\r",
																			"\r",
																			"// Подсчитываем очки для каждой руки\r",
																			"const dealerScore = calculateScore(dealerHand);\r",
																			"const mainPlayerScore = calculateScore(mainPlayerHand);\r",
																			"const splitPlayerScore = splitPlayerHand.length > 0 ? calculateScore(splitPlayerHand) : null;\r",
																			"\r",
																			"// Выводим результаты в консоль\r",
																			"console.log(\"Dealer's Hand:\", dealerHandText, \"Score:\", dealerScore);\r",
																			"console.log(\"Main Player's Hand:\", mainPlayerHandText, \"Score:\", mainPlayerScore, \"Outcome:\", mainHandOutcome, \"Actions:\", mainPlayerActions);\r",
																			"\r",
																			"if (splitPlayerHand.length > 0) {\r",
																			"    console.log(\"Split Player's Hand:\", splitPlayerHandText, \"Score:\", splitPlayerScore, \"Outcome:\", splitHandOutcome, \"Actions:\", splitPlayerActions);\r",
																			"} else {\r",
																			"    console.log(\"No split hand played.\");\r",
																			"}\r",
																			"\r",
																			"// Проверяем sideBet\r",
																			"console.log(\"Side Bet:\", {\r",
																			"    Amount: sideBet.amount,\r",
																			"    Outcome: sideBet.outcome,\r",
																			"    Multiplier: sideBet.multiplier,\r",
																			"    Payout: sideBet.payout\r",
																			"});\r",
																			"\r",
																			"// Проверяем, что карты валидны\r",
																			"pm.test(\"All cards are valid\", function () {\r",
																			"    dealerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"    mainPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"    splitPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"});\r",
																			"\r",
																			"// Проверяем, что sideBet содержит корректные значения\r",
																			"pm.test(\"Side bet fields are correct\", function () {\r",
																			"    pm.expect(sideBet).to.have.property(\"amount\").that.is.a(\"string\");\r",
																			"    pm.expect(sideBet).to.have.property(\"outcome\").that.is.a(\"string\");\r",
																			"    pm.expect(sideBet).to.have.property(\"multiplier\").that.is.a(\"number\");\r",
																			"    pm.expect(sideBet).to.have.property(\"payout\").that.is.a(\"string\");\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"currencyId\": \"DBC\",\r\n  \"betAmount\": \"5\",\r\n  \"deck\": [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    13,\r\n    14,\r\n    15,\r\n    16,\r\n    17,\r\n    18,\r\n    19,\r\n    20,\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30,\r\n    31,\r\n    32,\r\n    33,\r\n    34,\r\n    35,\r\n    36,\r\n    37,\r\n    38,\r\n    39,\r\n    40,\r\n    41,\r\n    42,\r\n    43,\r\n    44,\r\n    45,\r\n    46,\r\n    47,\r\n    48,\r\n    50,\r\n    49,\r\n    52,\r\n    51\r\n  ],\r\n  \"windowId\": \"stringstri\"\r\n}\r\n",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{stagingUrl}}/casino/games/house/blackjack/initDebug",
																	"host": [
																		"{{stagingUrl}}"
																	],
																	"path": [
																		"casino",
																		"games",
																		"house",
																		"blackjack",
																		"initDebug"
																	]
																}
															},
															"response": []
														},
														{
															"name": "getActiveState",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"// Проверка статуса ответа\r",
																			"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{stagingUrl}}casino/games/house/blackjack/getActiveState",
																	"host": [
																		"{{stagingUrl}}casino"
																	],
																	"path": [
																		"games",
																		"house",
																		"blackjack",
																		"getActiveState"
																	]
																}
															},
															"response": []
														},
														{
															"name": "handleAction",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"const jsonData = pm.response.json();\r",
																			"\r",
																			"// Маппинг ID карт на текстовые значения и их номиналы\r",
																			"const cardMapping = {\r",
																			"    1: { text: \"♠2\", value: 2 }, 2: { text: \"♠3\", value: 3 }, 3: { text: \"♠4\", value: 4 },\r",
																			"    4: { text: \"♠5\", value: 5 }, 5: { text: \"♠6\", value: 6 }, 6: { text: \"♠7\", value: 7 },\r",
																			"    7: { text: \"♠8\", value: 8 }, 8: { text: \"♠9\", value: 9 }, 9: { text: \"♠10\", value: 10 },\r",
																			"    10: { text: \"♠J\", value: 10 }, 11: { text: \"♠Q\", value: 10 }, 12: { text: \"♠K\", value: 10 },\r",
																			"    13: { text: \"♠A\", value: 11 }, 14: { text: \"♥2\", value: 2 }, 15: { text: \"♥3\", value: 3 },\r",
																			"    16: { text: \"♥4\", value: 4 }, 17: { text: \"♥5\", value: 5 }, 18: { text: \"♥6\", value: 6 },\r",
																			"    19: { text: \"♥7\", value: 7 }, 20: { text: \"♥8\", value: 8 }, 21: { text: \"♥9\", value: 9 },\r",
																			"    22: { text: \"♥10\", value: 10 }, 23: { text: \"♥J\", value: 10 }, 24: { text: \"♥Q\", value: 10 },\r",
																			"    25: { text: \"♥K\", value: 10 }, 26: { text: \"♥A\", value: 11 }, 27: { text: \"♦2\", value: 2 },\r",
																			"    28: { text: \"♦3\", value: 3 }, 29: { text: \"♦4\", value: 4 }, 30: { text: \"♦5\", value: 5 },\r",
																			"    31: { text: \"♦6\", value: 6 }, 32: { text: \"♦7\", value: 7 }, 33: { text: \"♦8\", value: 8 },\r",
																			"    34: { text: \"♦9\", value: 9 }, 35: { text: \"♦10\", value: 10 }, 36: { text: \"♦J\", value: 10 },\r",
																			"    37: { text: \"♦Q\", value: 10 }, 38: { text: \"♦K\", value: 10 }, 39: { text: \"♦A\", value: 11 },\r",
																			"    40: { text: \"♣2\", value: 2 }, 41: { text: \"♣3\", value: 3 }, 42: { text: \"♣4\", value: 4 },\r",
																			"    43: { text: \"♣5\", value: 5 }, 44: { text: \"♣6\", value: 6 }, 45: { text: \"♣7\", value: 7 },\r",
																			"    46: { text: \"♣8\", value: 8 }, 47: { text: \"♣9\", value: 9 }, 48: { text: \"♣10\", value: 10 },\r",
																			"    49: { text: \"♣J\", value: 10 }, 50: { text: \"♣Q\", value: 10 }, 51: { text: \"♣K\", value: 10 },\r",
																			"    52: { text: \"♣A\", value: 11 }\r",
																			"};\r",
																			"\r",
																			"// Функция для преобразования ID карт в текстовые значения\r",
																			"function getCardsText(cards) {\r",
																			"    return cards.map(cardId => cardMapping[cardId]?.text || `Unknown (${cardId})`);\r",
																			"}\r",
																			"\r",
																			"// Функция для подсчёта очков\r",
																			"function calculateScore(cards) {\r",
																			"    let total = 0;\r",
																			"    let aces = 0;\r",
																			"\r",
																			"    cards.forEach(cardId => {\r",
																			"        const card = cardMapping[cardId];\r",
																			"        if (card) {\r",
																			"            total += card.value;\r",
																			"            if (card.text.includes(\"A\")) {\r",
																			"                aces += 1;\r",
																			"            }\r",
																			"        }\r",
																			"    });\r",
																			"\r",
																			"    // Корректируем значение тузов (A), если сумма превышает 21\r",
																			"    while (total > 21 && aces > 0) {\r",
																			"        total -= 10; // Считаем туза как 1 вместо 11\r",
																			"        aces -= 1;\r",
																			"    }\r",
																			"\r",
																			"    return total;\r",
																			"}\r",
																			"\r",
																			"// Извлекаем данные\r",
																			"const dealerHand = jsonData.data.dealerHand;\r",
																			"const mainPlayerHand = jsonData.data.mainPlayerHand;\r",
																			"const splitPlayerHand = jsonData.data.splitPlayerHand || [];\r",
																			"const mainPlayerActions = jsonData.data.mainPlayerActions || [];\r",
																			"const splitPlayerActions = jsonData.data.splitPlayerActions || [];\r",
																			"const mainHandOutcome = jsonData.data.mainHandOutcome;\r",
																			"const splitHandOutcome = jsonData.data.splitHandOutcome;\r",
																			"const sideBet = jsonData.data.sideBet || {};\r",
																			"\r",
																			"// Преобразуем ID карт в текстовые значения\r",
																			"const dealerHandText = getCardsText(dealerHand);\r",
																			"const mainPlayerHandText = getCardsText(mainPlayerHand);\r",
																			"const splitPlayerHandText = getCardsText(splitPlayerHand);\r",
																			"\r",
																			"// Подсчитываем очки для каждой руки\r",
																			"const dealerScore = calculateScore(dealerHand);\r",
																			"const mainPlayerScore = calculateScore(mainPlayerHand);\r",
																			"const splitPlayerScore = splitPlayerHand.length > 0 ? calculateScore(splitPlayerHand) : null;\r",
																			"\r",
																			"// Выводим результаты в консоль\r",
																			"console.log(\"Dealer's Hand:\", dealerHandText, \"Score:\", dealerScore);\r",
																			"console.log(\"Main Player's Hand:\", mainPlayerHandText, \"Score:\", mainPlayerScore, \"Outcome:\", mainHandOutcome, \"Actions:\", mainPlayerActions);\r",
																			"\r",
																			"if (splitPlayerHand.length > 0) {\r",
																			"    console.log(\"Split Player's Hand:\", splitPlayerHandText, \"Score:\", splitPlayerScore, \"Outcome:\", splitHandOutcome, \"Actions:\", splitPlayerActions);\r",
																			"} else {\r",
																			"    console.log(\"No split hand played.\");\r",
																			"}\r",
																			"\r",
																			"// Проверяем sideBet\r",
																			"console.log(\"Side Bet:\", {\r",
																			"    Amount: sideBet.amount,\r",
																			"    Outcome: sideBet.outcome,\r",
																			"    Multiplier: sideBet.multiplier,\r",
																			"    Payout: sideBet.payout\r",
																			"});\r",
																			"\r",
																			"// Проверяем, что карты валидны\r",
																			"pm.test(\"All cards are valid\", function () {\r",
																			"    dealerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"    mainPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"    splitPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"});\r",
																			"\r",
																			"// Проверяем, что sideBet содержит корректные значения\r",
																			"pm.test(\"Side bet fields are correct\", function () {\r",
																			"    pm.expect(sideBet).to.have.property(\"amount\").that.is.a(\"string\");\r",
																			"    pm.expect(sideBet).to.have.property(\"outcome\").that.is.a(\"string\");\r",
																			"    pm.expect(sideBet).to.have.property(\"multiplier\").that.is.a(\"number\");\r",
																			"    pm.expect(sideBet).to.have.property(\"payout\").that.is.a(\"string\");\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "// {\r\n//   \"action\": \"HIT\"\r\n// }\r\n// {\r\n//   \"action\": \"DOUBLE_DOWN\"\r\n// }\r\n{\r\n   \"action\": \"STAND\"\r\n}\r\n// {\r\n//   \"action\": \"SPLIT\"\r\n// }\r\n// {\r\n//   \"action\": \"BUY_INSURANCE\"\r\n// }\r\n// {\r\n//   \"action\": \"REJECT_INSURANCE\"\r\n// }",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{stagingUrl}}casino/games/house/blackjack/handleAction",
																	"host": [
																		"{{stagingUrl}}casino"
																	],
																	"path": [
																		"games",
																		"house",
																		"blackjack",
																		"handleAction"
																	]
																}
															},
															"response": []
														},
														{
															"name": "config",
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessBOToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{stagingUrl}}casino/games/house/blackjack/config",
																	"host": [
																		"{{stagingUrl}}casino"
																	],
																	"path": [
																		"games",
																		"house",
																		"blackjack",
																		"config"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "SideBet Blackjack",
													"item": [
														{
															"name": "init",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"const jsonData = pm.response.json();\r",
																			"\r",
																			"// Маппинг ID карт на текстовые значения и их номиналы\r",
																			"const cardMapping = {\r",
																			"    1: { text: \"♠2\", value: 2 }, 2: { text: \"♠3\", value: 3 }, 3: { text: \"♠4\", value: 4 },\r",
																			"    4: { text: \"♠5\", value: 5 }, 5: { text: \"♠6\", value: 6 }, 6: { text: \"♠7\", value: 7 },\r",
																			"    7: { text: \"♠8\", value: 8 }, 8: { text: \"♠9\", value: 9 }, 9: { text: \"♠10\", value: 10 },\r",
																			"    10: { text: \"♠J\", value: 10 }, 11: { text: \"♠Q\", value: 10 }, 12: { text: \"♠K\", value: 10 },\r",
																			"    13: { text: \"♠A\", value: 11 }, 14: { text: \"♥2\", value: 2 }, 15: { text: \"♥3\", value: 3 },\r",
																			"    16: { text: \"♥4\", value: 4 }, 17: { text: \"♥5\", value: 5 }, 18: { text: \"♥6\", value: 6 },\r",
																			"    19: { text: \"♥7\", value: 7 }, 20: { text: \"♥8\", value: 8 }, 21: { text: \"♥9\", value: 9 },\r",
																			"    22: { text: \"♥10\", value: 10 }, 23: { text: \"♥J\", value: 10 }, 24: { text: \"♥Q\", value: 10 },\r",
																			"    25: { text: \"♥K\", value: 10 }, 26: { text: \"♥A\", value: 11 }, 27: { text: \"♦2\", value: 2 },\r",
																			"    28: { text: \"♦3\", value: 3 }, 29: { text: \"♦4\", value: 4 }, 30: { text: \"♦5\", value: 5 },\r",
																			"    31: { text: \"♦6\", value: 6 }, 32: { text: \"♦7\", value: 7 }, 33: { text: \"♦8\", value: 8 },\r",
																			"    34: { text: \"♦9\", value: 9 }, 35: { text: \"♦10\", value: 10 }, 36: { text: \"♦J\", value: 10 },\r",
																			"    37: { text: \"♦Q\", value: 10 }, 38: { text: \"♦K\", value: 10 }, 39: { text: \"♦A\", value: 11 },\r",
																			"    40: { text: \"♣2\", value: 2 }, 41: { text: \"♣3\", value: 3 }, 42: { text: \"♣4\", value: 4 },\r",
																			"    43: { text: \"♣5\", value: 5 }, 44: { text: \"♣6\", value: 6 }, 45: { text: \"♣7\", value: 7 },\r",
																			"    46: { text: \"♣8\", value: 8 }, 47: { text: \"♣9\", value: 9 }, 48: { text: \"♣10\", value: 10 },\r",
																			"    49: { text: \"♣J\", value: 10 }, 50: { text: \"♣Q\", value: 10 }, 51: { text: \"♣K\", value: 10 },\r",
																			"    52: { text: \"♣A\", value: 11 }\r",
																			"};\r",
																			"\r",
																			"// Функция для преобразования ID карт в текстовые значения\r",
																			"function getCardsText(cards) {\r",
																			"    return cards.map(cardId => cardMapping[cardId]?.text || `Unknown (${cardId})`);\r",
																			"}\r",
																			"\r",
																			"// Функция для подсчёта очков\r",
																			"function calculateScore(cards) {\r",
																			"    let total = 0;\r",
																			"    let aces = 0;\r",
																			"\r",
																			"    cards.forEach(cardId => {\r",
																			"        const card = cardMapping[cardId];\r",
																			"        if (card) {\r",
																			"            total += card.value;\r",
																			"            if (card.text.includes(\"A\")) {\r",
																			"                aces += 1;\r",
																			"            }\r",
																			"        }\r",
																			"    });\r",
																			"\r",
																			"    // Корректируем значение тузов (A), если сумма превышает 21\r",
																			"    while (total > 21 && aces > 0) {\r",
																			"        total -= 10; // Считаем туза как 1 вместо 11\r",
																			"        aces -= 1;\r",
																			"    }\r",
																			"\r",
																			"    return total;\r",
																			"}\r",
																			"\r",
																			"// Извлекаем данные\r",
																			"const dealerHand = jsonData.data.dealerHand;\r",
																			"const mainPlayerHand = jsonData.data.mainPlayerHand;\r",
																			"const splitPlayerHand = jsonData.data.splitPlayerHand || [];\r",
																			"const mainPlayerActions = jsonData.data.mainPlayerActions || [];\r",
																			"const splitPlayerActions = jsonData.data.splitPlayerActions || [];\r",
																			"const mainHandOutcome = jsonData.data.mainHandOutcome;\r",
																			"const splitHandOutcome = jsonData.data.splitHandOutcome;\r",
																			"const sideBet = jsonData.data.sideBet || {};\r",
																			"\r",
																			"// Преобразуем ID карт в текстовые значения\r",
																			"const dealerHandText = getCardsText(dealerHand);\r",
																			"const mainPlayerHandText = getCardsText(mainPlayerHand);\r",
																			"const splitPlayerHandText = getCardsText(splitPlayerHand);\r",
																			"\r",
																			"// Подсчитываем очки для каждой руки\r",
																			"const dealerScore = calculateScore(dealerHand);\r",
																			"const mainPlayerScore = calculateScore(mainPlayerHand);\r",
																			"const splitPlayerScore = splitPlayerHand.length > 0 ? calculateScore(splitPlayerHand) : null;\r",
																			"\r",
																			"// Выводим результаты в консоль\r",
																			"console.log(\"Dealer's Hand:\", dealerHandText, \"Score:\", dealerScore);\r",
																			"console.log(\"Main Player's Hand:\", mainPlayerHandText, \"Score:\", mainPlayerScore, \"Outcome:\", mainHandOutcome, \"Actions:\", mainPlayerActions);\r",
																			"\r",
																			"if (splitPlayerHand.length > 0) {\r",
																			"    console.log(\"Split Player's Hand:\", splitPlayerHandText, \"Score:\", splitPlayerScore, \"Outcome:\", splitHandOutcome, \"Actions:\", splitPlayerActions);\r",
																			"} else {\r",
																			"    console.log(\"No split hand played.\");\r",
																			"}\r",
																			"\r",
																			"// Проверяем sideBet\r",
																			"console.log(\"Side Bet:\", {\r",
																			"    Amount: sideBet.amount,\r",
																			"    Outcome: sideBet.outcome,\r",
																			"    Multiplier: sideBet.multiplier,\r",
																			"    Payout: sideBet.payout\r",
																			"});\r",
																			"\r",
																			"// Проверяем, что карты валидны\r",
																			"pm.test(\"All cards are valid\", function () {\r",
																			"    dealerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"    mainPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"    splitPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"});\r",
																			"\r",
																			"// Проверяем, что sideBet содержит корректные значения\r",
																			"pm.test(\"Side bet fields are correct\", function () {\r",
																			"    pm.expect(sideBet).to.have.property(\"amount\").that.is.a(\"string\");\r",
																			"    pm.expect(sideBet).to.have.property(\"outcome\").that.is.a(\"string\");\r",
																			"    pm.expect(sideBet).to.have.property(\"multiplier\").that.is.a(\"number\");\r",
																			"    pm.expect(sideBet).to.have.property(\"payout\").that.is.a(\"string\");\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"betAmount\": \"10\",\r\n    \"currencyId\": \"DBC\",\r\n    \"sideBetAmount\": \"100\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{stagingUrl}}casino/games/house/blackjack/init",
																	"host": [
																		"{{stagingUrl}}casino"
																	],
																	"path": [
																		"games",
																		"house",
																		"blackjack",
																		"init"
																	]
																}
															},
															"response": []
														},
														{
															"name": "getActiveState",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"// Проверка статуса ответа\r",
																			"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{stagingUrl}}casino/games/house/blackjack/getActiveState",
																	"host": [
																		"{{stagingUrl}}casino"
																	],
																	"path": [
																		"games",
																		"house",
																		"blackjack",
																		"getActiveState"
																	]
																}
															},
															"response": []
														},
														{
															"name": "handleAction",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json();\r",
																			"\r",
																			"// Маппинг ID карт на текстовые значения и их номиналы\r",
																			"const cardMapping = {\r",
																			"    1: { text: \"♠2\", value: 2 }, 2: { text: \"♠3\", value: 3 }, 3: { text: \"♠4\", value: 4 },\r",
																			"    4: { text: \"♠5\", value: 5 }, 5: { text: \"♠6\", value: 6 }, 6: { text: \"♠7\", value: 7 },\r",
																			"    7: { text: \"♠8\", value: 8 }, 8: { text: \"♠9\", value: 9 }, 9: { text: \"♠10\", value: 10 },\r",
																			"    10: { text: \"♠J\", value: 10 }, 11: { text: \"♠Q\", value: 10 }, 12: { text: \"♠K\", value: 10 },\r",
																			"    13: { text: \"♠A\", value: 11 }, 14: { text: \"♥2\", value: 2 }, 15: { text: \"♥3\", value: 3 },\r",
																			"    16: { text: \"♥4\", value: 4 }, 17: { text: \"♥5\", value: 5 }, 18: { text: \"♥6\", value: 6 },\r",
																			"    19: { text: \"♥7\", value: 7 }, 20: { text: \"♥8\", value: 8 }, 21: { text: \"♥9\", value: 9 },\r",
																			"    22: { text: \"♥10\", value: 10 }, 23: { text: \"♥J\", value: 10 }, 24: { text: \"♥Q\", value: 10 },\r",
																			"    25: { text: \"♥K\", value: 10 }, 26: { text: \"♥A\", value: 11 }, 27: { text: \"♦2\", value: 2 },\r",
																			"    28: { text: \"♦3\", value: 3 }, 29: { text: \"♦4\", value: 4 }, 30: { text: \"♦5\", value: 5 },\r",
																			"    31: { text: \"♦6\", value: 6 }, 32: { text: \"♦7\", value: 7 }, 33: { text: \"♦8\", value: 8 },\r",
																			"    34: { text: \"♦9\", value: 9 }, 35: { text: \"♦10\", value: 10 }, 36: { text: \"♦J\", value: 10 },\r",
																			"    37: { text: \"♦Q\", value: 10 }, 38: { text: \"♦K\", value: 10 }, 39: { text: \"♦A\", value: 11 },\r",
																			"    40: { text: \"♣2\", value: 2 }, 41: { text: \"♣3\", value: 3 }, 42: { text: \"♣4\", value: 4 },\r",
																			"    43: { text: \"♣5\", value: 5 }, 44: { text: \"♣6\", value: 6 }, 45: { text: \"♣7\", value: 7 },\r",
																			"    46: { text: \"♣8\", value: 8 }, 47: { text: \"♣9\", value: 9 }, 48: { text: \"♣10\", value: 10 },\r",
																			"    49: { text: \"♣J\", value: 10 }, 50: { text: \"♣Q\", value: 10 }, 51: { text: \"♣K\", value: 10 },\r",
																			"    52: { text: \"♣A\", value: 11 }\r",
																			"};\r",
																			"\r",
																			"// Функция для преобразования ID карт в текстовые значения\r",
																			"function getCardsText(cards) {\r",
																			"    return cards.map(cardId => cardMapping[cardId]?.text || `Unknown (${cardId})`);\r",
																			"}\r",
																			"\r",
																			"// Функция для подсчёта очков\r",
																			"function calculateScore(cards) {\r",
																			"    let total = 0;\r",
																			"    let aces = 0;\r",
																			"\r",
																			"    cards.forEach(cardId => {\r",
																			"        const card = cardMapping[cardId];\r",
																			"        if (card) {\r",
																			"            total += card.value;\r",
																			"            if (card.text.includes(\"A\")) {\r",
																			"                aces += 1;\r",
																			"            }\r",
																			"        }\r",
																			"    });\r",
																			"\r",
																			"    // Корректируем значение тузов (A), если сумма превышает 21\r",
																			"    while (total > 21 && aces > 0) {\r",
																			"        total -= 10; // Считаем туза как 1 вместо 11\r",
																			"        aces -= 1;\r",
																			"    }\r",
																			"\r",
																			"    return total;\r",
																			"}\r",
																			"\r",
																			"// Извлекаем данные\r",
																			"const dealerHand = jsonData.data.dealerHand;\r",
																			"const mainPlayerHand = jsonData.data.mainPlayerHand;\r",
																			"const splitPlayerHand = jsonData.data.splitPlayerHand || [];\r",
																			"const mainPlayerActions = jsonData.data.mainPlayerActions || [];\r",
																			"const splitPlayerActions = jsonData.data.splitPlayerActions || [];\r",
																			"const mainHandOutcome = jsonData.data.mainHandOutcome;\r",
																			"const splitHandOutcome = jsonData.data.splitHandOutcome;\r",
																			"\r",
																			"// Преобразуем ID карт в текстовые значения\r",
																			"const dealerHandText = getCardsText(dealerHand);\r",
																			"const mainPlayerHandText = getCardsText(mainPlayerHand);\r",
																			"const splitPlayerHandText = getCardsText(splitPlayerHand);\r",
																			"\r",
																			"// Подсчитываем очки для каждой руки\r",
																			"const dealerScore = calculateScore(dealerHand);\r",
																			"const mainPlayerScore = calculateScore(mainPlayerHand);\r",
																			"const splitPlayerScore = splitPlayerHand.length > 0 ? calculateScore(splitPlayerHand) : null;\r",
																			"\r",
																			"// Выводим результаты в консоль\r",
																			"console.log(\"Dealer's Hand:\", dealerHandText, \"Score:\", dealerScore);\r",
																			"console.log(\"Main Player's Hand:\", mainPlayerHandText, \"Score:\", mainPlayerScore, \"Outcome:\", mainHandOutcome, \"Actions:\", mainPlayerActions);\r",
																			"\r",
																			"if (splitPlayerHand.length > 0) {\r",
																			"    console.log(\"Split Player's Hand:\", splitPlayerHandText, \"Score:\", splitPlayerScore, \"Outcome:\", splitHandOutcome, \"Actions:\", splitPlayerActions);\r",
																			"} else {\r",
																			"    console.log(\"No split hand played.\");\r",
																			"}\r",
																			"\r",
																			"// Проверяем, что карты валидны\r",
																			"pm.test(\"All cards are valid\", function () {\r",
																			"    dealerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"    mainPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"    splitPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"action\": \"HIT\"\r\n}\r\n// {\r\n//   \"action\": \"DOUBLE_DOWN\"\r\n// }\r\n// {\r\n//    \"action\": \"STAND\"\r\n// }\r\n// {\r\n//   \"action\": \"SPLIT\"\r\n// }\r\n// {\r\n//   \"action\": \"BUY_INSURANCE\"\r\n// }\r\n// {\r\n//   \"action\": \"REJECT_INSURANCE\"\r\n// }",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{stagingUrl}}casino/games/house/blackjack/handleAction",
																	"host": [
																		"{{stagingUrl}}casino"
																	],
																	"path": [
																		"games",
																		"house",
																		"blackjack",
																		"handleAction"
																	]
																}
															},
															"response": []
														},
														{
															"name": "config",
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessBOToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{stagingUrl}}casino/games/house/blackjack/config",
																	"host": [
																		"{{stagingUrl}}casino"
																	],
																	"path": [
																		"games",
																		"house",
																		"blackjack",
																		"config"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Plinko",
											"item": [
												{
													"name": "plinko bet",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Извлечение JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Проверка, что ответ содержит все необходимые поля с непустыми значениями\r",
																	"pm.test(\"Response contains required fields with values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"multiplier\").that.is.a(\"number\").and.is.not.null;\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"currencyId\": \"DBC\",\r\n  \"betAmount\": \"1\",\r\n  \"rowsCount\": 16,\r\n  \"risk\": \"LOW\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/plinko/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"plinko",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "plinko config",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/plinko/config",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"plinko",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Limbo",
											"item": [
												{
													"name": "limbo bet",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"DBC\",\n  \"betAmount\": \"11\",\n  \"multiplier\": 2\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/limbo/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"limbo",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "limbo config",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/limbo/config",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"limbo",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "roulette  speed",
											"item": [
												{
													"name": "speed-roulette/config",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/speed-roulette/config",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"speed-roulette",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "speed-roulette/info",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/speed-roulette/info",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"speed-roulette",
																"info"
															]
														}
													},
													"response": []
												},
												{
													"name": "speed-roulette/bet",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// ✅ Проверяем статус ответа (201 Created)\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// ✅ Парсим JSON-ответ\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// ✅ Проверяем, что ответ содержит все ожидаемые поля\r",
																	"pm.test(\"Response contains required fields\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"string\");\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
																	"    pm.expect(responseJson).to.have.property(\"gameId\").that.is.a(\"string\");\r",
																	"    pm.expect(responseJson).to.have.property(\"userId\").that.is.a(\"string\");\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\");\r",
																	"    pm.expect(responseJson).to.have.property(\"amount\").that.is.a(\"string\");\r",
																	"    pm.expect(responseJson).to.have.property(\"color\").that.is.a(\"string\");\r",
																	"    \r",
																	"});\r",
																	"\r",
																	"// ✅ Проверяем, что currencyId соответствует отправленному значению\r",
																	"pm.test(\"currencyId matches request\", function () {\r",
																	"    pm.expect(responseJson.currencyId).to.eql(\"EVO\");\r",
																	"});\r",
																	"\r",
																	"// ✅ Проверяем, что color соответствует отправленному значению\r",
																	"pm.test(\"color matches request\", function () {\r",
																	"    pm.expect(responseJson.color).to.eql(\"RED\");\r",
																	"});\r",
																	"\r",
																	"// ✅ Проверяем, что isSettled по умолчанию false\r",
																	"pm.test(\"isSettled is false\", function () {\r",
																	"    pm.expect(responseJson.isSettled).to.eql(false);\r",
																	"});\r",
																	"\r",
																	"// ✅ Проверяем, что createdAt имеет формат ISO 8601\r",
																	"pm.test(\"createdAt is a valid ISO 8601 timestamp\", function () {\r",
																	"    pm.expect(responseJson.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"betAmount\": \"10\",\r\n  \"color\": \"RED\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/speed-roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"speed-roulette",
																"bet"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "dice",
											"item": [
												{
													"name": "dice test",
													"item": [
														{
															"name": "dice play",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"// TEST SCRIPT (Post-response)\r",
																			"\r",
																			"// 1) Parse the response JSON\r",
																			"let responseJson = {};\r",
																			"try {\r",
																			"    responseJson = pm.response.json();\r",
																			"} catch (e) {\r",
																			"    console.log(\"Error parsing response JSON:\", e);\r",
																			"}\r",
																			"\r",
																			"\r",
																			"// 2) Retrieve global iteration and maximum bets per threshold\r",
																			"const globalIteration = pm.info.iteration; // zero-indexed\r",
																			"const maxBetsPerThreshold = parseInt(pm.environment.get(\"maxBetsPerThreshold\") || \"1000\", 10);\r",
																			"\r",
																			"// 3) Calculate iteration within the current threshold block (1-indexed)\r",
																			"const iterationInThreshold = (globalIteration % maxBetsPerThreshold) + 1;\r",
																			"\r",
																			"// 4) Get the thresholds array and current threshold index/value\r",
																			"let thresholds = pm.environment.get(\"thresholds\");\r",
																			"if (typeof thresholds === \"string\") {\r",
																			"    thresholds = JSON.parse(thresholds);\r",
																			"}\r",
																			"const currentThresholdIndex = Math.floor(globalIteration / maxBetsPerThreshold);\r",
																			"pm.environment.set(\"currentThresholdIndex\", currentThresholdIndex.toString());\r",
																			"\r",
																			"const thresholdValue = (currentThresholdIndex < thresholds.length)\r",
																			"    ? thresholds[currentThresholdIndex]\r",
																			"    : thresholds[thresholds.length - 1];\r",
																			"\r",
																			"// 5) Compute profit/loss for this bet: (payout - betAmount)\r",
																			"let lastProfit = 0;\r",
																			"if (responseJson && responseJson.betAmount && responseJson.payout) {\r",
																			"    const betAmount = parseFloat(responseJson.betAmount);\r",
																			"    const payout = parseFloat(responseJson.payout);\r",
																			"    lastProfit = payout - betAmount;\r",
																			"} else {\r",
																			"    lastProfit = 0;\r",
																			"}\r",
																			"\r",
																			"// 6) Update cumulative counters for the current threshold\r",
																			"let lossesForThreshold = parseInt(pm.environment.get(\"lossesForThreshold\") || \"0\", 10);\r",
																			"let profitLossForThreshold = parseFloat(pm.environment.get(\"profitLossForThreshold\") || \"0\");\r",
																			"\r",
																			"// Increment loss count if the bet was lost\r",
																			"if (responseJson.didWin === false) {\r",
																			"    lossesForThreshold += 1;\r",
																			"}\r",
																			"profitLossForThreshold += lastProfit;\r",
																			"\r",
																			"// Save updated counters back to environment variables\r",
																			"pm.environment.set(\"lossesForThreshold\", lossesForThreshold.toString());\r",
																			"pm.environment.set(\"profitLossForThreshold\", profitLossForThreshold.toString());\r",
																			"\r",
																			"// 7) Log current iteration details for debugging\r",
																			"console.log(`Iteration ${iterationInThreshold} for threshold index ${currentThresholdIndex} (Threshold: ${thresholdValue}): Profit/Loss this bet = ${lastProfit}`);\r",
																			"\r",
																			"// 8) When the current threshold block is complete, record final stats for that threshold\r",
																			"if (iterationInThreshold === maxBetsPerThreshold) {\r",
																			"    let resultsLog = pm.environment.get(\"resultsLog\");\r",
																			"    if (!resultsLog) {\r",
																			"        resultsLog = {};\r",
																			"    } else if (typeof resultsLog === \"string\") {\r",
																			"        resultsLog = JSON.parse(resultsLog);\r",
																			"    }\r",
																			"    resultsLog[`Threshold_${thresholdValue}`] = {\r",
																			"        totalBets: maxBetsPerThreshold,\r",
																			"        losses: lossesForThreshold,\r",
																			"        profitLoss: profitLossForThreshold\r",
																			"    };\r",
																			"    pm.environment.set(\"resultsLog\", JSON.stringify(resultsLog));\r",
																			"    console.log(`Final results for threshold ${thresholdValue}:`, resultsLog[`Threshold_${thresholdValue}`]);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"// PRE-REQUEST SCRIPT\r",
																			"\r",
																			"// Retrieve thresholds from environment and parse them\r",
																			"let thresholds = pm.environment.get(\"thresholds\");\r",
																			"if (!thresholds) {\r",
																			"  thresholds = [5,10,20,30,40,50,60,70,80,90,100];\r",
																			"  pm.environment.set(\"thresholds\", JSON.stringify(thresholds));\r",
																			"} else if (typeof thresholds === \"string\") {\r",
																			"  thresholds = JSON.parse(thresholds);\r",
																			"}\r",
																			"\r",
																			"// Read the current threshold index from the environment (defaults to 0)\r",
																			"let currentThresholdIndex = parseInt(pm.environment.get(\"currentThresholdIndex\") || \"0\", 10);\r",
																			"\r",
																			"// Determine the current threshold value using the current index\r",
																			"const currentThreshold = (currentThresholdIndex < thresholds.length)\r",
																			"    ? thresholds[currentThresholdIndex]\r",
																			"    : thresholds[thresholds.length - 1];\r",
																			"\r",
																			"// Generate a random boolean for 'above'\r",
																			"const above = Math.random() < 0.5; // 50% chance true, 50% false\r",
																			"\r",
																			"// Build the request body for this iteration with a fixed betAmount and current threshold\r",
																			"const diceRequest = {\r",
																			"  betAmount: \"10.00\",   // Fixed bet amount (as a string with two decimals)\r",
																			"  threshold: currentThreshold,\r",
																			"  currencyId: \"DBC\",\r",
																			"  above: above\r",
																			"};\r",
																			"\r",
																			"// Set the request body variable (make sure your raw JSON body is: {{diceRequestBody}})\r",
																			"pm.environment.set(\"diceRequestBody\", JSON.stringify(diceRequest));\r",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{accessToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{{diceRequestBody}}\r\n",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{stagingUrl}}casino/games/house/dice/bet",
																	"host": [
																		"{{stagingUrl}}casino"
																	],
																	"path": [
																		"games",
																		"house",
																		"dice",
																		"bet"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "dice/config",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}/casino/games/house/dice/config",
															"host": [
																"{{stagingUrl}}"
															],
															"path": [
																"casino",
																"games",
																"house",
																"dice",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "dice",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"currencyId\": \"DBC\",\r\n  \"betAmount\": \"10\",\r\n  \"threshold\": 80,\r\n  \"above\": true,\r\n  \"windowId\": \"stringstri\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}/casino/games/house/dice/bet",
															"host": [
																"{{stagingUrl}}"
															],
															"path": [
																"casino",
																"games",
																"house",
																"dice",
																"bet"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "roulette base",
											"item": [
												{
													"name": "roulette bet",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"EVO\",\n  \"betAmount\": \"10\",\n  \"params\": {\n    \"halfValues\": [\n      {\n        \"amount\": \"0.01\",\n        \"half\": \"HIGH\"\n      },\n      {\n        \"amount\": \"0.01\",\n        \"half\": \"LOW\"\n      }\n    ],\n    \"parityValues\": [\n      {\n        \"amount\": \"0.01\",\n        \"parity\": \"ODD\"\n      },\n      {\n        \"amount\": \"0.02\",\n        \"parity\": \"EVEN\"\n      }\n    ],\n    \"colorValues\": [\n      {\n        \"amount\": \"0.02\",\n        \"color\": \"BLACK\"\n      }\n    ],\n    \"columnValues\": [\n      {\n        \"amount\": \"0.01\",\n        \"column\": \"BOTTOM\"\n      },\n      {\n        \"amount\": \"0.01\",\n        \"column\": \"MIDDLE\"\n      },\n      {\n        \"amount\": \"0.01\",\n        \"column\": \"TOP\"\n      }\n    ],\n    \"dozenValues\": [\n      {\n        \"amount\": \"0.01\",\n        \"dozen\": \"FIRST\"\n      }\n    ],\n    \"straightValues\": [\n      {\n        \"straightNumber\": 3,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 0,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 20,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 33,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 6,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 9,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 12,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 15,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"splitValues\": [\n      {\n        \"firstNumber\": 2,\n        \"secondNumber\": 3,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 1,\n        \"secondNumber\": 2,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"cornerValues\": [\n      {\n        \"firstNumber\": 2,\n        \"secondNumber\": 3,\n        \"thirdNumber\": 5,\n        \"fourthNumber\": 6,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 1,\n        \"secondNumber\": 2,\n        \"thirdNumber\": 4,\n        \"fourthNumber\": 5,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 31,\n        \"secondNumber\": 32,\n        \"thirdNumber\": 34,\n        \"fourthNumber\": 35,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 17,\n        \"secondNumber\": 18,\n        \"thirdNumber\": 20,\n        \"fourthNumber\": 21,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 11,\n        \"secondNumber\": 12,\n        \"thirdNumber\": 14,\n        \"fourthNumber\": 15,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 8,\n        \"secondNumber\": 9,\n        \"thirdNumber\": 11,\n        \"fourthNumber\": 12,\n        \"amount\": \"0.02\"\n      },\n      {\n        \"firstNumber\": 7,\n        \"secondNumber\": 8,\n        \"thirdNumber\": 10,\n        \"fourthNumber\": 11,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 22,\n        \"secondNumber\": 23,\n        \"thirdNumber\": 25,\n        \"fourthNumber\": 26,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"streetValues\": [\n      {\n        \"street\": [\n          28,\n          29,\n          30\n        ],\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"doubleStreetValues\": [\n      {\n        \"firstStreet\": [\n          25,\n          26,\n          27\n        ],\n        \"secondStreet\": [\n          28,\n          29,\n          30\n        ],\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstStreet\": [\n          22,\n          23,\n          24\n        ],\n        \"secondStreet\": [\n          25,\n          26,\n          27\n        ],\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstStreet\": [\n          16,\n          17,\n          18\n        ],\n        \"secondStreet\": [\n          19,\n          20,\n          21\n        ],\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstStreet\": [\n          10,\n          11,\n          12\n        ],\n        \"secondStreet\": [\n          13,\n          14,\n          15\n        ],\n        \"amount\": \"0.01\"\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet  - straightValues",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"EVO\",\n  \"betAmount\": \"10\",\n  \"params\": {\n    \"straightValues\": [\n      {\n        \"straightNumber\": 3,\n        \"amount\": \"10\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet parityValues",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.02\",\n  \"params\": {\n    \"parityValues\": [\n      {\n        \"amount\": \"0.01\",\n        \"parity\": \"ODD\"\n      },\n      {\n        \"amount\": \"0.01\",\n        \"parity\": \"EVEN\"\n      }\n    ],\n    \"halfValues\": [],\n    \"straightValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet colorValues",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.02\",\n  \"params\": {\n    \"colorValues\": [\n      {\n        \"amount\": \"0.01\",\n        \"color\": \"RED\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"straightValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet halfValues",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.02\",\n  \"params\": {\n    \"halfValues\": [\n      {\n        \"amount\": \"0.01\",\n        \"half\": \"HIGH\"\n      },\n      {\n        \"amount\": \"0.01\",\n        \"half\": \"LOW\"\n      }\n    ],\n    \"parityValues\": [],\n    \"straightValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet columnValues",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"DBC\",\n  \"betAmount\": \"30\",\n  \"params\": {\n    \"columnValues\": [\n      {\n        \"amount\": \"10\",\n        \"column\": \"BOTTOM\"\n      },\n      {\n        \"amount\": \"10\",\n        \"column\": \"MIDDLE\"\n      },\n      {\n        \"amount\": \"10\",\n        \"column\": \"TOP\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"straightValues\": [],\n    \"colorValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet dozenValues",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.01\",\n  \"params\": {\n    \"dozenValues\": [\n      {\n        \"amount\": \"0.01\",\n        \"dozen\": \"SECOND\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"straightValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet straightValues - few numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.08\",\n  \"params\": {\n    \"straightValues\": [\n      {\n        \"straightNumber\": 3,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 12,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 20,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 33,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 6,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 9,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 0,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 15,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet splitValues",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.02\",\n  \"params\": {\n    \"splitValues\": [\n      {\n        \"firstNumber\": 1,\n        \"secondNumber\": 2,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 2,\n        \"secondNumber\": 3,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"straightValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette bet cornerValues",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.04\",\n  \"params\": {\n    \"cornerValues\": [\n      {\n        \"firstNumber\": 1,\n        \"secondNumber\": 2,\n        \"thirdNumber\": 4,\n        \"fourthNumber\": 5,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 2,\n        \"secondNumber\": 3,\n        \"thirdNumber\": 5,\n        \"fourthNumber\": 6,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 8,\n        \"secondNumber\": 9,\n        \"thirdNumber\": 11,\n        \"fourthNumber\": 12,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"firstNumber\": 31,\n        \"secondNumber\": 32,\n        \"thirdNumber\": 34,\n        \"fourthNumber\": 35,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"straightValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette neighboursBet",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"EVO\",\n  \"betAmount\": \"0.05\",\n  \"params\": {\n    \"straightValues\": [\n      {\n        \"straightNumber\": 20,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 1,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 14,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 31,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 9,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette Final Bet",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.04\",\n  \"params\": {\n    \"straightValues\": [\n      {\n        \"straightNumber\": 3,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 13,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 23,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 33,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette Orphans",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.08\",\n  \"params\": {\n    \"straightValues\": [\n      {\n        \"straightNumber\": 1,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 6,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 9,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 14,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 17,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 20,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 31,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 34,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette Voisins du Zero",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"BTC\",\n  \"betAmount\": \"0.16\",\n  \"params\": {\n    \"straightValues\": [\n      {\n        \"straightNumber\": 0,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 2,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 3,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 4,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 7,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 12,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 15,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 18,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 19,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 22,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 25,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 26,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 28,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 29,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 32,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 35,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette Tiers du Cylindre",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Извлекаем JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Тест: Проверяем, что статус ответа 201\r",
																	"pm.test(\"Response status is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
																	"pm.test(\"Response contains all required fields with valid values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
																	"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
																	"    pm.expect(responseJson).to.have.property(\"winMultiplier\").that.is.a(\"number\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"DBC\",\n  \"betAmount\": \"0.12\",\n  \"params\": {\n    \"straightValues\": [\n      {\n        \"straightNumber\": 5,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 8,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 10,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 11,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 13,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 16,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 23,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 24,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 27,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 30,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 33,\n        \"amount\": \"0.01\"\n      },\n      {\n        \"straightNumber\": 36,\n        \"amount\": \"0.01\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"colorValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "roulette config",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/roulette/config",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"roulette",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "keno",
											"item": [
												{
													"name": "keno/bet",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Извлечение JSON из ответа\r",
																	"const responseJson = pm.response.json();\r",
																	"\r",
																	"// Проверка, что ответ содержит все необходимые поля с непустыми значениями\r",
																	"pm.test(\"Response contains required fields with values\", function () {\r",
																	"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.empty;\r",
																	"    pm.expect(responseJson).to.have.property(\"multiplier\").that.is.a(\"number\").and.is.not.null;\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"currencyId\": \"DBC\",\r\n  \"betAmount\": \"10\",\r\n  \"risk\": \"LOW\",\r\n  \"selected\": [\r\n       1,\r\n       6,\r\n       8,\r\n       11,\r\n       14,\r\n       22,\r\n       25,\r\n       26,\r\n       27,\r\n       30\r\n  ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/keno/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"keno",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "keno/config",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/keno/config",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"keno",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Mines",
											"item": [
												{
													"name": "mines play",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"EVO\",\n  \"betAmount\": \"30\",\n  \"gridCellsCount\": 25,\n  \"bombsCount\": 5\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/mines/play",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"mines",
																"play"
															]
														}
													},
													"response": []
												},
												{
													"name": "mines board",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/mines/board",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"mines",
																"board"
															]
														}
													},
													"response": []
												},
												{
													"name": "mines auto",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currencyId\": \"EVO\",\n  \"betAmount\": \"100\",\n  \"gridCellsCount\": 25,\n  \"bombsCount\": 1,\n  \"cellIndices\": [\n    \"1\",\"2\",\"10\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/mines/auto-spin",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"mines",
																"auto-spin"
															]
														}
													},
													"response": []
												},
												{
													"name": "mines open",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"cellIndex\": \"20\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/mines/open",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"mines",
																"open"
															]
														}
													},
													"response": []
												},
												{
													"name": "cash-out",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/mines/cash-out",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"mines",
																"cash-out"
															]
														}
													},
													"response": []
												},
												{
													"name": "config",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/mines/config",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"mines",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "MonkeyRun",
											"item": [
												{
													"name": "bet MonkeyRun",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"betAmount\": \"4\",  \r\n    \"currencyId\": \"DBC\",\r\n    \"difficulty\": \"EASY\"\r\n}\r\n//difficulty must be one of the following values: EASY, MEDIUM, HARD, EXTREME\"",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/monkey-run/bet",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"monkey-run",
																"bet"
															]
														}
													},
													"response": []
												},
												{
													"name": "play MonkeyRun",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"makeStep\": 1\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/monkey-run/play",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"monkey-run",
																"play"
															]
														}
													},
													"response": []
												},
												{
													"name": "cachOut MonkeyRun",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/monkey-run/cash-out",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"monkey-run",
																"cash-out"
															]
														}
													},
													"response": []
												},
												{
													"name": "get current MonkeyRun",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/monkey-run/game",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"monkey-run",
																"game"
															]
														}
													},
													"response": []
												},
												{
													"name": "get config MonkeyRun",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}casino/games/house/monkey-run/config",
															"host": [
																"{{stagingUrl}}casino"
															],
															"path": [
																"games",
																"house",
																"monkey-run",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "balances - difference = currentAmount - previousAmoun",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Проверяем статус ответа\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Проверяем, что ответ содержит массив\r",
															"pm.test(\"Response is an array\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"array\");\r",
															"});\r",
															"\r",
															"// Проверяем, что каждый элемент имеет currencyId и amount\r",
															"pm.test(\"Each element has currencyId and amount\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    jsonData.forEach(item => {\r",
															"        pm.expect(item).to.have.property(\"currencyId\");\r",
															"        pm.expect(item).to.have.property(\"amount\");\r",
															"    });\r",
															"});\r",
															"\r",
															"// Отслеживаем изменения для конкретной валюты с выводом Multiplier\r",
															"pm.test(\"Track changes for BTC with Multiplier\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    const targetCurrency = \"DBC\";\r",
															"\r",
															"    // Найти объект с currencyId = DBC\r",
															"    const usdtData = jsonData.find(item => item.currencyId === targetCurrency);\r",
															"    if (usdtData) {\r",
															"        const currentAmount = parseFloat(usdtData.amount);\r",
															"\r",
															"        // Получить сохранённое значение предыдущей суммы\r",
															"        const previousAmount = parseFloat(pm.collectionVariables.get(\"USDT_PreviousAmount\")) || 0;\r",
															"\r",
															"        // Вычислить разницу\r",
															"        const difference = currentAmount - previousAmount;\r",
															"\r",
															"        // Вычислить Multiplier\r",
															"        const multiplier = previousAmount > 0 ? (currentAmount / previousAmount).toFixed(2) + \"x\" : \"N/A\";\r",
															"\r",
															"        // Выводим информацию в консоль\r",
															"        console.log(`Currency: ${targetCurrency}`);\r",
															"        console.log(`Previous Amount: ${previousAmount}`);\r",
															"        console.log(`Current Amount: ${currentAmount}`);\r",
															"        console.log(`Difference: ${difference}`);\r",
															"        console.log(`Multiplier: ${multiplier}`);\r",
															"\r",
															"        // Сохраняем текущее значение как новое предыдущее\r",
															"        pm.collectionVariables.set(\"USDT_PreviousAmount\", currentAmount.toString());\r",
															"    } else {\r",
															"        console.log(`Currency ${targetCurrency} not found in the response.`);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}accounting/balances",
													"host": [
														"{{stagingUrl}}accounting"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "casino/games",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверяем статус ответа\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Проверяем, что ответ содержит массив объектов игр\r",
													"pm.test(\"Response contains an array of games\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"object\"); // Обновлено: Проверяем, что ответ является объектом\r",
													"    pm.expect(jsonData.data).to.be.an(\"array\"); // Обновлено: Проверяем, что массив игр находится в свойстве \"data\"\r",
													"    if (Array.isArray(jsonData.data) && jsonData.data.length > 0) { // Обновлено: Проверяем, что jsonData.data является массивом и не пустым\r",
													"        jsonData.data.forEach(game => {\r",
													"            pm.expect(game).to.be.an(\"object\"); // Проверяем, что каждая игра является объектом\r",
													"        });\r",
													"    } else {\r",
													"        pm.expect(jsonData.data).to.eql([]); // Обновлено: Проверяем, что jsonData.data пустой массив\r",
													"    }\r",
													"});\r",
													"\r",
													"// Проверяем обязательные поля в каждом объекте\r",
													"pm.test(\"Each game object contains required fields\", function () {\r",
													"    const jsonData = pm.response.json().data; // Обновлено: Получаем массив игр из свойства \"data\"\r",
													"    if (Array.isArray(jsonData) && jsonData.length > 0) { // Обновлено: Проверяем, что jsonData является массивом и не пустым\r",
													"        jsonData.forEach(game => {\r",
													"            pm.expect(game).to.be.an(\"object\"); // Проверяем, что каждая игра является объектом\r",
													"            pm.expect(game).to.have.property(\"id\");\r",
													"            pm.expect(game).to.have.property(\"addedAt\");\r",
													"            pm.expect(game).to.have.property(\"lastPlayedAt\");\r",
													"            pm.expect(game).to.have.property(\"type\");\r",
													"            pm.expect(game).to.have.property(\"categories\");\r",
													"            pm.expect(game).to.have.property(\"slug\");\r",
													"            pm.expect(game).to.have.property(\"name\");\r",
													"            pm.expect(game).to.have.property(\"images\");\r",
													"            pm.expect(game).to.have.property(\"provider\");\r",
													"        });\r",
													"    }\r",
													"});\r",
													"\r",
													"// Проверяем значения некоторых ключей\r",
													"pm.test(\"Check specific game fields\", function () {\r",
													"    const jsonData = pm.response.json().data; // Обновлено: Получаем массив игр из свойства \"data\"\r",
													"    if (Array.isArray(jsonData) && jsonData.length > 0) { // Обновлено: Проверяем, что jsonData является массивом и не пустым\r",
													"        const game = jsonData[0]; // Проверяем первую игру в списке\r",
													"\r",
													"        pm.expect(game.id).to.be.a(\"number\");\r",
													"        pm.expect(new Date(game.addedAt)).to.not.be.NaN; // Проверяем корректность даты\r",
													"        pm.expect(new Date(game.lastPlayedAt)).to.not.be.NaN; // Проверяем корректность даты\r",
													"        pm.expect(game.type).to.be.oneOf([\"SLOTS\", \"TABLE\", \"LIVE\", \"OTHER\"]); // Проверяем допустимые типы\r",
													"        pm.expect(game.categories).to.be.an(\"array\");\r",
													"        pm.expect(game.slug).to.be.a(\"string\");\r",
													"        pm.expect(game.name).to.be.a(\"string\");\r",
													"        pm.expect(game.images).to.have.property(\"imageUrl\");\r",
													"        pm.expect(game.images.imageUrl).to.be.a(\"string\").and.include(\"https://\"); // Проверяем, что это URL\r",
													"    }\r",
													"});\r",
													"\r",
													"// Проверяем структуру объекта \"provider\"\r",
													"pm.test(\"Provider object structure is valid\", function () {\r",
													"    const jsonData = pm.response.json().data; // Обновлено: Получаем массив игр из свойства \"data\"\r",
													"    if (Array.isArray(jsonData) && jsonData.length > 0) { // Обновлено: Проверяем, что jsonData является массивом и не пустым\r",
													"        const provider = jsonData[0].provider; // Проверяем первый объект провайдера\r",
													"\r",
													"        pm.expect(provider).to.have.property(\"id\");\r",
													"        pm.expect(provider).to.have.property(\"name\");\r",
													"        pm.expect(provider).to.have.property(\"prefix\");\r",
													"        pm.expect(provider).to.have.property(\"slug\");\r",
													"        pm.expect(provider).to.have.property(\"images\");\r",
													"        pm.expect(provider.images).to.have.property(\"imageUrl\");\r",
													"\r",
													"        pm.expect(provider.id).to.be.a(\"number\");\r",
													"        pm.expect(provider.name).to.be.a(\"string\");\r",
													"        pm.expect(provider.prefix).to.be.a(\"string\");\r",
													"        pm.expect(provider.slug).to.be.a(\"string\");\r",
													"        pm.expect(provider.images.imageUrl).to.be.a(\"string\").and.include(\"https://\"); // Проверяем, что это URL\r",
													"    }\r",
													"});\r",
													"\r",
													"// Проверяем типы данных в массиве категорий\r",
													"pm.test(\"Categories array contains strings\", function () {\r",
													"    const jsonData = pm.response.json().data; // Обновлено: Получаем массив игр из свойства \"data\"\r",
													"    if (Array.isArray(jsonData) && jsonData.length > 0) { // Обновлено: Проверяем, что jsonData является массивом и не пустым\r",
													"        jsonData.forEach(game => {\r",
													"            game.categories.forEach(category => {\r",
													"                pm.expect(category).to.be.a(\"string\");\r",
													"            });\r",
													"        });\r",
													"    }\r",
													"});\r",
													"\r",
													"// Найти и сохранить slug с нужным значением\r",
													"pm.test(\"Save specific slug to variable\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    let targetSlug = null;\r",
													"\r",
													"    if (Array.isArray(jsonData.data) && jsonData.data.length > 0) { // Обновлено: Проверяем, что jsonData.data является массивом и не пустым\r",
													"        jsonData.data.forEach(game => {\r",
													"            if (game.provider && game.provider.slug === \"100hp\") { // Ищем нужный slug\r",
													"                targetSlug = game.provider.slug;\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"\r",
													"    pm.expect(targetSlug).to.not.be.null; // Проверяем, что slug найден\r",
													"    pm.collectionVariables.set(\"targetSlug\", targetSlug); // Сохраняем в коллекционную переменную\r",
													"    console.log(\"Saved slug:\", targetSlug); // Вывод в консоль для проверки\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}casino/games?category=SLOTS&type=SLOTS&sortBy=default&page=1&take=20",
											"host": [
												"{{stagingUrl}}casino"
											],
											"path": [
												"games"
											],
											"query": [
												{
													"key": "category",
													"value": "HOUSE_GAME",
													"disabled": true
												},
												{
													"key": "category",
													"value": "SLOTS"
												},
												{
													"key": "category",
													"value": "LIVE_CASINO",
													"disabled": true
												},
												{
													"key": "category",
													"value": "BLACKJACK",
													"disabled": true
												},
												{
													"key": "category",
													"value": "ROULETTE",
													"disabled": true
												},
												{
													"key": "category",
													"value": "GAME_SHOWS",
													"disabled": true
												},
												{
													"key": "category",
													"value": "BACCARAT",
													"disabled": true
												},
												{
													"key": "category",
													"value": "VIDEO_POKER",
													"disabled": true
												},
												{
													"key": "category",
													"value": "CARD",
													"disabled": true
												},
												{
													"key": "category",
													"value": "CASUAL",
													"disabled": true
												},
												{
													"key": "category",
													"value": "LOTTERY",
													"disabled": true
												},
												{
													"key": "category",
													"value": "LIVE",
													"disabled": true
												},
												{
													"key": "category",
													"value": "POKER",
													"disabled": true
												},
												{
													"key": "category",
													"value": "CRAPS",
													"disabled": true
												},
												{
													"key": "category",
													"value": "FISHING",
													"disabled": true
												},
												{
													"key": "category",
													"value": "CRASH",
													"disabled": true
												},
												{
													"key": "category",
													"value": "VIRTUAL_SPORTS",
													"disabled": true
												},
												{
													"key": "category",
													"value": "SCRATCH",
													"disabled": true
												},
												{
													"key": "type",
													"value": "SLOTS"
												},
												{
													"key": "type",
													"value": "HOUSE_GAME",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "name",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "addedAt",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "default"
												},
												{
													"key": "sortBy",
													"value": "popular",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "lastPlayed",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Roulette",
													"disabled": true
												},
												{
													"key": "providerId",
													"value": "1",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "casino/providers",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.dropbet.com/casino/games?sortOrder=asc&sortBy=name&page=2&take=30&providerId=18512",
											"protocol": "https",
											"host": [
												"api",
												"dropbet",
												"com"
											],
											"path": [
												"casino",
												"games"
											],
											"query": [
												{
													"key": "sortOrder",
													"value": "asc"
												},
												{
													"key": "sortBy",
													"value": "name"
												},
												{
													"key": "name",
													"value": "100HP Gaming",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "take",
													"value": "30"
												},
												{
													"key": "providerId",
													"value": "18512"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "casino/main",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}casino/games/main",
											"host": [
												"{{stagingUrl}}casino"
											],
											"path": [
												"games",
												"main"
											]
										}
									},
									"response": []
								},
								{
									"name": "casino/games/slug",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}casino/games/?slug=limbo",
											"host": [
												"{{stagingUrl}}casino"
											],
											"path": [
												"games",
												""
											],
											"query": [
												{
													"key": "slug",
													"value": "limbo"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "acceptance-test",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"url\": \"bgaming-alien-fruits-2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}casino/launch/acceptance-test",
											"host": [
												"{{stagingUrl}}casino"
											],
											"path": [
												"launch",
												"acceptance-test"
											]
										}
									},
									"response": []
								},
								{
									"name": "launch {slug}",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"url\": \"100hp-gaming-air-jet\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}casino/launch/100hp-gaming-air-jet?demo=true&currency=USDT",
											"host": [
												"{{stagingUrl}}casino"
											],
											"path": [
												"launch",
												"100hp-gaming-air-jet"
											],
											"query": [
												{
													"key": "demo",
													"value": "true"
												},
												{
													"key": "currency",
													"value": "USDT"
												},
												{
													"key": "demo",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "favorite",
							"item": [
								{
									"name": "favorite",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}casino/games/favorite/100hp-gaming-meta-crash-slotozen",
											"host": [
												"{{stagingUrl}}casino"
											],
											"path": [
												"games",
												"favorite",
												"100hp-gaming-meta-crash-slotozen"
											]
										}
									},
									"response": []
								},
								{
									"name": "favorite",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}casino/games/favorite?sortOrder=desc&sortBy=NAME&page=1&take=20",
											"host": [
												"{{stagingUrl}}casino"
											],
											"path": [
												"games",
												"favorite"
											],
											"query": [
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc"
												},
												{
													"key": "sortBy",
													"value": "CREATED_AT",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "NAME"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "favorite/slug",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}casino/games/favorite/100hp-gaming-meta-crash-slotozen",
											"host": [
												"{{stagingUrl}}casino"
											],
											"path": [
												"games",
												"favorite",
												"100hp-gaming-meta-crash-slotozen"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "geo restriction",
							"item": [
								{
									"name": "geo",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}geo",
											"host": [
												"{{stagingUrl}}geo"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bets API",
							"item": [
								{
									"name": "bets",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}bets?sortBy=CREATED_AT&sortOrder=desc&page=1&take=20&status=SETTLED",
											"host": [
												"{{stagingUrl}}bets"
											],
											"query": [
												{
													"key": "sortBy",
													"value": "CREATED_AT"
												},
												{
													"key": "sortBy",
													"value": "USD_AMOUNT",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												},
												{
													"key": "status",
													"value": "CREATED",
													"disabled": true
												},
												{
													"key": "status",
													"value": "SETTLED"
												},
												{
													"key": "status",
													"value": "ERROR",
													"disabled": true
												},
												{
													"key": "status",
													"value": "ROLLBACK",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bets info",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}bets/house-games/info/bet-938b68cd-e78a-50fc-9bda-27fb06e05806",
											"host": [
												"{{stagingUrl}}bets"
											],
											"path": [
												"house-games",
												"info",
												"bet-938b68cd-e78a-50fc-9bda-27fb06e05806"
											]
										}
									},
									"response": []
								},
								{
									"name": "live-bets",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}live-bets?type=LatestBets&count=100",
											"host": [
												"{{stagingUrl}}live-bets"
											],
											"query": [
												{
													"key": "type",
													"value": "LatestBets"
												},
												{
													"key": "type",
													"value": "HighRollers",
													"disabled": true
												},
												{
													"key": "type",
													"value": "LuckyWins",
													"disabled": true
												},
												{
													"key": "type",
													"value": "BigWins",
													"disabled": true
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "live-bets -bets my",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}bets/info?betId=bet-436a3a2d-fa9f-52bd-ab05-c6067a991f99",
											"host": [
												"{{stagingUrl}}bets"
											],
											"path": [
												"info"
											],
											"query": [
												{
													"key": "betId",
													"value": "bet-436a3a2d-fa9f-52bd-ab05-c6067a991f99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "admin/bets",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}admin/bets?sortBy=CREATED_AT&sortOrder=desc&page=1&take=20&status=CREATED",
											"host": [
												"{{stagingUrl}}admin"
											],
											"path": [
												"bets"
											],
											"query": [
												{
													"key": "sortBy",
													"value": "CREATED_AT"
												},
												{
													"key": "sortBy",
													"value": "USD_AMOUNT",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc"
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												},
												{
													"key": "userId",
													"value": "41",
													"disabled": true
												},
												{
													"key": "withUser",
													"value": "true",
													"disabled": true
												},
												{
													"key": "withUser",
													"value": "faule",
													"disabled": true
												},
												{
													"key": "status",
													"value": "CREATED"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bet slot inf  id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}/bets/slots/info/bet-5000015587702-3717540c-7ddd-5b20-a92b-7eee0813c12d",
											"host": [
												"{{stagingUrl}}"
											],
											"path": [
												"bets",
												"slots",
												"info",
												"bet-5000015587702-3717540c-7ddd-5b20-a92b-7eee0813c12d"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Network",
							"item": [
								{
									"name": "network",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}payment/network",
											"host": [
												"{{stagingUrl}}payment"
											],
											"path": [
												"network"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Webhooks",
							"item": [
								{
									"name": "webhook",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}ccpayment/webhook",
											"host": [
												"{{stagingUrl}}ccpayment"
											],
											"path": [
												"webhook"
											]
										}
									},
									"response": []
								},
								{
									"name": "callback play",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}api/v1/games/provider-requests/softswiss/callback/play",
											"host": [
												"{{stagingUrl}}api"
											],
											"path": [
												"v1",
												"games",
												"provider-requests",
												"softswiss",
												"callback",
												"play"
											]
										}
									},
									"response": []
								},
								{
									"name": "callback rollback",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}api/v1/games/provider-requests/softswiss/callback/rollback",
											"host": [
												"{{stagingUrl}}api"
											],
											"path": [
												"v1",
												"games",
												"provider-requests",
												"softswiss",
												"callback",
												"rollback"
											]
										}
									},
									"response": []
								},
								{
									"name": "callback freespins",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}api/v1/games/provider-requests/softswiss/callback/freespins",
											"host": [
												"{{stagingUrl}}api"
											],
											"path": [
												"v1",
												"games",
												"provider-requests",
												"softswiss",
												"callback",
												"freespins"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Limits API",
							"item": [
								{
									"name": "self-exclusion",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"excludeUntil\": \"2024-12-15T08:30:56.982Z\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}user-limits/self-exclusion",
											"host": [
												"{{stagingUrl}}user-limits"
											],
											"path": [
												"self-exclusion"
											]
										}
									},
									"response": []
								},
								{
									"name": "self-exclusion",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "gambling-limits",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"depositLimit\": \"0.25\",\n  \"betLimit\": \"0.25\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}user-limits/gambling-limits",
											"host": [
												"{{stagingUrl}}user-limits"
											],
											"path": [
												"gambling-limits"
											]
										}
									},
									"response": []
								},
								{
									"name": "gambling-limits",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}user-limits/gambling-limits",
											"host": [
												"{{stagingUrl}}user-limits"
											],
											"path": [
												"gambling-limits"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Leaderboard API",
							"item": [
								{
									"name": "leaderboards",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}leaderboards?finished=true&type=DAILY&page=1&take=20",
											"host": [
												"{{stagingUrl}}leaderboards"
											],
											"query": [
												{
													"key": "finished",
													"value": "true"
												},
												{
													"key": "finished",
													"value": "false",
													"disabled": true
												},
												{
													"key": "type",
													"value": "DAILY"
												},
												{
													"key": "type",
													"value": "WEEKLY",
													"disabled": true
												},
												{
													"key": "type",
													"value": "MONTHLY",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "leaderboards/{type}",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}leaderboards/monthly",
											"host": [
												"{{stagingUrl}}leaderboards"
											],
											"path": [
												"monthly"
											]
										}
									},
									"response": []
								},
								{
									"name": "leaderboards/{id}",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}leaderboards/id/5b714b3a-a060-4b14-88b9-8d8fa9e3e9f1",
											"host": [
												"{{stagingUrl}}leaderboards"
											],
											"path": [
												"id",
												"5b714b3a-a060-4b14-88b9-8d8fa9e3e9f1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fairness",
							"item": [
								{
									"name": "history",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}fairness/history?page =1&take=20",
											"host": [
												"{{stagingUrl}}fairness"
											],
											"path": [
												"history"
											],
											"query": [
												{
													"key": "page ",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "seed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"// Проверка, что все поля существуют\r",
													"pm.test(\"All required fields are present\", function () {\r",
													"    const requiredFields = [\r",
													"        \"clientSeed\", \r",
													"        \"nonce\", \r",
													"        \"hashedServerSeed\", \r",
													"        \"nextHashedServerSeed\", \r",
													"        \"id\", \r",
													"        \"serverSeed\", \r",
													"        \"nextServerSeed\", \r",
													"        \"userId\"\r",
													"    ];\r",
													"    requiredFields.forEach(field => {\r",
													"        pm.expect(jsonData).to.have.property(field);\r",
													"    });\r",
													"});\r",
													"\r",
													"// Проверка значений полей\r",
													"pm.test(\"Fields have valid values\", function () {\r",
													"    pm.expect(jsonData.clientSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.nonce).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(jsonData.hashedServerSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.nextHashedServerSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.id).to.match(/^[0-9a-fA-F\\-]{36}$/); // UUID формат\r",
													"    pm.expect(jsonData.serverSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.nextServerSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.userId).to.be.a(\"number\").and.to.be.above(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}fairness/seed",
											"host": [
												"{{stagingUrl}}fairness"
											],
											"path": [
												"seed"
											]
										}
									},
									"response": []
								},
								{
									"name": "seed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"// Проверка, что все поля существуют\r",
													"pm.test(\"All required fields are present\", function () {\r",
													"    const requiredFields = [\r",
													"        \"clientSeed\", \r",
													"        \"nonce\", \r",
													"        \"hashedServerSeed\", \r",
													"        \"nextHashedServerSeed\", \r",
													"        \"id\", \r",
													"        \"serverSeed\", \r",
													"        \"nextServerSeed\", \r",
													"        \"userId\"\r",
													"    ];\r",
													"    requiredFields.forEach(field => {\r",
													"        pm.expect(jsonData).to.have.property(field);\r",
													"    });\r",
													"});\r",
													"\r",
													"// Проверка значений полей\r",
													"pm.test(\"Fields have valid values\", function () {\r",
													"    pm.expect(jsonData.clientSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.nonce).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(jsonData.hashedServerSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.nextHashedServerSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.id).to.match(/^[0-9a-fA-F\\-]{36}$/); // UUID формат\r",
													"    pm.expect(jsonData.serverSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.nextServerSeed).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.userId).to.be.a(\"number\").and.to.be.above(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"clientSeed\": \"56a0b13b651b3b8crr2afae3dd13c78be954387224bfeedd0c2ad1a0c7d9edf\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}fairness/seed",
											"host": [
												"{{stagingUrl}}fairness"
											],
											"path": [
												"seed"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Affiliate system",
							"item": [
								{
									"name": "affiliate/users",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}affiliate/users?sortBy=CREATED_AT&sortOrder=desc&page=1&take=20",
											"host": [
												"{{stagingUrl}}affiliate"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "sortBy",
													"value": "CREATED_AT"
												},
												{
													"key": "sortBy",
													"value": "CAMPAINE",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc"
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Overview",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}affiliate/overview",
											"host": [
												"{{stagingUrl}}affiliate"
											],
											"path": [
												"overview"
											]
										}
									},
									"response": []
								},
								{
									"name": "claim",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}affiliate/claim",
											"host": [
												"{{stagingUrl}}affiliate"
											],
											"path": [
												"claim"
											]
										}
									},
									"response": []
								},
								{
									"name": "affiliate me",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}affiliate/me",
											"host": [
												"{{stagingUrl}}affiliate"
											],
											"path": [
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "affiliate code",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"67890\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}affiliate/code",
											"host": [
												"{{stagingUrl}}affiliate"
											],
											"path": [
												"code"
											]
										}
									},
									"response": []
								},
								{
									"name": "affiliate code",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}affiliate/code",
											"host": [
												"{{stagingUrl}}affiliate"
											],
											"path": [
												"code"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "notification",
							"item": [
								{
									"name": "notifications",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}notifications",
											"host": [
												"{{stagingUrl}}notifications"
											]
										}
									},
									"response": []
								},
								{
									"name": "del notifications",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}notifications",
											"host": [
												"{{stagingUrl}}notifications"
											]
										}
									},
									"response": []
								},
								{
									"name": "notifications/aware",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}notifications/aware",
											"host": [
												"{{stagingUrl}}notifications"
											],
											"path": [
												"aware"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "promo",
							"item": [
								{
									"name": "promo/history",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}promo/history?page=1&take=20",
											"host": [
												"{{stagingUrl}}promo"
											],
											"path": [
												"history"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "promo/bonuses",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}promo/history?page=1&take=20",
											"host": [
												"{{stagingUrl}}promo"
											],
											"path": [
												"history"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												},
												{
													"key": "isActive",
													"value": "true",
													"description": "true/false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "promo/public",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}promo/history?page=1&take=20",
											"host": [
												"{{stagingUrl}}promo"
											],
											"path": [
												"history"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "take",
													"value": "20"
												},
												{
													"key": "isActive",
													"value": "true",
													"description": "true/false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "promo/public/code Copy",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}promo/public/TESTPR2",
											"host": [
												"{{stagingUrl}}promo"
											],
											"path": [
												"public",
												"TESTPR2"
											]
										}
									},
									"response": []
								},
								{
									"name": "promo/public/code",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"promoCodeId\": \"acb541c9-8b02-4e54-9974-0c7cadc3c7b5\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}promo/public/TESTPR2",
											"host": [
												"{{stagingUrl}}promo"
											],
											"path": [
												"public",
												"TESTPR2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "vip program",
							"item": [
								{
									"name": "vip-program",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}vip-program/application",
											"host": [
												"{{stagingUrl}}vip-program"
											],
											"path": [
												"application"
											],
											"query": [
												{
													"key": null,
													"value": null,
													"description": "//ApplicationStatus {\n//   INBOX \n//   ACTIVE\n//   ONHOLD\n//   REJECTED",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "vip-program",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"social\": \"TELEGRAM\",\r\n  \"name\": \"\",\r\n  \"socialNick\": \"\",\r\n  \"transferSite\": \"\",\r\n  \"transferWagger\":7,\r\n  \"transferReasons\": \"\",\r\n  \"transferAvgDeposit\":7 ,\r\n  \"transferPlaysWeek\": 7,\r\n  \"favoritesGames\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}vip-program/application",
											"host": [
												"{{stagingUrl}}vip-program"
											],
											"path": [
												"application"
											]
										}
									},
									"response": []
								},
								{
									"name": "vip-program/upload/stats",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"type": "file",
													"src": "/C:/Users/user/Desktop/racoon.jpg"
												}
											]
										},
										"url": {
											"raw": "{{stagingUrl}}vip-program/upload/stats",
											"host": [
												"{{stagingUrl}}vip-program"
											],
											"path": [
												"upload",
												"stats"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Currency Rates",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{stagingUrl}}exchange-rates?fiatCurrency=USD",
									"host": [
										"{{stagingUrl}}exchange-rates"
									],
									"query": [
										{
											"key": "fiatCurrency",
											"value": "USD"
										},
										{
											"key": "fiatCurrency",
											"value": "EUR",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "intercome",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjMwMDUsIm5hbWUiOiJqb2Zpa2ExMDE2IiwiZW1haWwiOiJqb2Zpa2ExMDE2QGNhbG1wcm9zLmNvbSIsInNJZCI6IjRkY2JjNjIyLTZlNTEtNDUyYy05OTNlLWRlNmVjY2RiZmE3NSIsInNLZXkiOiJhZWQwZDhjYi1hNTUzLTQ4ZDAtYmM5NS05NmI4NjQ0MWY5MWUiLCJydCI6ZmFsc2UsInJvbGVzIjpbIlVzZXIiXSwiaWF0IjoxNzQ1MzI2NDkxLCJleHAiOjE3NDUzMzcyOTF9.VGTsoqU4pp42vVuocoLmBqayCcWQwGfHRA-9Z499oJI",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.dropbet.com/user/me",
									"protocol": "https",
									"host": [
										"api",
										"dropbet",
										"com"
									],
									"path": [
										"user",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user stats of other users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{stagingUrl}}user/Mikos121/stats",
									"host": [
										"{{stagingUrl}}user"
									],
									"path": [
										"Mikos121",
										"stats"
									]
								}
							},
							"response": []
						},
						{
							"name": "currency",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{stagingUrl}}currency",
									"host": [
										"{{stagingUrl}}currency"
									]
								}
							},
							"response": []
						},
						{
							"name": "aff leaderboard",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "API",
										"value": "03b8f8df120eef72e09abf791e5eb0b28424cd74c6778d0a89b10ea7d6638703",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.dropbet.com/external/affiliates",
									"protocol": "https",
									"host": [
										"api",
										"dropbet",
										"com"
									],
									"path": [
										"external",
										"affiliates"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin/api-keys",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjMwMDUsIm5hbWUiOiJqb2Zpa2ExMDE2IiwiZW1haWwiOiJqb2Zpa2ExMDE2QGNhbG1wcm9zLmNvbSIsInNJZCI6IjRkY2JjNjIyLTZlNTEtNDUyYy05OTNlLWRlNmVjY2RiZmE3NSIsInNLZXkiOiJhZWQwZDhjYi1hNTUzLTQ4ZDAtYmM5NS05NmI4NjQ0MWY5MWUiLCJydCI6ZmFsc2UsInJvbGVzIjpbIlVzZXIiXSwiaWF0IjoxNzQ1MzI2NDkxLCJleHAiOjE3NDUzMzcyOTF9.VGTsoqU4pp42vVuocoLmBqayCcWQwGfHRA-9Z499oJI",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 3005\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.dropbet.com/admin/api-keys",
									"protocol": "https",
									"host": [
										"api",
										"dropbet",
										"com"
									],
									"path": [
										"admin",
										"api-keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "deposit debag",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiODUyNjkwMDktYjk0YS00MTMwLWFmZGQtMmY0MGQwYzhjOWI2Iiwic0tleSI6IjhiNzE5OGRlLWI5YzEtNGMyNS1hMmJhLThkOGJlMzkyZTUzYyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDcyMjQ2NzQsImV4cCI6MTc0NzMxMTA3NH0.iVMDC-Q4BysFBOGUbr5k0Xis6wMQQjyhTl73VqOrnsM",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 995,\r\n  \"actions\": [\r\n    {\r\n      \"action\": \"deposit\",\r\n      \"amount\": \"50\",\r\n      \"currencyId\": \"USDT\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{stagingUrl}}debug/user/action",
									"host": [
										"{{stagingUrl}}debug"
									],
									"path": [
										"user",
										"action"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "backoffice",
					"item": [
						{
							"name": "login",
							"item": [
								{
									"name": "login_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка статуса ответа\r",
													"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
													"\r",
													"// Извлечение тела ответа\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"// Тесты на наличие токенов в ответе\r",
													"pm.test(\"Response has token\", () => {\r",
													"    pm.expect(responseJson).to.have.property(\"token\");\r",
													"});\r",
													"\r",
													"// Сохранение токенов в переменные окружения\r",
													"if (responseJson.token) {\r",
													"    pm.environment.set(\"2faBtoken\", responseJson.token);\r",
													"}\r",
													"\r",
													"\r",
													"// Получаем JSON-ответ\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"// Проверяем, что accessToken существует и содержит поле \"token\"\r",
													"pm.test(\"Response contains accessToken.token\", () => {\r",
													"    pm.expect(responseJson).to.have.property(\"accessToken\");\r",
													"    pm.expect(responseJson.accessToken).to.have.property(\"token\");\r",
													"});\r",
													"\r",
													"// Если accessToken и его поле token существуют, сохраняем токен в окружение\r",
													"if (responseJson.accessToken && responseJson.accessToken.token) {\r",
													"    pm.environment.set(\"accessBOToken\", responseJson.accessToken.token);\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"dev@admin.com\",\r\n  \"password\": \"MyPass123-\"\r\n}\r\n\r\n// {\r\n//   \"email\": \"jofika1016+1@calmpros.com\",\r\n//   \"password\": \"Welcome123@\"\r\n// }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}auth/sign-in",
											"host": [
												"{{stagingUrl}}auth"
											],
											"path": [
												"sign-in"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Admin",
							"item": [
								{
									"name": "Withdraw/Deposits - admin",
									"item": [
										{
											"name": "admin deposit",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/payments/deposit?sortBy=CREATED_AT&sortOrder=desc&page=1&take=20&userId=33,78",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"payments",
														"deposit"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "CREATED_AT"
														},
														{
															"key": "sortBy",
															"value": "USD_AMOUNT",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "desc"
														},
														{
															"key": "status",
															"value": "PENDING",
															"disabled": true
														},
														{
															"key": "status",
															"value": "CONFIRMED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "COMPLETE",
															"disabled": true
														},
														{
															"key": "status",
															"value": "FAILED",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														},
														{
															"key": "userId",
															"value": "33,78"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "deposit/id",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/payments/deposit/24b03fd9-397e-45a8-bc01-8170fec441e9",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"payments",
														"deposit",
														"24b03fd9-397e-45a8-bc01-8170fec441e9"
													]
												}
											},
											"response": []
										},
										{
											"name": "admin withdraw",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/payments/withdraw?sortBy=CREATED_AT&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"payments",
														"withdraw"
													],
													"query": [
														{
															"key": "status",
															"value": "CONFIRMED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "COMPLETE",
															"disabled": true
														},
														{
															"key": "status",
															"value": "DENIED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "PENDING",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "USD_AMOUNT",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "CREATED_AT"
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														},
														{
															"key": "userId",
															"value": "166",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "admin withdraw stats",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/payments/withdraw/stats",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"payments",
														"withdraw",
														"stats"
													],
													"query": [
														{
															"key": "status",
															"value": "CONFIRMED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "COMPLETE",
															"disabled": true
														},
														{
															"key": "status",
															"value": "DENIED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "PENDING",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "USD_AMOUNT",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "CREATED_AT",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"disabled": true
														},
														{
															"key": "take",
															"value": "20",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "33",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "admin withdraw stats/ id",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/payments/withdraw/stats/33",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"payments",
														"withdraw",
														"stats",
														"33"
													]
												}
											},
											"response": []
										},
										{
											"name": "withdraw/id",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/payments/withdraw/6643b5b5-e484-46e0-80fa-584c3fa53ea2",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"payments",
														"withdraw",
														"6643b5b5-e484-46e0-80fa-584c3fa53ea2"
													]
												}
											},
											"response": []
										},
										{
											"name": "withdraw reject",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"116\",\n  \"rejectReason\": \"string\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/withdraw/reject",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"withdraw",
														"reject"
													]
												}
											},
											"response": []
										},
										{
											"name": "withdraw approve",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"39720b8c-fc34-41d0-8609-afcaf2d30b3b\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/payments/withdraw/approve",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"payments",
														"withdraw",
														"approve"
													]
												}
											},
											"response": []
										},
										{
											"name": "withdraw fee",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}withdraw/fee?currencyId=USDT&networkId=TRX",
													"host": [
														"{{stagingUrl}}withdraw"
													],
													"path": [
														"fee"
													],
													"query": [
														{
															"key": "currencyId",
															"value": "USDT"
														},
														{
															"key": "networkId",
															"value": "TRX"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "withdraw retry",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"7e4e61f2-2e4f-44d4-b6a9-80520fe4bf06\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/withdraw/retry",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"withdraw",
														"retry"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Casino API",
									"item": [
										{
											"name": "hydrate",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/hydrate",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"hydrate"
													]
												}
											},
											"response": []
										},
										{
											"name": "admin main",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZDdiMjc0NzItNzE3Zi00NTAwLWExZWEtMGEyZjhjMjkwYzg2Iiwic0tleSI6IjEyN2RmMGM2LTFmNTgtNDNkNC04NGMzLTRhMzBlZTFhZDI3OSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE3OTc5NTMsImV4cCI6MTc0MTg4NDM1M30.Y9cAzzWiELqLq5tKcvuzRSXf951JsKJVBacphETUMGM",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"category\": \"SLOTS\",\n  \"slugs\": [\n    \"100hp-gaming-air-jet\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/admin/main",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"admin",
														"main"
													]
												}
											},
											"response": []
										},
										{
											"name": "admin providers",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/providers?sortOrder=desc&sortBy=createdAt&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"providers"
													],
													"query": [
														{
															"key": "sortOrder",
															"value": "desc"
														},
														{
															"key": "sortBy",
															"value": "createdAt"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "providers {slug}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/providers/?slug=100hp-gaming-air-jet",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"providers",
														""
													],
													"query": [
														{
															"key": "slug",
															"value": "100hp-gaming-air-jet"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "providers {slug} images",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "image",
															"type": "file",
															"src": "postman-cloud:///1ef95f1e-f26f-4760-a361-b47876f4b346"
														}
													]
												},
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/providers/turbogames/images",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"providers",
														"turbogames",
														"images"
													]
												}
											},
											"response": []
										},
										{
											"name": "games admin",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/all?enabled=true&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"all"
													],
													"query": [
														{
															"key": "category",
															"value": "HOUSE_GAME",
															"disabled": true
														},
														{
															"key": "category",
															"value": "BLACKJACK",
															"disabled": true
														},
														{
															"key": "category",
															"value": "SLOTS",
															"disabled": true
														},
														{
															"key": "category",
															"value": "ROULETTE",
															"disabled": true
														},
														{
															"key": "category",
															"value": "GAME_SHOWS",
															"disabled": true
														},
														{
															"key": "category",
															"value": "LIVE_CASINO",
															"disabled": true
														},
														{
															"key": "category",
															"value": "BACCARAT",
															"disabled": true
														},
														{
															"key": "category",
															"value": "VIDEO_POKER",
															"disabled": true
														},
														{
															"key": "category",
															"value": "LOTTERY",
															"disabled": true
														},
														{
															"key": "category",
															"value": "CARD",
															"disabled": true
														},
														{
															"key": "category",
															"value": "CASUAL",
															"disabled": true
														},
														{
															"key": "category",
															"value": "POKER",
															"disabled": true
														},
														{
															"key": "category",
															"value": "CRAPS",
															"disabled": true
														},
														{
															"key": "category",
															"value": "FISHING",
															"disabled": true
														},
														{
															"key": "category",
															"value": "SCRATCH",
															"disabled": true
														},
														{
															"key": "category",
															"value": "VIRTUAL_SPORTS",
															"disabled": true
														},
														{
															"key": "category",
															"value": "LIVE",
															"disabled": true
														},
														{
															"key": "type",
															"value": "SLOTS",
															"disabled": true
														},
														{
															"key": "type",
															"value": "HOUSE_GAME",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "addedAt",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "default",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "popula",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "name",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "lastPlayed",
															"disabled": true
														},
														{
															"key": "enabled",
															"value": "true"
														},
														{
															"key": "enabled",
															"value": "false",
															"disabled": true
														},
														{
															"key": "id",
															"value": "",
															"disabled": true
														},
														{
															"key": "slug",
															"value": "",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"disabled": true
														},
														{
															"key": "providerId",
															"value": "",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "{slug} images",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "image",
															"type": "file",
															"src": "postman-cloud:///1ef95f1e-f26f-4760-a361-b47876f4b346"
														}
													]
												},
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/100hp-gaming-air-jet/images",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"100hp-gaming-air-jet",
														"images"
													]
												}
											},
											"response": []
										},
										{
											"name": "house settings",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"dice\": {\r\n    \"minBet\": 1,\r\n    \"maxBet\":10,\r\n    \"maxProfit\": 10000,\r\n    \"rtp\": 0.99,\r\n    \"maxMultiplier\": 50\r\n  } \r\n}\r\n// {\r\n//   \"plinko\": {\r\n//     \"minBet\": 0,\r\n//     \"maxBet\": 0,\r\n//     \"maxProfit\": 0,\r\n//     \"manualMs\": 0,\r\n//     \"autoMs\": 0\r\n//   },\r\n//   \"dice\": {\r\n//     \"minBet\": 0,\r\n//     \"maxBet\": 0,\r\n//     \"maxProfit\": 0,\r\n//     \"rtp\": 1,\r\n//     \"maxMultiplier\": 1\r\n//   },\r\n//   \"mines\": {\r\n//     \"minBet\": 0,\r\n//     \"maxBet\": 0,\r\n//     \"maxProfit\": 0,\r\n//     \"rtp\": 1\r\n//   },\r\n//   \"limbo\": {\r\n//     \"minBet\": 0,\r\n//     \"maxBet\": 0,\r\n//     \"maxProfit\": 0,\r\n//     \"maxMultiplier\": 0,\r\n//     \"minMultiplier\": 0,\r\n//     \"rtp\": 1\r\n//   },\r\n//   \"roulette\": {\r\n//     \"minBet\": 0,\r\n//     \"maxBet\": 0,\r\n//     \"maxProfit\": 0\r\n//   },\r\n//   \"keno\": {\r\n//     \"minBet\": 0,\r\n//     \"maxBet\": 0,\r\n//     \"maxProfit\": 0,\r\n//     \"rtp\": 1\r\n//   },\r\n//   \"blackjack\": {\r\n//     \"minBet\": 0,\r\n//     \"maxBet\": 0,\r\n//     \"maxProfit\": 0\r\n//   },\r\n//   \"speed-roulette\": {\r\n//     \"minBet\": 0,\r\n//     \"maxBet\": 0,\r\n//     \"maxProfit\": 0,\r\n//     \"timeConfig\": {\r\n//       \"ACCEPTING_BETS\": 15000,\r\n//       \"WAITING_BLOCK\": 2000,\r\n//       \"ROLLING\": 7000,\r\n//       \"FINISHED\": 3000,\r\n//       \"ERROR\": 1000\r\n//     }\r\n//   }\r\n// }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/house/settings",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"house",
														"settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "house settings",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/house/settings",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"house",
														"settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "admin {slug}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n  \"enabled\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/blackjack?category=HOUSE_GAM",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"blackjack"
													],
													"query": [
														{
															"key": "category",
															"value": "HOUSE_GAM"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "admin {slug}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/casino/games/limbo",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"casino",
														"games",
														"limbo"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Self-Exclude Admin API",
									"item": [
										{
											"name": "user-exclusion",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"excludeUntil\": \"2024-12-05T09:11:07.568Z\",\n  \"userId\": 3\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/user-limits/user-exclusion",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-limits",
														"user-exclusion"
													]
												}
											},
											"response": []
										},
										{
											"name": "user-exclusion",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"userId\": 2\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/user-limits/user-exclusion",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-limits",
														"user-exclusion"
													]
												}
											},
											"response": []
										},
										{
											"name": "user-exclusion/{id}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user-limits/user-exclusion/2",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-limits",
														"user-exclusion",
														"2"
													]
												}
											},
											"response": []
										},
										{
											"name": "gambling-limits",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"depositLimit\": \"0.25\",\n  \"betLimit\": \"0.25\",\n  \"userId\": 2\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/user-limits/gambling-limits",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-limits",
														"gambling-limits"
													]
												}
											},
											"response": []
										},
										{
											"name": "gambling-limits/{id}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user-limits/gambling-limits/3",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-limits",
														"gambling-limits",
														"3"
													],
													"query": [
														{
															"key": "id",
															"value": "3",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "User transactions",
									"item": [
										{
											"name": "User transactions",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user/stats/transactions?transactionType=DEPOSIT&sortOrder=asc&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user",
														"stats",
														"transactions"
													],
													"query": [
														{
															"key": "transactionType",
															"value": "DEPOSIT"
														},
														{
															"key": "transactionType",
															"value": "WITHDRAW",
															"disabled": true
														},
														{
															"key": "dataRange",
															"value": "HOURLY",
															"disabled": true
														},
														{
															"key": "dataRange",
															"value": "DAILY",
															"disabled": true
														},
														{
															"key": "dataRange",
															"value": "WEEKLY",
															"disabled": true
														},
														{
															"key": "dataRange",
															"value": "MONTHLY",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "amount",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "asc"
														},
														{
															"key": "sortOrder",
															"value": "desk",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Leaderboard Admin API",
									"item": [
										{
											"name": "schedule",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/leaderboards/schedule",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"leaderboards",
														"schedule"
													]
												}
											},
											"response": []
										},
										{
											"name": "schedule{id}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/leaderboards/schedule/d4eb1b3d-650f-4a43-acc2-7dfb07d02e46",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"leaderboards",
														"schedule",
														"d4eb1b3d-650f-4a43-acc2-7dfb07d02e46"
													]
												}
											},
											"response": []
										},
										{
											"name": "schedule{id}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"type\": \"DAILY\",\n  \"enabled\": true,\n  \"name\": \"md117\",\n  \"description\": \"retest\",\n  \"prizes\": [\n    {\n      \"position\": 1,\n      \"usdPrize\": 100000000\n    },\n    {\n      \"position\": 2,\n      \"usdPrize\": 500000\n    },\n    {\n      \"position\": 3,\n      \"usdPrize\": 100000\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/leaderboards/schedule/daily",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"leaderboards",
														"schedule",
														"daily"
													]
												}
											},
											"response": []
										},
										{
											"name": "admin leaderboards",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.playebit-staging.com/admin/leaderboards?withUsers=true&withSchedule=true&type=DAILY&status=FINISHED&sortOrder=desc&sortBy=created&page=1&take=20",
													"protocol": "https",
													"host": [
														"api",
														"playebit-staging",
														"com"
													],
													"path": [
														"admin",
														"leaderboards"
													],
													"query": [
														{
															"key": "withUsers",
															"value": "true"
														},
														{
															"key": "withUsers",
															"value": "false",
															"disabled": true
														},
														{
															"key": "withSchedule",
															"value": "true"
														},
														{
															"key": "withSchedule",
															"value": "false",
															"disabled": true
														},
														{
															"key": "type",
															"value": "DAILY"
														},
														{
															"key": "type",
															"value": "WEEKLY",
															"disabled": true
														},
														{
															"key": "type",
															"value": "MONTHLY",
															"disabled": true
														},
														{
															"key": "status",
															"value": "ACTIVE",
															"disabled": true
														},
														{
															"key": "status",
															"value": "ENDED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "NOT_STARTED",
															"disabled": true
														},
														{
															"key": "status",
															"value": "SETTLEMENT",
															"disabled": true
														},
														{
															"key": "status",
															"value": "FINISHED"
														},
														{
															"key": "sortOrder",
															"value": "desc"
														},
														{
															"key": "sortBy",
															"value": "created"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "{leaderboardId}/users",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/leaderboards/fa4a9712-5886-440a-85a2-0b6e2788118b/users?page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"leaderboards",
														"fa4a9712-5886-440a-85a2-0b6e2788118b",
														"users"
													],
													"query": [
														{
															"key": "search",
															"value": "Lilly",
															"disabled": true
														},
														{
															"key": "isWinner",
															"value": "true",
															"disabled": true
														},
														{
															"key": "isWaitingForPrice",
															"value": "true",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "{leaderboardId}/users/{userId}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/leaderboards/{leaderboardId}/users/{userid}",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"leaderboards",
														"{leaderboardId}",
														"users",
														"{userid}"
													],
													"query": [
														{
															"key": "leaderboardId",
															"value": "8a66b84f-5912-4832-8cfe-9caf0b848b22",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "24",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "give-prize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"usdAmount\": \"5\",\n  \"currency\": \"EVO\",\n  \"fullUsdAmount\": true,\n  \"leaderboardId\": \"fa4a9712-5886-440a-85a2-0b6e2788118b\",\n  \"userId\": 41\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/leaderboards/give-prize",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"leaderboards",
														"give-prize"
													]
												}
											},
											"response": []
										},
										{
											"name": "leaderboards/{leaderboardId}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/leaderboards/?leaderboardId=8a66b84f-5912-4832-8cfe-9caf0b848b22",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"leaderboards",
														""
													],
													"query": [
														{
															"key": "leaderboardId",
															"value": "8a66b84f-5912-4832-8cfe-9caf0b848b22"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "SuperAdmin API",
									"item": [
										{
											"name": "create admin",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"ujenob55044\",\n  \"password\": \"Welcome123@\",\n  \"email\": \"jofika1016@calmpros.com\",\n  \"permissions\": \n    [\"admin-tips.view\", \n    \"user.view\",\n     \"user.edit\", \n     \"user.delete\", \n     \"user.ban\", \n     \"user.transactions.view\", \n     \"user.affiliate-data.view\", \n     \"admin-tips.tip\", \"admin-tips.deduct-balance\", \"user.promo-code.history\", \"admin-users.view-admin-audit\", \"user.bets.view\", \"registration-info.view\", \"transaction.view\", \"promo-code.edit\", \"promo-code.view\", \"affiliate.view\", \"withdrawals.view\", \"withdrawals.manage\", \"withdrawals.approve\", \"withdrawals.reject\", \"affiliate.referrals.view\", \"withdrawals.retry\", \"dashboard.view\", \"faq.edit\", \"deposits.view\", \"crypto-config.edit\", \"crypto-config.view\", \"support-request.manage\", \"leaderboard.edit\", \"leaderboard.view\", \"leaderboard.give-prize\", \"api-key.edit\", \"api-key.view\", \"maintenance.toggle\", \"system.logger\", \"chat.admin-action\", \"user-note.edit\", \"user-note.view\", \"user-note.delete\", \"user-limit.view\", \"user-limit.edit\", \"user-limit.delete\", \"casino.games.view\", \"casino.games.edit\", \"casino.games.commission.edit\", \"rakebacks.view\", \"affiliate.levels.view\", \"affiliate.users.view\", \"affiliate.find-one.view\", \"affiliate.find-one-stats.view\", \"tip.send\", \"tip.view\"]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/user/admin-user",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user",
														"admin-user"
													]
												}
											},
											"response": []
										},
										{
											"name": "admin/user/create-admin Copy",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjQxLCJuYW1lIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQGFkbWluLmNvbSIsInNJZCI6IjVlMjIwMzJkLTIxZjktNGM1Yi05MmUwLTdiMzYzZDRhOGU2ZSIsInJ0IjpmYWxzZSwiaWF0IjoxNzMzODQyMTI0LCJleHAiOjE3MzM4NDM5MjR9.I6LZgsAje5a9ajn8V0q-R-E8uakfsJ2NzgZy-965d4Y",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"permissions\": [\"user.view\",\"user.edit\",\"user.delete\",\"user.ban\",\"user.transactions.view\",\"user.affiliate-data.view\",\"user.balance.add-money\",\"user.balance.deduct-money\",\"user.promo-code.history\",\"user.bets.view\",\"admin-tips.see-history\",\"tips.see-history\",\"promo-code.edit\",\"promo-code.view\",\"withdrawals.view\",\"withdrawals.manage\",\"dashboard.view\",\"faq.edit\",\"deposits.view\",\"crypto-config.edit\",\"crypto-config.view\",\"support-request.manage\",\"leaderboard.edit\",\"leaderboard.view\",\"leaderboard.give-prize\",\"api-key.edit\",\"api-key.view\",\"maintenance.toggle\",\"system.logger\",\"chat.admin-action\",\"user-note.edit\",\"user-note.view\",\"user-note.delete\",\"user-limit.view\",\"user-limit.edit\",\"user-limit.delete\",\"casino.games.view\",\"casino.games.edit\"]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://api.playebit-staging.com/admin/user/201/permissions",
													"protocol": "https",
													"host": [
														"api",
														"playebit-staging",
														"com"
													],
													"path": [
														"admin",
														"user",
														"201",
														"permissions"
													]
												}
											},
											"response": []
										},
										{
											"name": "admin/user/all-permissions",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.playebit-staging.com/admin/user/all-permissions",
													"protocol": "https",
													"host": [
														"api",
														"playebit-staging",
														"com"
													],
													"path": [
														"admin",
														"user",
														"all-permissions"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "User stats",
									"item": [
										{
											"name": "full stats",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user/166/full/stats",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user",
														"166",
														"full",
														"stats"
													]
												}
											},
											"response": []
										},
										{
											"name": "admin/user/stats/transaction",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user/stats/transactions?transactionType=DEPOSIT&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user",
														"stats",
														"transactions"
													],
													"query": [
														{
															"key": "transactionType",
															"value": "DEPOSIT"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "admin dashboard",
									"item": [
										{
											"name": "dashboard v2",
											"item": [
												{
													"name": "dash-v2/main/stats",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjMzNTIsIm5hbWUiOiJtZWxuZGltYWRtaW4iLCJlbWFpbCI6ImpvZmlrYTEwMTYrMUBjYWxtcHJvcy5jb20iLCJzSWQiOiIxZjZjNDkzYy0xMjk3LTQ1NWMtYTg2ZS04OGI2ZjRhMDUyNmIiLCJzS2V5IjoiNWQwZjlhZmMtOTljMC00NGQ2LWIwZTMtOWY4ZjY2YTFiYTUxIiwicnQiOmZhbHNlLCJyb2xlcyI6WyJBZG1pbiJdLCJpYXQiOjE3NDg2MDYyNDEsImV4cCI6MTc0ODYxNzA0MX0.4ISoF-RxSagAzlCVlIL1YRZJGTDr-Y9-HVqxdzzGd4I",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/dashboard-v2/main/stats?timeRange=Yesterday&timeGroup=day",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"dashboard-v2",
																"main",
																"stats"
															],
															"query": [
																{
																	"key": "timeRange",
																	"value": "Yesterday",
																	"description": "Today, Yesterday, Last7Days, ThisWeek, LastWeek, Last30Days, ThisMonth, LastMonth, ThisQuarter, LastQuarter, ThisYear, LastYear"
																},
																{
																	"key": "timeGroup",
																	"value": "day",
																	"description": "day, week, month, quarter,hour"
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "false",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "dash-v2/game/stats",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzVjZjY3M2MtNDQ3YS00ZTRkLWI1M2QtMTE3ZDlmODk3ODgxIiwic0tleSI6ImE1YWZjNDUyLTk1MmYtNDEyYS05N2MwLTliYjA4N2Y3NDRhZCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDIxMjU3OTMsImV4cCI6MTc0MjIxMjE5M30.zjyig0YvZiYH9TQYoAOTDFtRUW4ZrxHQqWr6UIRxaQA",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/dashboard-v2/game/stats?timeRange=Today&timeGroup=day",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"dashboard-v2",
																"game",
																"stats"
															],
															"query": [
																{
																	"key": "timeRange",
																	"value": "Today",
																	"description": "Today, Yesterday, Last7Days, ThisWeek, LastWeek, Last30Days, ThisMonth, LastMonth, ThisQuarter, LastQuarter, ThisYear, LastYear"
																},
																{
																	"key": "timeGroup",
																	"value": "day",
																	"description": "day, week, month, quarter,hour"
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "false",
																	"disabled": true
																},
																{
																	"key": "orderBy",
																	"value": "turnover",
																	"description": " ggr, atpu, arpu",
																	"disabled": true
																},
																{
																	"key": "orderDirection",
																	"value": "asc",
																	"description": "desc",
																	"disabled": true
																},
																{
																	"key": "gameCategory",
																	"value": "HOUSE_GAME",
																	"description": "SLOTS, LIVE_CASINO, BLACKJACK, ROULETTE, GAME_SHOWS, BACCARAT, VIDEO_POKER, CARD, CASUAL, LOTTERY, LIVE, POKER, CRAPS, FISHING, CRASH, VIRTUAL_SPORTS, SCRATCH, BOOKMAKER",
																	"disabled": true
																},
																{
																	"key": "take",
																	"value": "20",
																	"disabled": true
																},
																{
																	"key": "page",
																	"value": "1",
																	"disabled": true
																},
																{
																	"key": "gameSlug",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "dash-v2/main/option",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzVjZjY3M2MtNDQ3YS00ZTRkLWI1M2QtMTE3ZDlmODk3ODgxIiwic0tleSI6ImE1YWZjNDUyLTk1MmYtNDEyYS05N2MwLTliYjA4N2Y3NDRhZCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDIxMjU3OTMsImV4cCI6MTc0MjIxMjE5M30.zjyig0YvZiYH9TQYoAOTDFtRUW4ZrxHQqWr6UIRxaQA",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/dashboard-v2/main/options",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"dashboard-v2",
																"main",
																"options"
															]
														}
													},
													"response": []
												},
												{
													"name": "dashboard-v2/query/games-by-slug",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/dashboard-v2/query/games-by-slug?timeRange=Yesterday&timeGroup=day",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"dashboard-v2",
																"query",
																"games-by-slug"
															],
															"query": [
																{
																	"key": "timeRange",
																	"value": "Yesterday",
																	"description": "Today, Yesterday, Last7Days, ThisWeek, LastWeek, Last30Days, ThisMonth, LastMonth, ThisQuarter, LastQuarter, ThisYear, LastYear"
																},
																{
																	"key": "timeGroup",
																	"value": "day",
																	"description": "day, week, month, quarter,hour"
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "false",
																	"disabled": true
																},
																{
																	"key": "orderBy",
																	"value": "turnover",
																	"description": " ggr, atpu, arpu",
																	"disabled": true
																},
																{
																	"key": "orderDirection",
																	"value": "asc",
																	"description": "desc",
																	"disabled": true
																},
																{
																	"key": "gameCategory",
																	"value": "HOUSE_GAME",
																	"description": "SLOTS, LIVE_CASINO, BLACKJACK, ROULETTE, GAME_SHOWS, BACCARAT, VIDEO_POKER, CARD, CASUAL, LOTTERY, LIVE, POKER, CRAPS, FISHING, CRASH, VIRTUAL_SPORTS, SCRATCH, BOOKMAKER",
																	"disabled": true
																},
																{
																	"key": "take",
																	"value": "20",
																	"disabled": true
																},
																{
																	"key": "page",
																	"value": "1",
																	"disabled": true
																},
																{
																	"key": "gameSlug",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "/dashboard-v2/query/games-by-type",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/dashboard-v2/query/games-by-type?timeRange=Yesterday&timeGroup=day",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"dashboard-v2",
																"query",
																"games-by-type"
															],
															"query": [
																{
																	"key": "timeRange",
																	"value": "Yesterday",
																	"description": "Today, Yesterday, Last7Days, ThisWeek, LastWeek, Last30Days, ThisMonth, LastMonth, ThisQuarter, LastQuarter, ThisYear, LastYear"
																},
																{
																	"key": "timeGroup",
																	"value": "day",
																	"description": "day, week, month, quarter,hour"
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "false",
																	"disabled": true
																},
																{
																	"key": "orderBy",
																	"value": "turnover",
																	"description": " ggr, atpu, arpu",
																	"disabled": true
																},
																{
																	"key": "orderDirection",
																	"value": "asc",
																	"description": "desc",
																	"disabled": true
																},
																{
																	"key": "gameCategory",
																	"value": "HOUSE_GAME",
																	"description": "SLOTS, LIVE_CASINO, BLACKJACK, ROULETTE, GAME_SHOWS, BACCARAT, VIDEO_POKER, CARD, CASUAL, LOTTERY, LIVE, POKER, CRAPS, FISHING, CRASH, VIRTUAL_SPORTS, SCRATCH, BOOKMAKER",
																	"disabled": true
																},
																{
																	"key": "take",
																	"value": "20",
																	"disabled": true
																},
																{
																	"key": "page",
																	"value": "1",
																	"disabled": true
																},
																{
																	"key": "gameSlug",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "dashboard-v2/query/bets-by-type",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/dashboard-v2/query/bets-by-type?timeRange=Yesterday&timeGroup=day",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"dashboard-v2",
																"query",
																"bets-by-type"
															],
															"query": [
																{
																	"key": "timeRange",
																	"value": "Yesterday",
																	"description": "Today, Yesterday, Last7Days, ThisWeek, LastWeek, Last30Days, ThisMonth, LastMonth, ThisQuarter, LastQuarter, ThisYear, LastYear"
																},
																{
																	"key": "timeGroup",
																	"value": "day",
																	"description": "day, week, month, quarter,hour"
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "false",
																	"disabled": true
																},
																{
																	"key": "orderBy",
																	"value": "turnover",
																	"description": " ggr, atpu, arpu",
																	"disabled": true
																},
																{
																	"key": "orderDirection",
																	"value": "asc",
																	"description": "desc",
																	"disabled": true
																},
																{
																	"key": "gameCategory",
																	"value": "HOUSE_GAME",
																	"description": "SLOTS, LIVE_CASINO, BLACKJACK, ROULETTE, GAME_SHOWS, BACCARAT, VIDEO_POKER, CARD, CASUAL, LOTTERY, LIVE, POKER, CRAPS, FISHING, CRASH, VIRTUAL_SPORTS, SCRATCH, BOOKMAKER",
																	"disabled": true
																},
																{
																	"key": "take",
																	"value": "20",
																	"disabled": true
																},
																{
																	"key": "page",
																	"value": "1",
																	"disabled": true
																},
																{
																	"key": "gameSlug",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "dashboard-v2/query/payments",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzVjZjY3M2MtNDQ3YS00ZTRkLWI1M2QtMTE3ZDlmODk3ODgxIiwic0tleSI6ImE1YWZjNDUyLTk1MmYtNDEyYS05N2MwLTliYjA4N2Y3NDRhZCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDIxMjU3OTMsImV4cCI6MTc0MjIxMjE5M30.zjyig0YvZiYH9TQYoAOTDFtRUW4ZrxHQqWr6UIRxaQA",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/dashboard-v2/query/payments?timeRange=Yesterday&timeGroup=day",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"dashboard-v2",
																"query",
																"payments"
															],
															"query": [
																{
																	"key": "timeRange",
																	"value": "Yesterday",
																	"description": "Today, Yesterday, Last7Days, ThisWeek, LastWeek, Last30Days, ThisMonth, LastMonth, ThisQuarter, LastQuarter, ThisYear, LastYear"
																},
																{
																	"key": "timeGroup",
																	"value": "day",
																	"description": "day, week, month, quarter,hour"
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "false",
																	"disabled": true
																},
																{
																	"key": "orderBy",
																	"value": "turnover",
																	"description": " ggr, atpu, arpu",
																	"disabled": true
																},
																{
																	"key": "orderDirection",
																	"value": "asc",
																	"description": "desc",
																	"disabled": true
																},
																{
																	"key": "gameCategory",
																	"value": "HOUSE_GAME",
																	"description": "SLOTS, LIVE_CASINO, BLACKJACK, ROULETTE, GAME_SHOWS, BACCARAT, VIDEO_POKER, CARD, CASUAL, LOTTERY, LIVE, POKER, CRAPS, FISHING, CRASH, VIRTUAL_SPORTS, SCRATCH, BOOKMAKER",
																	"disabled": true
																},
																{
																	"key": "take",
																	"value": "20",
																	"disabled": true
																},
																{
																	"key": "page",
																	"value": "1",
																	"disabled": true
																},
																{
																	"key": "gameSlug",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "dashboard-v2/query/registrations",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzVjZjY3M2MtNDQ3YS00ZTRkLWI1M2QtMTE3ZDlmODk3ODgxIiwic0tleSI6ImE1YWZjNDUyLTk1MmYtNDEyYS05N2MwLTliYjA4N2Y3NDRhZCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDIxMjU3OTMsImV4cCI6MTc0MjIxMjE5M30.zjyig0YvZiYH9TQYoAOTDFtRUW4ZrxHQqWr6UIRxaQA",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/dashboard-v2/query/registrations?timeRange=Today&timeGroup=day",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"dashboard-v2",
																"query",
																"registrations"
															],
															"query": [
																{
																	"key": "timeRange",
																	"value": "Today",
																	"description": "Today, Yesterday, Last7Days, ThisWeek, LastWeek, Last30Days, ThisMonth, LastMonth, ThisQuarter, LastQuarter, ThisYear, LastYear"
																},
																{
																	"key": "timeGroup",
																	"value": "day",
																	"description": "day, week, month, quarter,hour"
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "false",
																	"disabled": true
																},
																{
																	"key": "orderBy",
																	"value": "turnover",
																	"description": " ggr, atpu, arpu",
																	"disabled": true
																},
																{
																	"key": "orderDirection",
																	"value": "asc",
																	"description": "desc",
																	"disabled": true
																},
																{
																	"key": "gameCategory",
																	"value": "HOUSE_GAME",
																	"description": "SLOTS, LIVE_CASINO, BLACKJACK, ROULETTE, GAME_SHOWS, BACCARAT, VIDEO_POKER, CARD, CASUAL, LOTTERY, LIVE, POKER, CRAPS, FISHING, CRASH, VIRTUAL_SPORTS, SCRATCH, BOOKMAKER",
																	"disabled": true
																},
																{
																	"key": "take",
																	"value": "20",
																	"disabled": true
																},
																{
																	"key": "page",
																	"value": "1",
																	"disabled": true
																},
																{
																	"key": "gameSlug",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "quick-stats",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/dashboard/quick-stats?startDate=2025-03-04T00:00:00.000Z&endDate=2025-03-04T23:59:59.000Z",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"dashboard",
														"quick-stats"
													],
													"query": [
														{
															"key": "query",
															"value": "[\"Ngr\"]",
															"disabled": true
														},
														{
															"key": "startDate",
															"value": "2025-03-04T00:00:00.000Z"
														},
														{
															"key": "endDate",
															"value": "2025-03-04T23:59:59.000Z"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "games-stats",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNGIwN2VjMWYtZTQ0My00OWFkLTk3OTAtODY1YzExYzNjNmQwIiwic0tleSI6IjE2NWViYTg4LTZjYjUtNGY1My05MTRkLTY0NGIyZmYzYjE1ZiIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDI4OTQ2NjcsImV4cCI6MTc0Mjk4MTA2N30.8a7z393Gp5TFiOpLSdAUy0Zw-T10RXZEzMYn2pqRW4w",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/dashboard/games-stats?startDate=2025-03-25T00:00:00.000&endDate=2025-03-25T23:59:59.000&games=[\"speed-roulette\"]",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"dashboard",
														"games-stats"
													],
													"query": [
														{
															"key": "query",
															"value": "[\"Ggr\"]",
															"disabled": true
														},
														{
															"key": "startDate",
															"value": "2025-03-25T00:00:00.000"
														},
														{
															"key": "endDate",
															"value": "2025-03-25T23:59:59.000"
														},
														{
															"key": "games",
															"value": "[\"plinko\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"keno\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"roulette\" ]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"limbo\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"mines\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"blackjack\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"speed-roulette\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get DASHBOARDS Finance Tab",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiMGI0MTJiM2UtZTZiMy00NjQ2LTk3NWUtNzM1M2Y1N2EyNDQzIiwic0tleSI6IjEwMzI4YzE4LTJjYzEtNDc4OS04NWZhLTU0MzdkNTU3YjgwMiIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDYxMTU0NDYsImV4cCI6MTc0NjIwMTg0Nn0.L0GOq3z9VAI7PCOKAthwSMxuMidWQiQEp9aKMTRD7Eo",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}/admin/dashboard/finance-tab?startDate=2025-02-28T22:00:00.000Z&endDate=2025-03-10T21:59:59.000Z&isStreamer=false",
													"host": [
														"{{stagingUrl}}"
													],
													"path": [
														"admin",
														"dashboard",
														"finance-tab"
													],
													"query": [
														{
															"key": "startDate",
															"value": "2025-02-28T22:00:00.000Z"
														},
														{
															"key": "endDate",
															"value": "2025-03-10T21:59:59.000Z"
														},
														{
															"key": "isStreamer",
															"value": "true",
															"disabled": true
														},
														{
															"key": "isStreamer",
															"value": "false"
														},
														{
															"key": "affiliateId",
															"value": "134",
															"disabled": true
														},
														{
															"key": "query",
															"value": "[\"ReferralsFTD\"]",
															"disabled": true
														},
														{
															"key": "adminTipsTags",
															"value": "[\"SALARY\",\"VIDEO_FILL\",\"TWITTER_GIVEAWAY\",\"CUSTOM_DEPOSIT_BONUS\",\"OTHER\",\"TESTING\",\"LOSSBACK\",\"STREAM_FILL\"]",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "games-charts",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZDBkMjViNGEtNTNhYi00NWUwLTk2NjYtNzZiYjk5NzNmODdlIiwic0tleSI6IjE2NWViYTg4LTZjYjUtNGY1My05MTRkLTY0NGIyZmYzYjE1ZiIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDI5ODExMDYsImV4cCI6MTc0MzA2NzUwNn0.He-gf7H7pmNFbUeaYMccP8TN1CKKx_VkWxyOkaSnBAI",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/dashboard/games-charts?games=[\"limbo\"]&startDate=2025-03-25T00:00:00.000&endDate=2025-03-26T23:59:59.000",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"dashboard",
														"games-charts"
													],
													"query": [
														{
															"key": "games",
															"value": "[\"plinko\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"roulette\" ]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"mines\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"blackjack\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"speed-roulette\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"keno\"]",
															"disabled": true
														},
														{
															"key": "games",
															"value": "[\"limbo\"]"
														},
														{
															"key": "startDate",
															"value": "2025-03-25T00:00:00.000"
														},
														{
															"key": "endDate",
															"value": "2025-03-26T23:59:59.000"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "admin rakeback",
									"item": [
										{
											"name": "rakeback/find-many",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"where\": {\r\n    \"currencyId\": \"BTC\",\r\n    \"userId\": 166\r\n  },\r\n  \"page\": 1,\r\n  \"take\": 20\r\n \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/rakeback/find-many",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"rakeback",
														"find-many"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "admin tips",
									"item": [
										{
											"name": "user tips",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNmZkYzE1OTctNTc5OC00NmQzLWE0N2QtZjU1ZTQwOWRmODdkIiwic0tleSI6ImE5OWE1MmFhLTY5NDgtNDNjMC1hNWQ0LTFkMjViY2IwZWM0OCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDMxNTAzNDEsImV4cCI6MTc0MzIzNjc0MX0.vsXRNTbp69Xato_U8q7stPQEVvMaWTphKNvYb2Vz87U",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/tips?page=1&take=20&sortBy=createdAt&sortDirection=asc&userId=33",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"tips"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														},
														{
															"key": "sortBy",
															"value": "amount",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "createdAt"
														},
														{
															"key": "sortDirection",
															"value": "asc"
														},
														{
															"key": "sortDirection",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "33"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "admin/admin-tips",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNmZkYzE1OTctNTc5OC00NmQzLWE0N2QtZjU1ZTQwOWRmODdkIiwic0tleSI6ImE5OWE1MmFhLTY5NDgtNDNjMC1hNWQ0LTFkMjViY2IwZWM0OCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDMxNTAzNDEsImV4cCI6MTc0MzIzNjc0MX0.vsXRNTbp69Xato_U8q7stPQEVvMaWTphKNvYb2Vz87U",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/admin-tips?page=1&take=20&sortBy=CREATED_AT&sortOrder=asc",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"admin-tips"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														},
														{
															"key": "sortBy",
															"value": "amount",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "CREATED_AT"
														},
														{
															"key": "sortOrder",
															"value": "asc"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "send tips",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNmZkYzE1OTctNTc5OC00NmQzLWE0N2QtZjU1ZTQwOWRmODdkIiwic0tleSI6ImE5OWE1MmFhLTY5NDgtNDNjMC1hNWQ0LTFkMjViY2IwZWM0OCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDMxNTAzNDEsImV4cCI6MTc0MzIzNjc0MX0.vsXRNTbp69Xato_U8q7stPQEVvMaWTphKNvYb2Vz87U",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": \"100\",\r\n  \"currencyId\": \"DBC\",\r\n  \"tag\": \"STREAM_FILL\",\r\n  \"recipientUserId\": 78,\r\n  \"notes\": \"string\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/admin-tips",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"admin-tips"
													]
												}
											},
											"response": []
										},
										{
											"name": "send tips deduct-balance",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": \"1.25\",\r\n  \"currencyId\": \"EVO\",\r\n  \"tag\": \"STREAM_FILL\",\r\n  \"recipientUserId\": 166,\r\n  \"notes\": \"EVO deduct-balance\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/admin-tips/deduct-balance",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"admin-tips",
														"deduct-balance"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Rakeback",
									"item": [
										{
											"name": "rakeback find-many",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sortOrder\": \"asc\",\n  \"where\": {\n    \"currencyId\": \"USDT\",\n    \"userId\": 9\n  },\n  \"page\": 1,\n  \"take\": 20,\n  \"sortBy\": {}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/rakeback/find-many",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"rakeback",
														"find-many"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "admin bets history",
									"item": [
										{
											"name": "admin bet history- old",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Проверяем статус ответа\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Парсим JSON ответ\r",
															"const jsonData = pm.response.json();\r",
															"\r",
															"// Проверяем, что все ключевые поля присутствуют в ответе\r",
															"pm.test(\"Response contains required top-level fields\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"take\");\r",
															"    pm.expect(jsonData).to.have.property(\"page\");\r",
															"    pm.expect(jsonData).to.have.property(\"total\");\r",
															"    pm.expect(jsonData).to.have.property(\"totalPages\");\r",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");\r",
															"});\r",
															"\r",
															"// Проверяем поля внутри объекта ставки\r",
															"pm.test(\"Data array contains required fields\", function () {\r",
															"    const bet = jsonData.data[0]; // Проверяем первый элемент массива\r",
															"    pm.expect(bet).to.have.property(\"createdAt\");\r",
															"    pm.expect(bet).to.have.property(\"updatedAt\");\r",
															"    pm.expect(bet).to.have.property(\"usdAmount\");\r",
															"    pm.expect(bet).to.have.property(\"usdPayout\");\r",
															"    pm.expect(bet).to.have.property(\"currencyId\");\r",
															"    pm.expect(bet).to.have.property(\"amount\");\r",
															"    pm.expect(bet).to.have.property(\"user\").that.is.an(\"object\");\r",
															"    pm.expect(bet).to.have.property(\"payout\");\r",
															"    pm.expect(bet).to.have.property(\"status\");\r",
															"    pm.expect(bet).to.have.property(\"game\").that.is.an(\"object\");\r",
															"});\r",
															"\r",
															"// Проверяем поля внутри объекта \"game\"\r",
															"pm.test(\"Game object contains required fields\", function () {\r",
															"    const game = jsonData.data[0].game;\r",
															"    pm.expect(game).to.have.property(\"name\");\r",
															"    pm.expect(game).to.have.property(\"slug\");\r",
															"    pm.expect(game).to.have.property(\"type\");\r",
															"    pm.expect(game).to.have.property(\"images\").that.is.an(\"object\");\r",
															"    pm.expect(game.images).to.have.property(\"imageUrl\");\r",
															"});\r",
															"\r",
															"// Проверяем поля внутри объекта \"user\"\r",
															"pm.test(\"User object contains required fields\", function () {\r",
															"    const user = jsonData.data[0].user;\r",
															"    pm.expect(user).to.have.property(\"username\");\r",
															"    pm.expect(user).to.have.property(\"isPrivate\");\r",
															"    pm.expect(user).to.have.property(\"avatar\");\r",
															"    pm.expect(user).to.have.property(\"vipLevel\");\r",
															"});\r",
															"\r",
															"// Проверяем время ответа\r",
															"pm.test(\"Response time is within acceptable range\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/bets?sortBy=CREATED_AT&sortOrder=desc&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"bets"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "CREATED_AT"
														},
														{
															"key": "sortBy",
															"value": "MULTIPLIER",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "USD_AMOUNT",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "USD_PAYOUT",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "desc"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "admin bet history",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Проверяем статус ответа\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Парсим JSON ответ\r",
															"const jsonData = pm.response.json();\r",
															"\r",
															"// Проверяем, что все ключевые поля присутствуют в ответе\r",
															"pm.test(\"Response contains required top-level fields\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"take\");\r",
															"    pm.expect(jsonData).to.have.property(\"page\");\r",
															"    pm.expect(jsonData).to.have.property(\"total\");\r",
															"    pm.expect(jsonData).to.have.property(\"totalPages\");\r",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");\r",
															"});\r",
															"\r",
															"// Проверяем поля внутри объекта ставки\r",
															"pm.test(\"Data array contains required fields\", function () {\r",
															"    const bet = jsonData.data[0]; // Проверяем первый элемент массива\r",
															"    pm.expect(bet).to.have.property(\"createdAt\");\r",
															"    pm.expect(bet).to.have.property(\"updatedAt\");\r",
															"    pm.expect(bet).to.have.property(\"usdAmount\");\r",
															"    pm.expect(bet).to.have.property(\"usdPayout\");\r",
															"    pm.expect(bet).to.have.property(\"currencyId\");\r",
															"    pm.expect(bet).to.have.property(\"amount\");\r",
															"    pm.expect(bet).to.have.property(\"user\").that.is.an(\"object\");\r",
															"    pm.expect(bet).to.have.property(\"payout\");\r",
															"    pm.expect(bet).to.have.property(\"status\");\r",
															"    pm.expect(bet).to.have.property(\"game\").that.is.an(\"object\");\r",
															"});\r",
															"\r",
															"// Проверяем поля внутри объекта \"game\"\r",
															"pm.test(\"Game object contains required fields\", function () {\r",
															"    const game = jsonData.data[0].game;\r",
															"    pm.expect(game).to.have.property(\"name\");\r",
															"    pm.expect(game).to.have.property(\"slug\");\r",
															"    pm.expect(game).to.have.property(\"type\");\r",
															"    pm.expect(game).to.have.property(\"images\").that.is.an(\"object\");\r",
															"    pm.expect(game.images).to.have.property(\"imageUrl\");\r",
															"});\r",
															"\r",
															"// Проверяем поля внутри объекта \"user\"\r",
															"pm.test(\"User object contains required fields\", function () {\r",
															"    const user = jsonData.data[0].user;\r",
															"    pm.expect(user).to.have.property(\"username\");\r",
															"    pm.expect(user).to.have.property(\"isPrivate\");\r",
															"    pm.expect(user).to.have.property(\"avatar\");\r",
															"    pm.expect(user).to.have.property(\"vipLevel\");\r",
															"});\r",
															"\r",
															"// Проверяем время ответа\r",
															"pm.test(\"Response time is within acceptable range\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjdhNWQ3NDEtYjliYy00YTQwLWI3NTYtNTM5NDRjMDVmN2Q5Iiwic0tleSI6IjM4NjAzN2JkLTc4MDktNDM4OC05Y2Q3LWRiN2M4NDJhMWU3YyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE5NDA2ODIsImV4cCI6MTc0MjAyNzA4Mn0.3ry-umqry-5SvbickLDGNyWrD7KeAyUFBp_jb3BWH88",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "// {\r\n//   \"sortBy\": \"CREATED_AT\",\r\n//   \"sortOrder\": \"desc\",\r\n//   \"where\": {\r\n//     \"gameId\": 0,\r\n//     \"status\": \"SETTLED\",\r\n//     \"userId\": 0,\r\n//     \"currencyId\": \"EVO\",\r\n//     \"multiplier\": {\r\n//       \"lt\": 0,\r\n//       \"gt\": 0,\r\n//       \"lte\": 0,\r\n//       \"gte\": 0,\r\n//       \"equals\": 0\r\n//     },\r\n//     \"usdAmount\": {\r\n//       \"lt\": \"1.25\",\r\n//       \"gt\": \"1.25\",\r\n//       \"lte\": \"1.25\",\r\n//       \"gte\": \"1.25\",\r\n//       \"equals\": \"1.25\"\r\n//     },\r\n//     \"usdPayout\": {\r\n//       \"lt\": \"1.25\",\r\n//       \"gt\": \"1.25\",\r\n//       \"lte\": \"1.25\",\r\n//       \"gte\": \"1.25\",\r\n//       \"equals\": \"1.25\"\r\n//     },\r\n//     \"createdAt\": {\r\n//       \"lt\": \"2025-03-05T13:00:19.674Z\",\r\n//       \"gt\": \"2025-03-05T13:00:19.674Z\",\r\n//       \"lte\": \"2025-03-05T13:00:19.674Z\",\r\n//       \"gte\": \"2025-03-05T13:00:19.674Z\"\r\n//     },\r\n//     \"amount\": {\r\n//       \"lt\": \"1.25\",\r\n//       \"gt\": \"1.25\",\r\n//       \"lte\": \"1.25\",\r\n//       \"gte\": \"1.25\",\r\n//       \"equals\": \"1.25\"\r\n//     },\r\n//     \"payout\": {\r\n//       \"lt\": \"1.25\",\r\n//       \"gt\": \"1.25\",\r\n//       \"lte\": \"1.25\",\r\n//       \"gte\": \"1.25\",\r\n//       \"equals\": \"1.25\"\r\n//     },\r\n//     \"gameIdentity\": {\r\n//       \"providerId\": {\r\n//         \"lt\": 0,\r\n//         \"gt\": 0,\r\n//         \"lte\": 0,\r\n//         \"gte\": 0,\r\n//         \"equals\": 0\r\n//       },\r\n//       \"provider\": {\r\n//         \"id\": {\r\n//           \"lt\": 0,\r\n//           \"gt\": 0,\r\n//           \"lte\": 0,\r\n//           \"gte\": 0,\r\n//           \"equals\": 0\r\n//         },\r\n//         \"slug\": {\r\n//           \"mode\": \"default\",\r\n//           \"equals\": \"string\",\r\n//           \"in\": [\r\n//             \"string\"\r\n//           ],\r\n//           \"notIn\": [\r\n//             \"string\"\r\n//           ],\r\n//           \"lt\": \"string\",\r\n//           \"lte\": \"string\",\r\n//           \"gt\": \"string\",\r\n//           \"gte\": \"string\",\r\n//           \"contains\": \"string\",\r\n//           \"startsWith\": \"string\",\r\n//           \"endsWith\": \"string\",\r\n//           \"not\": \"string\"\r\n//         }\r\n//       }\r\n//     }\r\n//   },\r\n//   \"page\": 1,\r\n//   \"take\": 20\r\n// }\r\n\r\n// lt - less than (<)\r\n// gt - greater than (>)\r\n// lte - less than or equal to (<=)\r\n// gte - greater than or equal to (>=)\r\n\r\n{\r\n  \"where\": {\r\n    \"createdAt\": {\r\n       \"lte\": \"2025-03-14T10:13:13.000Z\",\r\n       \"gte\": \"2025-03-13T22:00:00.000Z\"\r\n     }\r\n     }\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/bets",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"bets"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "CREATED_AT",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "MULTIPLIER",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "USD_AMOUNT",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "USD_PAYOUT",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"disabled": true
														},
														{
															"key": "take",
															"value": "20",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "admin audit",
									"item": [
										{
											"name": "GET admin audit",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user/admin-audit?userId=41&reqType=[\"Informational\",\"Successful\",\"Redirection\",\"Client_Error\",\"Server_Error\"]",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user",
														"admin-audit"
													],
													"query": [
														{
															"key": "userId",
															"value": "41"
														},
														{
															"key": "reqType",
															"value": "[\"Informational\",\"Successful\",\"Redirection\",\"Client_Error\",\"Server_Error\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "admin- audit - logs",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZGM0YzNjOGMtNTE3Mi00MDhhLTg2ZmQtNmM4ZTlhMmViNDAwIiwic0tleSI6IjM4MWRmZWU3LTU2MDUtNDE1OS1iYjgzLWIzYmI0ZTdjNDgxOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDIyMDAwODcsImV4cCI6MTc0MjI4NjQ4N30.yQgMwIY3MNbqINYsZhEPsQydvsWcQ7NcB9nuccDmGz8",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "?page=1&take=20&reqType",
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														},
														{
															"key": "userId",
															"value": null,
															"disabled": true
														},
														{
															"key": "reqType",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "affiliate",
									"item": [
										{
											"name": "admin affiliate",
											"item": [
												{
													"name": "levels",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessBOToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/affiliate/levels",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"affiliate",
																"levels"
															]
														}
													},
													"response": []
												},
												{
													"name": "affiliate/referrals",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessBOToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"sortBy\": \"userId\",\r\n  \"sortOrder\": \"desc\",\r\n  \"where\": {\r\n    \"username\": \"nebajis208\"  },\r\n  \"page\": 1,\r\n  \"take\": 20\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}admin/affiliate",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"affiliate"
															]
														}
													},
													"response": []
												},
												{
													"name": "users",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessBOToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"sortBy\": \"CREATED_AT\",\r\n  \"sortOrder\": \"desc\",\r\n  \"where\": {\r\n    \"ownerId\": 33\r\n  },\r\n  \"page\": 1,\r\n  \"take\": 20\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}admin/affiliate/users",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"affiliate",
																"users"
															]
														}
													},
													"response": []
												},
												{
													"name": "affiliate/find-one",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessBOToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"where\": {\r\n    \"userId\": 9\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}admin/affiliate/find-one",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"affiliate",
																"find-one"
															]
														}
													},
													"response": []
												},
												{
													"name": "affiliate/find-one-extended",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNmY3NTYzYzctZWRiOS00MTI0LTg0NmMtYWIxZjliNDRkZjc3Iiwic0tleSI6IjNlOGJhNzg5LTgzZWItNDUwMy04MmFmLTZkYmVlOGE5NjczMyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQwMjI3MzgsImV4cCI6MTc0NDEwOTEzOH0.AO0o-5UwSlF1zY_t-8SX28vL2q3jS2a4smy2R-m_yeY",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"where\": {\r\n    \"userId\": 33\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}admin/affiliate/find-one-extended",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"affiliate",
																"find-one-extended"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "streamer affiliate",
											"item": [
												{
													"name": "affiliate/streamer",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNmY3NTYzYzctZWRiOS00MTI0LTg0NmMtYWIxZjliNDRkZjc3Iiwic0tleSI6IjNlOGJhNzg5LTgzZWItNDUwMy04MmFmLTZkYmVlOGE5NjczMyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQwMjI3MzgsImV4cCI6MTc0NDEwOTEzOH0.AO0o-5UwSlF1zY_t-8SX28vL2q3jS2a4smy2R-m_yeY",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"sortBy\": \"referrals\",\r\n  \"sortOrder\": \"desc\",\r\n  \"page\": 1,\r\n  \"take\": 20\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}admin/affiliate/streamer",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"affiliate",
																"streamer"
															]
														}
													},
													"response": []
												},
												{
													"name": "streamer/?id",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessBOToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{stagingUrl}}admin/affiliate/streamer/33",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"affiliate",
																"streamer",
																"33"
															],
															"query": [
																{
																	"key": "id",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "streamer/referrals",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{accessBOToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"sortOrder\": \"asc\",\r\n  \"where\": {\r\n    \"affiliateCode\": {\r\n      \"ownerId\": 33\r\n    }\r\n  },\r\n  \"page\": 1,\r\n  \"take\": 20,\r\n  \"sortBy\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{stagingUrl}}admin/affiliate/streamer/referrals",
															"host": [
																"{{stagingUrl}}admin"
															],
															"path": [
																"affiliate",
																"streamer",
																"referrals"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "admin/block/withdrowals",
									"item": [
										{
											"name": "admin/withdrowals-bllock",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/withdrowals-block/?userId={{user_ID}}",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"withdrowals-block",
														""
													],
													"query": [
														{
															"key": "userId",
															"value": "{{user_ID}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "accounting",
									"item": [
										{
											"name": "admin/accounting/transactions",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessBOToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"sortBy\": \"CREATED_AT\",\r\n  \"sortOrder\": \"desc\",\r\n  \"where\": {\r\n    \"tag\": \"DEPOSIT\",\r\n    // \"createdAt\": {\r\n    //   \"lt\": \"2025-02-21T08:57:03.836Z\",\r\n    //   \"gt\": \"2025-02-21T08:57:03.836Z\",\r\n    //   \"lte\": \"2025-02-21T08:57:03.836Z\",\r\n    //   \"gte\": \"2025-02-21T08:57:03.836Z\"\r\n    // },\r\n    \"userId\": 13\r\n    // \"amount\": {\r\n    //   \"lt\": \"1.25\",\r\n    //   \"gt\": \"1.25\",\r\n    //   \"lte\": \"1.25\",\r\n    //   \"gte\": \"1.25\",\r\n    //   \"equals\": \"1.25\"\r\n    // }\r\n  },\r\n  \"page\": 1,\r\n  \"take\": 20\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/accounting/transactions",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"accounting",
														"transactions"
													]
												}
											},
											"response": []
										},
										{
											"name": "accounting/usd-balance/",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzdkODUwYjUtMWZhZi00NzYwLTg1MTgtNjA3OTAxMDQwMDI0Iiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM1OTY0MDcsImV4cCI6MTc0MzY4MjgwN30.OleVxJgSJXISyZKpptGgWsYnZSGaivBMcF0gU5XEy6I",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/accounting/balances?userId=33",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"accounting",
														"balances"
													],
													"query": [
														{
															"key": "userId",
															"value": "33"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "vault",
									"item": [
										{
											"name": "vault-balances",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzdkODUwYjUtMWZhZi00NzYwLTg1MTgtNjA3OTAxMDQwMDI0Iiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM1OTY0MDcsImV4cCI6MTc0MzY4MjgwN30.OleVxJgSJXISyZKpptGgWsYnZSGaivBMcF0gU5XEy6I",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/accounting/vault-balances?userId=33",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"accounting",
														"vault-balances"
													],
													"query": [
														{
															"key": "userId",
															"value": "33"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "notes",
									"item": [
										{
											"name": "admin/user-notes",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzdkODUwYjUtMWZhZi00NzYwLTg1MTgtNjA3OTAxMDQwMDI0Iiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM1OTY0MDcsImV4cCI6MTc0MzY4MjgwN30.OleVxJgSJXISyZKpptGgWsYnZSGaivBMcF0gU5XEy6I",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"riskLevel\": \"HIGH\",\r\n  \"note\": \"To write is to breathe — especially for those who find comfort, strength, or a voice in words. Sometimes a single line can change a mood, spark a thought, or even shift an entire life. A writer is an observer, an artist, a philosopher, and a dreamer all at once. They take ordinary words and turn them into something magical that touches the reader’s soul.Inspiration is unpredictable. It may arrive in the morning with the smell of coffee, in the afternoon after a brief chat with a stranger, or at night when the world sleeps and you're alone with a notebook, writing down thoughts that won’t let go. Sometimes the text flows like a river, and sometimes each word must be pulled from deep within. But it’s in those moments that something real is born — honest, deep, alive.Reading and writing build a bridge between souls. People from different corners of the world, from different times and cultures, can understand one another, share emotions, fears, and hopes. That is the true power of literature. It heals, teaches, inspires, and reminds you that you are not alone — even if only for a few pages\",\r\n  \"userId\": 33\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/user-notes",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-notes"
													]
												}
											},
											"response": []
										},
										{
											"name": "user-notes",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzdkODUwYjUtMWZhZi00NzYwLTg1MTgtNjA3OTAxMDQwMDI0Iiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM1OTY0MDcsImV4cCI6MTc0MzY4MjgwN30.OleVxJgSJXISyZKpptGgWsYnZSGaivBMcF0gU5XEy6I",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user-notes?sortBy=createdAt&sortOrder=asc&riskLevel=MEDIUM&page=1&take=10",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-notes"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "createdAt",
															"description": "createdAt, updatedAt, riskLevel"
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"description": "asc, desc"
														},
														{
															"key": "search",
															"value": "ujenob55044",
															"disabled": true
														},
														{
															"key": "riskLevel",
															"value": "MEDIUM",
															"description": "NONE, LOW, MEDIUM, HIGH"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "user-notes",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzdkODUwYjUtMWZhZi00NzYwLTg1MTgtNjA3OTAxMDQwMDI0Iiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM1OTY0MDcsImV4cCI6MTc0MzY4MjgwN30.OleVxJgSJXISyZKpptGgWsYnZSGaivBMcF0gU5XEy6I",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"riskLevel\": \"MEDIUM\",\r\n  \"id\": 7,\r\n  \"note\": \"from high to medium\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/user-notes",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-notes"
													]
												}
											},
											"response": []
										},
										{
											"name": "user-notes",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzdkODUwYjUtMWZhZi00NzYwLTg1MTgtNjA3OTAxMDQwMDI0Iiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM1OTY0MDcsImV4cCI6MTc0MzY4MjgwN30.OleVxJgSJXISyZKpptGgWsYnZSGaivBMcF0gU5XEy6I",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}/admin/user-notes/7",
													"host": [
														"{{stagingUrl}}"
													],
													"path": [
														"admin",
														"user-notes",
														"7"
													]
												}
											},
											"response": []
										},
										{
											"name": "user-notes/id",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzdkODUwYjUtMWZhZi00NzYwLTg1MTgtNjA3OTAxMDQwMDI0Iiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM1OTY0MDcsImV4cCI6MTc0MzY4MjgwN30.OleVxJgSJXISyZKpptGgWsYnZSGaivBMcF0gU5XEy6I",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user-notes/6",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-notes",
														"6"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ban",
									"item": [
										{
											"name": "ban user",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjhlZjA5OTEtNTc5ZC00MTczLTliMGQtMjQ5NjhjYzNiMzEyIiwic0tleSI6IjgwNWQ3ZTM0LTAxZGEtNDYwYi04NjkyLTg0NjVlZjdhYjhkOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM0OTk1OTksImV4cCI6MTc0MzU4NTk5OX0.ZBjgyJGCXoV6ejfzNYYqIyiOQ-atvsUPgp1WZQVnrCI",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user/{id}/ban",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user",
														"{id}",
														"ban"
													]
												}
											},
											"response": []
										},
										{
											"name": "un ban",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzdkODUwYjUtMWZhZi00NzYwLTg1MTgtNjA3OTAxMDQwMDI0Iiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM1OTY0MDcsImV4cCI6MTc0MzY4MjgwN30.OleVxJgSJXISyZKpptGgWsYnZSGaivBMcF0gU5XEy6I",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user/{id}/unban",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user",
														"{id}",
														"unban"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "promocodes",
									"item": [
										{
											"name": "promo",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}/admin/promo?sortBy=createdAt&sortOrder=asc&page=4&take=20",
													"host": [
														"{{stagingUrl}}"
													],
													"path": [
														"admin",
														"promo"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "createdAt"
														},
														{
															"key": "sortBy",
															"value": "claimedTimes",
															"disabled": true
														},
														{
															"key": "sortOrder",
															"value": "asc"
														},
														{
															"key": "sortOrder",
															"value": "desc",
															"disabled": true
														},
														{
															"key": "isActive",
															"value": "true",
															"disabled": true
														},
														{
															"key": "isActive",
															"value": "false",
															"disabled": true
														},
														{
															"key": "code",
															"value": null,
															"disabled": true
														},
														{
															"key": "affiliateCode",
															"value": "md117one",
															"disabled": true
														},
														{
															"key": "page",
															"value": "4"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "promo create/create",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": \"20\",\r\n  \"currencyId\": \"DBC\",\r\n  \"minKYCLevelToClaim\": \"LEVEL_1\",\r\n  \"minTotalWagerUsdToClaim\": \"3\",\r\n  \"minTotalDepositUsdToClaim\": \"4\",\r\n  \"title\": \"testPromo1\",\r\n  \"code\": \"testPromo1\",\r\n  \"isHidden\": true,\r\n  \"isActive\": true,\r\n  \"expiresAt\": \"2025-04-11T11:58:21.027Z\",\r\n  \"claimsLeft\": 0,\r\n  \"minVipLevelToClaim\": 2,\r\n  \"affiliateCodeToClaim\": \"md1170ne\",\r\n  \"lockWithdrawOnClaimHours\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/promo",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo"
													]
												}
											},
											"response": []
										},
										{
											"name": "user-promo",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user-promo?sortBy=createdAt&sortOrder=asc&status=COMPLETED&page =1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-promo"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "createdAt"
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"description": "desc"
														},
														{
															"key": "userId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "COMPLETED",
															"description": "IN_PROGRESS, COMPLETED, CANCELLED"
														},
														{
															"key": "promoId",
															"value": "",
															"disabled": true
														},
														{
															"key": "promoCode",
															"value": "",
															"disabled": true
														},
														{
															"key": "page ",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "cancel promo",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNTkzNjUwZDItZThiMS00YjI0LWJlZmUtNjZhZDFkYWYxMmM4Iiwic0tleSI6Ijc0ZmJjYzVhLTFlNDAtNDFlZS04ZTdlLWM3NDNmNmVjNjgxZCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyMDQ5ODgsImV4cCI6MTc0NDI5MTM4OH0.rZ0eUaTjWRl_VVHjfii1qOA_k_8MT4dPTXkdogkbOkw",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/user-promo/5d408ee8-15f2-4a87-b715-05cded5400ee",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"user-promo",
														"5d408ee8-15f2-4a87-b715-05cded5400ee"
													]
												}
											},
											"response": []
										},
										{
											"name": "promo/{id}",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/promo/a6d730ae-8d81-48f4-a4e1-3c6f95e6340e",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo",
														"a6d730ae-8d81-48f4-a4e1-3c6f95e6340e"
													]
												}
											},
											"response": []
										},
										{
											"name": "promo/id",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": \"10\",\r\n  \"currencyId\": \"DBC\",\r\n  \"minKYCLevelToClaim\": \"LEVEL_1\",\r\n  \"minTotalWagerUsdToClaim\": \"1.25\",\r\n  \"minTotalDepositUsdToClaim\": \"1.25\",\r\n  \"title\": \"promoupdate\",\r\n  \"code\": \"promoDima\",\r\n  \"isHidden\": true,\r\n  \"isActive\": true,\r\n  \"expiresAt\": \"2025-04-12T12:29:51.918Z\",\r\n  \"claimsLeft\": 1,\r\n  \"minVipLevelToClaim\": 1,\r\n  \"affiliateCodeToClaim\": \"md1170ne\",\r\n  \"lockWithdrawOnClaimHours\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/promo/a6d730ae-8d81-48f4-a4e1-3c6f95e6340e",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo",
														"a6d730ae-8d81-48f4-a4e1-3c6f95e6340e"
													]
												}
											},
											"response": []
										},
										{
											"name": "deactivate promo",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/promo/a6d730ae-8d81-48f4-a4e1-3c6f95e6340e",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo",
														"a6d730ae-8d81-48f4-a4e1-3c6f95e6340e"
													]
												}
											},
											"response": []
										},
										{
											"name": "promo/many",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNzhiNzEwZDItYjcwYy00OTAzLTgzY2EtMjg4OGQ3NGZiMWFjIiwic0tleSI6IjNlYmQ2MzI3LTE3NmQtNGM1ZC1hMmNmLTcyNTk0N2VkYmE0NyIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDQyOTI0MTQsImV4cCI6MTc0NDM3ODgxNH0.Tu5Xug1bQBUrTiMfBDyYznW8IJsXyv8fet5fdN5Zs_Q",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": \"11\",\r\n  \"currencyId\": \"DBC\",\r\n  \"minKYCLevelToClaim\": \"LEVEL_2\",\r\n  \"minTotalWagerUsdToClaim\": \"1.25\",\r\n  \"minTotalDepositUsdToClaim\": \"1.25\",\r\n  \"count\": 10,\r\n  \"title\": \"dimaPromo\",\r\n  \"addTitleSeries\": true,\r\n  \"isHidden\": true,\r\n  \"isActive\": true,\r\n  \"expiresAt\": \"2025-04-13T12:42:35.578Z\",\r\n  \"claimsLeft\": 0,\r\n  \"minVipLevelToClaim\": 2,\r\n  \"affiliateCodeToClaim\": \"md1170ne\",\r\n  \"lockWithdrawOnClaimHours\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/promo/many",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo",
														"many"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "vip admin program",
									"item": [
										{
											"name": "vip-program/all",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNTlhNWExYzYtYWRjOC00NTQ1LThhZDEtMTY5M2U1OTg0YWMxIiwic0tleSI6IjkxOTU2MjI0LTFmNWYtNGNjNC1hMmNhLTY5ZDcyZjdhODFhOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDY3ODczNjcsImV4cCI6MTc0Njg3Mzc2N30.KwDkb-yoljMV4_Qoj44Tm2yoc7CKjsdmI7qLpEBVheI",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/vip-program/all?sortBy=UPDATED_AT&sortOrder=asc&status=ACTIVE&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"vip-program",
														"all"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "UPDATED_AT",
															"description": "CREATED_AT, UPDATED_AT"
														},
														{
															"key": "sortOrder",
															"value": "asc",
															"description": "asc, desc"
														},
														{
															"key": "status",
															"value": "ACTIVE",
															"description": "INBOX, ACTIVE, ONHOLD, REJECTED"
														},
														{
															"key": "userId",
															"value": null,
															"disabled": true
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/vip-program/3",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNTlhNWExYzYtYWRjOC00NTQ1LThhZDEtMTY5M2U1OTg0YWMxIiwic0tleSI6IjkxOTU2MjI0LTFmNWYtNGNjNC1hMmNhLTY5ZDcyZjdhODFhOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDY3ODczNjcsImV4cCI6MTc0Njg3Mzc2N30.KwDkb-yoljMV4_Qoj44Tm2yoc7CKjsdmI7qLpEBVheI",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/vip-program/3",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"vip-program",
														"3"
													]
												}
											},
											"response": []
										},
										{
											"name": "vip-program/3",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNTlhNWExYzYtYWRjOC00NTQ1LThhZDEtMTY5M2U1OTg0YWMxIiwic0tleSI6IjkxOTU2MjI0LTFmNWYtNGNjNC1hMmNhLTY5ZDcyZjdhODFhOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDY3ODczNjcsImV4cCI6MTc0Njg3Mzc2N30.KwDkb-yoljMV4_Qoj44Tm2yoc7CKjsdmI7qLpEBVheI",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/vip-program/3",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"vip-program",
														"3"
													]
												}
											},
											"response": []
										},
										{
											"name": "vip-program/1/status",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiNTlhNWExYzYtYWRjOC00NTQ1LThhZDEtMTY5M2U1OTg0YWMxIiwic0tleSI6IjkxOTU2MjI0LTFmNWYtNGNjNC1hMmNhLTY5ZDcyZjdhODFhOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDY3ODczNjcsImV4cCI6MTc0Njg3Mzc2N30.KwDkb-yoljMV4_Qoj44Tm2yoc7CKjsdmI7qLpEBVheI",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"status\": \"ACTIVE\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/vip-program/1/status",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"vip-program",
														"1",
														"status"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "depo-bonus",
									"item": [
										{
											"name": "depo bonus create",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjk1NDdjZGQtMmNkMS00N2M4LWI5ZTgtY2I4Yzk1ZWE4ZTdiIiwic0tleSI6IjJiZDgyNDkzLTFmOWUtNGI1YS05NDBlLTM1MjQ1MzQ5ZDUxOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDgxODM4MTIsImV4cCI6MTc0ODI3MDIxMn0.eGZI_106Tn_RVh20CzO4ZkkGJuZLAPxsbKyXXKaKwig",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"minDepositUsdToActivate\": \"1.25\",\r\n  \"maxBonusUsdAmount\": \"1.25\",\r\n  \"title\": \"string\",\r\n  \"description\": \"string\",\r\n  \"code\": \"string\",\r\n  \"publicContent\": {},\r\n  \"isHidden\": true,\r\n  \"isActive\": true,\r\n  \"isPublic\": true,\r\n  \"expiresAt\": \"2025-05-26T09:24:26.931Z\",\r\n  \"lockWithdrawOnClaimHours\": 0,\r\n  \"bonusMultiplier\": 0,\r\n  \"timeSecondsToComplete\": 0,\r\n  \"wagerMultiplierToComplete\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/promo/deposit",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo",
														"deposit"
													]
												}
											},
											"response": []
										},
										{
											"name": "depo bonus update",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjk1NDdjZGQtMmNkMS00N2M4LWI5ZTgtY2I4Yzk1ZWE4ZTdiIiwic0tleSI6IjJiZDgyNDkzLTFmOWUtNGI1YS05NDBlLTM1MjQ1MzQ5ZDUxOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDgxODM4MTIsImV4cCI6MTc0ODI3MDIxMn0.eGZI_106Tn_RVh20CzO4ZkkGJuZLAPxsbKyXXKaKwig",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"minDepositUsdToActivate\": \"1.25\",\r\n  \"maxBonusUsdAmount\": \"1.25\",\r\n  \"title\": \"string\",\r\n  \"description\": \"string\",\r\n  \"code\": \"string\",\r\n  \"publicContent\": {},\r\n  \"isHidden\": true,\r\n  \"isActive\": true,\r\n  \"isPublic\": true,\r\n  \"expiresAt\": \"2025-05-26T09:25:47.510Z\",\r\n  \"lockWithdrawOnClaimHours\": 0,\r\n  \"bonusMultiplier\": 0,\r\n  \"timeSecondsToComplete\": 0,\r\n  \"wagerMultiplierToComplete\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/promo/deposit/{id}",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo",
														"deposit",
														"{id}"
													]
												}
											},
											"response": []
										},
										{
											"name": "depo bonus game white list",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjk1NDdjZGQtMmNkMS00N2M4LWI5ZTgtY2I4Yzk1ZWE4ZTdiIiwic0tleSI6IjJiZDgyNDkzLTFmOWUtNGI1YS05NDBlLTM1MjQ1MzQ5ZDUxOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDgxODM4MTIsImV4cCI6MTc0ODI3MDIxMn0.eGZI_106Tn_RVh20CzO4ZkkGJuZLAPxsbKyXXKaKwig",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{stagingUrl}}admin/promo/deposit/{id}/games?id&page=1&take=20",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo",
														"deposit",
														"{id}",
														"games"
													],
													"query": [
														{
															"key": "id",
															"value": null
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "depo bonus game whitelist. 50 games per request.",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjk1NDdjZGQtMmNkMS00N2M4LWI5ZTgtY2I4Yzk1ZWE4ZTdiIiwic0tleSI6IjJiZDgyNDkzLTFmOWUtNGI1YS05NDBlLTM1MjQ1MzQ5ZDUxOCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDgxODM4MTIsImV4cCI6MTc0ODI3MDIxMn0.eGZI_106Tn_RVh20CzO4ZkkGJuZLAPxsbKyXXKaKwig",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gameWhitelist\": [\r\n    {\r\n      \"wagerMultiplier\": 0,\r\n      \"maxBetAmount\": \"1.25\",\r\n      \"enabled\": true,\r\n      \"gameId\": 0\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{stagingUrl}}admin/promo/deposit/{id}/games",
													"host": [
														"{{stagingUrl}}admin"
													],
													"path": [
														"promo",
														"deposit",
														"{id}",
														"games"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "admin user id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessBOToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}admin/user/26",
											"host": [
												"{{stagingUrl}}admin"
											],
											"path": [
												"user",
												"26"
											]
										}
									},
									"response": []
								},
								{
									"name": "admin user all",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZDdiMjc0NzItNzE3Zi00NTAwLWExZWEtMGEyZjhjMjkwYzg2Iiwic0tleSI6IjEyN2RmMGM2LTFmNTgtNDNkNC04NGMzLTRhMzBlZTFhZDI3OSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDE3OTc5NTMsImV4cCI6MTc0MTg4NDM1M30.Y9cAzzWiELqLq5tKcvuzRSXf951JsKJVBacphETUMGM",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sortBy\": \"id\",\r\n  \"sortOrder\": \"asc\",\r\n  \"isBanned\": true,\r\n  \"withPermissions\": false,\r\n  \"withRoles\": false,\r\n  \"role\": \"User\",\r\n  \"withBalance\": false,\r\n  \"withStatsUsd\": false,\r\n  \"search\": \"string\",\r\n  \"where\": {\r\n    \"vipLevel\": {\r\n      \"lt\": 0,\r\n      \"gt\": 0,\r\n      \"lte\": 0,\r\n      \"gte\": 0,\r\n      \"equals\": 0\r\n    },\r\n    \"statsUsd\": {\r\n      \"totalWagered\": {\r\n        \"lt\": \"1.25\",\r\n        \"gt\": \"1.25\",\r\n        \"lte\": \"1.25\",\r\n        \"gte\": \"1.25\",\r\n        \"equals\": \"1.25\"\r\n      },\r\n      \"ltv\": {\r\n        \"lt\": \"1.25\",\r\n        \"gt\": \"1.25\",\r\n        \"lte\": \"1.25\",\r\n        \"gte\": \"1.25\",\r\n        \"equals\": \"1.25\"\r\n      }\r\n    },\r\n    \"balanceEvo\": {\r\n      \"amount\": {\r\n        \"lt\": \"1.25\",\r\n        \"gt\": \"1.25\",\r\n        \"lte\": \"1.25\",\r\n        \"gte\": \"1.25\",\r\n        \"equals\": \"1.25\"\r\n      }\r\n    },\r\n    \"createdAt\": {\r\n      \"lt\": \"2025-03-20T09:45:18.631Z\",\r\n      \"gt\": \"2025-03-20T09:45:18.631Z\",\r\n      \"lte\": \"2025-03-20T09:45:18.631Z\",\r\n      \"gte\": \"2025-03-20T09:45:18.631Z\"\r\n    }\r\n  },\r\n  \"page\": 1,\r\n  \"take\": 20\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}admin/user/all",
											"host": [
												"{{stagingUrl}}admin"
											],
											"path": [
												"user",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "admin user id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZmViZDc5ZGYtODUwNC00MWIwLWExNTItYjExZDE2NzVkNWMzIiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM2ODUxMTMsImV4cCI6MTc0Mzc3MTUxM30.zPZu2rgdQ2N9N5_Wp-GAAv-uRvmjGV7Bwdo_JRxewNY",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isStreamer\": false\r\n  \r\n}\r\n// {\r\n//   \"username\": \"swagger\",\r\n//   \"isStaff\": true,\r\n//   \"isYoutuber\": true,\r\n//   \"customMinAffiliateLevel\": 0,\r\n//   \"isTest\": true,\r\n//   \"isStreamer\": true,\r\n//   \"canUseChat\": true,\r\n//   \"isPrivate\": true,\r\n//   \"isStreamerMode\": true,\r\n//   \"isEmailNotificationsEnabled\": true,\r\n//   \"steamTradeLink\": \"STEAM_TRADE_LINK_REGEX\"\r\n// }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}admin/user/33",
											"host": [
												"{{stagingUrl}}admin"
											],
											"path": [
												"user",
												"33"
											],
											"query": [
												{
													"key": "id",
													"value": "323",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "admin/userid/ballance",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessBOToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "x-otp",
												"value": "252575",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"balance\": \"8000000\",\r\n  \"currencyId\": \"EVO\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}admin/user/166/balance",
											"host": [
												"{{stagingUrl}}admin"
											],
											"path": [
												"user",
												"166",
												"balance"
											]
										}
									},
									"response": []
								},
								{
									"name": "registration-info/id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiZjk0ZTcyNTItYjU1MS00YzIxLWFhZjAtNGQ5MzcwZWJlZTVhIiwic0tleSI6IjgxNjk1OWI4LTExOTEtNDk2Ni05Njg5LTM1MTZjODViZDYwZSIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NDM3NzI1MzcsImV4cCI6MTc0Mzg1ODkzN30.2oRSzsSTbC1dLt3sEX0U2H8AAGpXb6uR7TYgwzttB5w",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}admin/registration-info/33",
											"host": [
												"{{stagingUrl}}admin"
											],
											"path": [
												"registration-info",
												"33"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2fa",
							"item": [
								{
									"name": "generate 2fa",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessBOToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}user/generate-2fa",
											"host": [
												"{{stagingUrl}}user"
											],
											"path": [
												"generate-2fa"
											]
										}
									},
									"response": []
								},
								{
									"name": "enabled-2fa",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJzS2V5IjoiYjMwOWJmYzMtN2Q2NC00NTIyLTgyODItODNhYWVlMTM4Y2ZmIiwic0lkIjoiZmY0OTNiMTktOGQ5MS00ZGM2LWI3NzItYjc2ZmRjMzdmZTFlIiwiaWF0IjoxNzQxMzM2NzcwLCJleHAiOjE3NDEzMzcwNzB9.hy84q2YJPN4U3nthJUtqG6y1_b9Q_A2__woJoFycHzY",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"otpPassword\": \"123121\",\r\n  \"mfaSecret\": \"EIXHMCTTCN5VWOSK\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}user/enable-2fa",
											"host": [
												"{{stagingUrl}}user"
											],
											"path": [
												"enable-2fa"
											]
										}
									},
									"response": []
								},
								{
									"name": "disable-2fa",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessBOToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}user/disable-2fa",
											"host": [
												"{{stagingUrl}}user"
											],
											"path": [
												"disable-2fa"
											]
										}
									},
									"response": []
								},
								{
									"name": "reset-2fa",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}user/reset-2fa",
											"host": [
												"{{stagingUrl}}user"
											],
											"path": [
												"reset-2fa"
											]
										}
									},
									"response": []
								},
								{
									"name": "/verify-2fa",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Получаем JSON-ответ\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"// Проверяем, что accessToken существует и содержит поле \"token\"\r",
													"pm.test(\"Response contains accessToken.token\", () => {\r",
													"    pm.expect(responseJson).to.have.property(\"accessToken\");\r",
													"    pm.expect(responseJson.accessToken).to.have.property(\"token\");\r",
													"});\r",
													"\r",
													"// Если accessToken и его поле token существуют, сохраняем токен в окружение\r",
													"if (responseJson.accessToken && responseJson.accessToken.token) {\r",
													"    pm.environment.set(\"accessBOToken\", responseJson.accessToken.token);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"token\": \"{{2faBtoken}}\",\r\n    \"mfaCode\": \"121652\"  // 6-значный код из 2FA приложения\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}auth/verify-2fa",
											"host": [
												"{{stagingUrl}}auth"
											],
											"path": [
												"verify-2fa"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bot Generator Copy",
							"item": [
								{
									"name": "Get All Bots",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiYjU5NDc4ZjItOGNkNC00YzA0LWI5YTgtZjBlOTg5YTYwNzdkIiwic0tleSI6IjM4ZDExY2UwLTM5NjktNDE2Yy1hZGEyLTU2YmYzMTE0YmJkMCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NTA4MzYyODgsImV4cCI6MTc1MDkyMjY4OH0.Vk1VEwAUDzB1jmqarnhZZVzbRh88sgBNdqFjJ2e_WpM",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}/admin/bot-activity/all",
											"host": [
												"{{stagingUrl}}"
											],
											"path": [
												"admin",
												"bot-activity",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get One Bots",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiYjU5NDc4ZjItOGNkNC00YzA0LWI5YTgtZjBlOTg5YTYwNzdkIiwic0tleSI6IjM4ZDExY2UwLTM5NjktNDE2Yy1hZGEyLTU2YmYzMTE0YmJkMCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NTA4MzYyODgsImV4cCI6MTc1MDkyMjY4OH0.Vk1VEwAUDzB1jmqarnhZZVzbRh88sgBNdqFjJ2e_WpM",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{stagingUrl}}/admin/bot-activity/one/1016",
											"host": [
												"{{stagingUrl}}"
											],
											"path": [
												"admin",
												"bot-activity",
												"one",
												"1016"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upsert Bot config",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiYjU5NDc4ZjItOGNkNC00YzA0LWI5YTgtZjBlOTg5YTYwNzdkIiwic0tleSI6IjM4ZDExY2UwLTM5NjktNDE2Yy1hZGEyLTU2YmYzMTE0YmJkMCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NTA4MzYyODgsImV4cCI6MTc1MDkyMjY4OH0.Vk1VEwAUDzB1jmqarnhZZVzbRh88sgBNdqFjJ2e_WpM",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isActive\": true,\r\n    \"type\": \"WHALE\",\r\n    \"behavior\": \"TRICKSTER\",\r\n    \"playDays\": [\r\n        \"MONDAY\",\r\n        \"THURSDAY\",\r\n        \"WEDNESDAY\",\r\n        \"FRIDAY\"\r\n    ],\r\n    \"userId\": 1011,\r\n    \"startTime\": \"10:36\",\r\n    \"games\": [\r\n        925,\r\n        926,\r\n        927,\r\n        929,\r\n         930,\r\n        931,\r\n        932,\r\n        1159,\r\n        1160,\r\n        1161,\r\n        1163,\r\n         1162\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}/admin/bot-activity/manage",
											"host": [
												"{{stagingUrl}}"
											],
											"path": [
												"admin",
												"bot-activity",
												"manage"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Bot config",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isActive\": false,\r\n  \"type\": \"WHALE\",\r\n  \"behavior\": \"STABLE\",\r\n  \"playDays\": [\"MONDAY\", \"WEDNESDAY\", \"FRIDAY\", \"THURSDAY\"],\r\n  \"userId\": 25,\r\n  \"startTime\": \"18:30\",\r\n\"games\": [12, 13, 14]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{TestApi}}/admin/bot-activity/manage",
											"host": [
												"{{TestApi}}"
											],
											"path": [
												"admin",
												"bot-activity",
												"manage"
											]
										}
									},
									"response": []
								},
								{
									"name": "ChangeBotToggle",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjczLCJuYW1lIjoidWplbm9iNTUwNDQiLCJlbWFpbCI6ImpvZmlrYTEwMTZAY2FsbXByb3MuY29tIiwic0lkIjoiYjU5NDc4ZjItOGNkNC00YzA0LWI5YTgtZjBlOTg5YTYwNzdkIiwic0tleSI6IjM4ZDExY2UwLTM5NjktNDE2Yy1hZGEyLTU2YmYzMTE0YmJkMCIsInJ0IjpmYWxzZSwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE3NTA4MzYyODgsImV4cCI6MTc1MDkyMjY4OH0.Vk1VEwAUDzB1jmqarnhZZVzbRh88sgBNdqFjJ2e_WpM",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isBot\": true,\r\n  \"userId\": 1016\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{stagingUrl}}/admin/bot-activity/bot-toggle",
											"host": [
												"{{stagingUrl}}"
											],
											"path": [
												"admin",
												"bot-activity",
												"bot-toggle"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "providers",
					"item": [
						{
							"name": "nolimit city",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.dropbet.com/casino/games?sortOrder=asc&sortBy=name&page=4&take=30&providerId=18512",
									"protocol": "https",
									"host": [
										"api",
										"dropbet",
										"com"
									],
									"path": [
										"casino",
										"games"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortBy",
											"value": "name"
										},
										{
											"key": "page",
											"value": "4"
										},
										{
											"key": "take",
											"value": "30"
										},
										{
											"key": "providerId",
											"value": "18512"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "evolution",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.dropbet.com/casino/games?sortOrder=asc&sortBy=name&page=1&take=30&providerId=18568",
									"protocol": "https",
									"host": [
										"api",
										"dropbet",
										"com"
									],
									"path": [
										"casino",
										"games"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortBy",
											"value": "name"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "take",
											"value": "30"
										},
										{
											"key": "providerId",
											"value": "18568"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ezugi",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.dropbet.com/casino/games?sortOrder=asc&sortBy=name&page=1&take=30&providerId=18565",
									"protocol": "https",
									"host": [
										"api",
										"dropbet",
										"com"
									],
									"path": [
										"casino",
										"games"
									],
									"query": [
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortBy",
											"value": "name"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "take",
											"value": "30"
										},
										{
											"key": "providerId",
											"value": "18565"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Проверка статуса ответа\r",
											"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
											"\r",
											"// Извлечение тела ответа\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Тесты на наличие токенов в ответе\r",
											"pm.test(\"Response has accessToken\", () => {\r",
											"    pm.expect(responseJson).to.have.property(\"accessToken\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has refreshToken\", () => {\r",
											"    pm.expect(responseJson).to.have.property(\"refreshToken\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has socketToken\", () => {\r",
											"    pm.expect(responseJson).to.have.property(\"socketToken\");\r",
											"});\r",
											"\r",
											"// Проверка свойств токенов\r",
											"pm.test(\"Access token has required fields\", () => {\r",
											"    pm.expect(responseJson.accessToken).to.have.property(\"token\");\r",
											"    pm.expect(responseJson.accessToken).to.have.property(\"expirationDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Refresh token has required fields\", () => {\r",
											"    pm.expect(responseJson.refreshToken).to.have.property(\"token\");\r",
											"    pm.expect(responseJson.refreshToken).to.have.property(\"expirationDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Socket token has required fields\", () => {\r",
											"    pm.expect(responseJson.socketToken).to.have.property(\"token\");\r",
											"    pm.expect(responseJson.socketToken).to.have.property(\"expirationDate\");\r",
											"});\r",
											"\r",
											"// Сохранение токенов в переменные окружения\r",
											"if (responseJson.accessToken) {\r",
											"    pm.environment.set(\"accessToken\", responseJson.accessToken.token);\r",
											"    pm.environment.set(\"accessTokenExpiration\", responseJson.accessToken.expirationDate);\r",
											"}\r",
											"\r",
											"if (responseJson.refreshToken) {\r",
											"    pm.environment.set(\"refreshToken\", responseJson.refreshToken.token);\r",
											"    pm.environment.set(\"refreshTokenExpiration\", responseJson.refreshToken.expirationDate);\r",
											"}\r",
											"\r",
											"if (responseJson.socketToken) {\r",
											"    pm.environment.set(\"socketToken\", responseJson.socketToken.token);\r",
											"    pm.environment.set(\"socketTokenExpiration\", responseJson.socketToken.expirationDate);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n//   \"email\": \"{{UserEmail}}\",\r\n  \"email\": \"bot3@mailto.plus\",\r\n  \"password\": \"Welcome123@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.dropbet.com/auth/sign-in",
									"protocol": "https",
									"host": [
										"api",
										"dropbet",
										"com"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "smoke",
			"item": [
				{
					"name": "sign up Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"// Извлечение тела запроса\r",
									"const requestBody = pm.request.body.raw;\r",
									"let requestJson = {};\r",
									"if (requestBody) {\r",
									"    try {\r",
									"        requestJson = JSON.parse(requestBody);\r",
									"    } catch (error) {\r",
									"        console.error(\"Error parsing request body:\", error);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Сохранение email и password из тела запроса\r",
									"const email = requestJson?.email;\r",
									"if (email) pm.environment.set(\"UserEmail\", email);\r",
									"\r",
									"const password = requestJson?.password;\r",
									"if (password) pm.environment.set(\"UserPassword\", password);\r",
									"\r",
									"// Извлечение тела ответа\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Тесты на наличие токенов в ответе\r",
									"pm.test(\"Response has accessToken\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"accessToken\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has refreshToken\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"refreshToken\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has socketToken\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"socketToken\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "is-capture-on",
								"value": "off",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Welcome123@\",\r\n  \"username\": \"{{$randomFirstName}}\",\r\n    \"isEmailNotificationsEnabled\": true,\r\n  \"language\": \"en-US\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}auth/sign-up",
							"host": [
								"{{stagingUrl}}auth"
							],
							"path": [
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
									"\r",
									"// Извлечение тела ответа\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Тесты на наличие токенов в ответе\r",
									"pm.test(\"Response has accessToken\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"accessToken\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has refreshToken\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"refreshToken\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has socketToken\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"socketToken\");\r",
									"});\r",
									"\r",
									"// Проверка свойств токенов\r",
									"pm.test(\"Access token has required fields\", () => {\r",
									"    pm.expect(responseJson.accessToken).to.have.property(\"token\");\r",
									"    pm.expect(responseJson.accessToken).to.have.property(\"expirationDate\");\r",
									"});\r",
									"\r",
									"pm.test(\"Refresh token has required fields\", () => {\r",
									"    pm.expect(responseJson.refreshToken).to.have.property(\"token\");\r",
									"    pm.expect(responseJson.refreshToken).to.have.property(\"expirationDate\");\r",
									"});\r",
									"\r",
									"pm.test(\"Socket token has required fields\", () => {\r",
									"    pm.expect(responseJson.socketToken).to.have.property(\"token\");\r",
									"    pm.expect(responseJson.socketToken).to.have.property(\"expirationDate\");\r",
									"});\r",
									"\r",
									"// Сохранение токенов в переменные окружения\r",
									"if (responseJson.accessToken) {\r",
									"    pm.environment.set(\"accessToken\", responseJson.accessToken.token);\r",
									"    pm.environment.set(\"accessTokenExpiration\", responseJson.accessToken.expirationDate);\r",
									"}\r",
									"\r",
									"if (responseJson.refreshToken) {\r",
									"    pm.environment.set(\"refreshToken\", responseJson.refreshToken.token);\r",
									"    pm.environment.set(\"refreshTokenExpiration\", responseJson.refreshToken.expirationDate);\r",
									"}\r",
									"\r",
									"if (responseJson.socketToken) {\r",
									"    pm.environment.set(\"socketToken\", responseJson.socketToken.token);\r",
									"    pm.environment.set(\"socketTokenExpiration\", responseJson.socketToken.expirationDate);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{UserEmail}}\",\r\n  \"password\": \"Welcome123@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}auth/sign-in",
							"host": [
								"{{stagingUrl}}auth"
							],
							"path": [
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
									"\r",
									"// Извлечение тела ответа\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Тесты на наличие токенов в ответе\r",
									"pm.test(\"Response has accessToken\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"accessToken\");\r",
									"});\r",
									"\r",
									"// Проверка свойств токенов\r",
									"pm.test(\"Access token has required fields\", () => {\r",
									"    pm.expect(responseJson.accessToken).to.have.property(\"token\");\r",
									"    pm.expect(responseJson.accessToken).to.have.property(\"expirationDate\");\r",
									"});\r",
									"\r",
									"// Сохранение токенов в переменные окружения\r",
									"if (responseJson.accessToken) {\r",
									"    pm.environment.set(\"accessBOToken\", responseJson.accessToken.token);\r",
									"    pm.environment.set(\"accessBOTokenExpiration\", responseJson.accessToken.expirationDate);\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"dev@admin.com\",\r\n  \"password\": \"MyPass123-\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.playebit-staging.com/auth/sign-in",
							"protocol": "https",
							"host": [
								"api",
								"playebit-staging",
								"com"
							],
							"path": [
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin user all Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"// Проверяем, что data содержит хотя бы один элемент и у него есть id\r",
									"if (pm.response.json().data && pm.response.json().data.length > 0) {\r",
									"    const firstBetId = pm.response.json().data[0].id;\r",
									"\r",
									"    if (firstBetId) {\r",
									"        pm.environment.set(\"betId\", firstBetId);\r",
									"        console.log(\"✅ Saved betId:\", firstBetId);\r",
									"    } else {\r",
									"        console.log(\"⚠️ id not found in the first entry.\");\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"⚠️ No data found in response!\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessBOToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}admin/user/all?sortBy=ltv&sortOrder=asc&withBalance=true&search={{UserEmail}}&page=1&take=20",
							"host": [
								"{{stagingUrl}}admin"
							],
							"path": [
								"user",
								"all"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "totalWagered",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "totalLoss",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "vipLevel",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "ltv"
								},
								{
									"key": "sortBy",
									"value": "balance",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "isBanned",
									"value": "true",
									"disabled": true
								},
								{
									"key": "isBanned",
									"value": "false",
									"disabled": true
								},
								{
									"key": "withPermissions",
									"value": "false",
									"disabled": true
								},
								{
									"key": "withPermissions",
									"value": "true",
									"disabled": true
								},
								{
									"key": "withRoles",
									"value": "false",
									"disabled": true
								},
								{
									"key": "withRoles",
									"value": "true",
									"disabled": true
								},
								{
									"key": "role",
									"value": "user",
									"disabled": true
								},
								{
									"key": "role",
									"value": "admin",
									"disabled": true
								},
								{
									"key": "role",
									"value": "superadmin",
									"disabled": true
								},
								{
									"key": "withBalance",
									"value": "true"
								},
								{
									"key": "withBalance",
									"value": "false",
									"disabled": true
								},
								{
									"key": "withStatsUsd",
									"value": "true",
									"disabled": true
								},
								{
									"key": "withStatsUsd",
									"value": "false",
									"disabled": true
								},
								{
									"key": "search",
									"value": "{{UserEmail}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "take",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "send tips Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessBOToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"amount\": \"10000\",\r\n  \"currencyId\": \"EVO\",\r\n  \"tag\": \"LOSSBACK\",\r\n  \"recipientUserId\": {{betId}},\r\n  \"notes\": \"EVO_D\"\r\n}\r\n\r\n//  Should be an enum:\r\n//     - STREAM_FILL\r\n//     - VIDEO_FILL\r\n//     - PRIVATE_LB_PAYOUT\r\n//     - LOSSBACK\r\n//     - TWITTER_GIVEAWAY\r\n//     - DISCORD_GIVEAWAY\r\n//     - PRIVATE_GIVEAWAY\r\n//     - CUSTOM_DEPOSIT_BONUS\r\n//     - SALARY\r\n//     - TESTING\r\n//     - OTHER",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}admin/admin-tips",
							"host": [
								"{{stagingUrl}}admin"
							],
							"path": [
								"admin-tips"
							]
						}
					},
					"response": []
				},
				{
					"name": "balances Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверяем, что ответ содержит массив\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each element has currencyId and amount\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"currencyId\");\r",
									"        pm.expect(item).to.have.property(\"amount\");\r",
									"    });\r",
									"});\r",
									"\r",
									"if (pm.response.json().data && pm.response.json().data.length > 0) {\r",
									"    const firstCurrencyId = pm.response.json().data[0].currencyId;\r",
									"\r",
									"    if (firstCurrencyId) {\r",
									"        pm.environment.set(\"currencyId\", firstCurrencyId);\r",
									"}\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}accounting/balances",
							"host": [
								"{{stagingUrl}}accounting"
							],
							"path": [
								"balances"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile? Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверяем, что все ожидаемые поля существуют\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Основные поля\r",
									"    const requiredFields = [\r",
									"        \"createdAt\", \"username\", \"isPrivate\", \"isStreamer\", \"vipLevel\", \"exp\",\r",
									"        \"email\", \"googleEmail\", \"steamId\", \"avatar\", \"roles\", \"permissions\",\r",
									"        \"isBanned\", \"emailVerified\", \"emailVerificationPending\",\r",
									"        \"isEmailNotificationsEnabled\", \"intercomToken\", \"kyc\"\r",
									"    ];\r",
									"    \r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(jsonData).to.have.property(field);\r",
									"    });\r",
									"\r",
									"    // Проверяем наличие вложенного объекта kyc и его поля\r",
									"    const kycFields = [\"level\", \"verificationPending\", \"gender\", \"countryCode\", \"dateOfBirth\", \"firstName\", \"lastName\"];\r",
									"    pm.expect(jsonData.kyc).to.have.keys(kycFields);\r",
									"});\r",
									"\r",
									"// Проверяем, что roles поле корректно\r",
									"pm.test(\"Roles field is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roles).to.be.an('array').that.includes('User');\r",
									"});\r",
									"\r",
									"// Проверяем значения логических полей\r",
									"pm.test(\"Boolean fields have correct values\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    const booleanFields = [\r",
									"        \"isPrivate\", \"isStreamer\", \"isBanned\", \r",
									"        \"emailVerified\", \"emailVerificationPending\", \r",
									"        \"isEmailNotificationsEnabled\"\r",
									"    ];\r",
									"\r",
									"    booleanFields.forEach(field => {\r",
									"        pm.expect(jsonData[field]).to.be.a('boolean');\r",
									"    });\r",
									"\r",
									"    // Проверяем вложенные логические поля\r",
									"    pm.expect(jsonData.kyc.verificationPending).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"// Проверяем корректность типов данных\r",
									"pm.test(\"Field data types are correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.createdAt).to.be.a('string');\r",
									"    pm.expect(jsonData.username).to.be.a('string');\r",
									"    pm.expect(jsonData.vipLevel).to.be.a('number');\r",
									"    pm.expect(jsonData.exp).to.be.a('string');\r",
									"    pm.expect(jsonData.email).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(jsonData.googleEmail).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(jsonData.steamId).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(jsonData.avatar).to.be.a('string');\r",
									"    pm.expect(jsonData.roles).to.be.an('array');\r",
									"    pm.expect(jsonData.permissions).to.be.an('array');\r",
									"    pm.expect(jsonData.intercomToken).to.be.a('string');\r",
									"\r",
									"    // Проверяем типы вложенных полей kyc\r",
									"    const kyc = jsonData.kyc;\r",
									"    pm.expect(kyc.level).to.be.a('string');\r",
									"    pm.expect(kyc.gender).to.be.a('string');\r",
									"    pm.expect(kyc.countryCode).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(kyc.dateOfBirth).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(kyc.firstName).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(kyc.lastName).to.satisfy(value => value === null || typeof value === 'string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}user/me",
							"host": [
								"{{stagingUrl}}user"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "plinko bet Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Извлечение JSON из ответа\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Проверка, что ответ содержит все необходимые поля с непустыми значениями\r",
									"pm.test(\"Response contains required fields with values\", function () {\r",
									"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"multiplier\").that.is.a(\"number\").and.is.not.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"betAmount\": \"11\",\r\n  \"rowsCount\": 16,\r\n  \"risk\": \"LOW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/plinko/bet",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"plinko",
								"bet"
							]
						}
					},
					"response": []
				},
				{
					"name": "limbo bet Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Проверяем структуру основного объекта\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"currencyId\");\r",
									"    pm.expect(jsonData).to.have.property(\"betId\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"betAmount\");\r",
									"    pm.expect(jsonData).to.have.property(\"payout\");\r",
									"    pm.expect(jsonData).to.have.property(\"multiplier\");\r",
									"    pm.expect(jsonData).to.have.property(\"randomMultiplier\");\r",
									"});\r",
									"\r",
									"// Проверяем типы данных\r",
									"pm.test(\"Field types are correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.currencyId).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.betId).to.be.a(\"string\");\r",
									"    pm.expect(new Date(jsonData.createdAt)).to.not.be.NaN; // Проверяем, что это корректная дата\r",
									"    pm.expect(jsonData.betAmount).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.payout).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.multiplier).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.randomMultiplier).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currencyId\": \"EVO\",\n  \"betAmount\": \"11\",\n  \"multiplier\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/limbo/bet",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"limbo",
								"bet"
							]
						}
					},
					"response": []
				},
				{
					"name": "roulette bet colorValues Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Извлекаем JSON из ответа\r",
									"const responseJson = pm.response.json();\r",
									"// Тест: Проверяем, что статус ответа 201\r",
									"pm.test(\"Response status is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									" \r",
									"\r",
									"// Тест: Проверяем, что все необходимые поля существуют и имеют значения\r",
									"pm.test(\"Response contains all required fields with valid values\", function () {\r",
									"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.null;\r",
									"    pm.expect(responseJson).to.have.property(\"randomPosition\").that.is.a(\"number\");\r",
									"    pm.expect(responseJson).to.have.property(\"multiplier\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"betId\", jsonData.betId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currencyId\": \"EVO\",\n  \"betAmount\": \"20\",\n  \"params\": {\n    \"colorValues\": [\n      {\n        \"amount\": \"20\",\n        \"color\": \"RED\"\n      }\n    ],\n    \"halfValues\": [],\n    \"parityValues\": [],\n    \"straightValues\": [],\n    \"columnValues\": [],\n    \"dozenValues\": [],\n    \"splitValues\": [],\n    \"cornerValues\": [],\n    \"streetValues\": [],\n    \"doubleStreetValues\": []\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/roulette/bet",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"roulette",
								"bet"
							]
						}
					},
					"response": []
				},
				{
					"name": "keno/bet Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Извлечение JSON из ответа\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Проверка, что ответ содержит все необходимые поля с непустыми значениями\r",
									"pm.test(\"Response contains required fields with values\", function () {\r",
									"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"betAmount\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"payout\").that.is.a(\"string\").and.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.property(\"multiplier\").that.is.a(\"number\").and.is.not.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"betAmount\": \"10\",\r\n  \"risk\": \"CLASSIC\",\r\n  \"selected\": [\r\n       3,\r\n       6,\r\n       8,\r\n       11,\r\n       14,\r\n       22,\r\n       25,\r\n       26,\r\n       27,\r\n       30\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/keno/bet",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"keno",
								"bet"
							]
						}
					},
					"response": []
				},
				{
					"name": "mines play Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Проверка, что поле \"cells\" существует и является объектом\r",
									"pm.test(\"Cells field exists and is an object\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"cells\");\r",
									"    pm.expect(jsonData.cells).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Проверка, что \"gridCellsCount\" равно 25\r",
									"pm.test(\"GridCellsCount is equal to 25\", function () {\r",
									"    pm.expect(jsonData.gridCellsCount).to.equal(25);\r",
									"});\r",
									"\r",
									"// Проверка, что \"bombsCount\" является положительным числом\r",
									"pm.test(\"BombsCount is a positive integer\", function () {\r",
									"    pm.expect(jsonData.bombsCount).to.be.a(\"number\").and.to.be.above(0);\r",
									"});\r",
									"\r",
									"// Проверка каждого элемента в \"cells\"\r",
									"pm.test(\"Each cell has a valid isOpen field\", function () {\r",
									"    const cells = jsonData.cells;\r",
									"    const gridCellsCount = jsonData.gridCellsCount;\r",
									"\r",
									"    // Проверяем, что количество клеток соответствует gridCellsCount\r",
									"    pm.expect(Object.keys(cells).length).to.equal(gridCellsCount);\r",
									"\r",
									"    // Проверяем, что каждая клетка имеет поле \"isOpen\", и оно является boolean\r",
									"    Object.values(cells).forEach(cell => {\r",
									"        pm.expect(cell).to.have.property(\"isOpen\");\r",
									"        pm.expect(cell.isOpen).to.be.a(\"boolean\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currencyId\": \"EVO\",\n  \"betAmount\": \"5\",\n  \"gridCellsCount\": 25,\n  \"bombsCount\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/mines/play",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"mines",
								"play"
							]
						}
					},
					"response": []
				},
				{
					"name": "mines open Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Проверка, что поле \"proceed\" существует\r",
									"pm.test(\"Proceed field exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"proceed\");\r",
									"});\r",
									"\r",
									"// Проверка, что \"currentMultiplier\" существует и больше 1\r",
									"pm.test(\"CurrentMultiplier exists and is greater than 1\", function () {\r",
									"    pm.expect(jsonData.proceed).to.have.property(\"currentMultiplier\");\r",
									"    pm.expect(jsonData.proceed.currentMultiplier).to.be.a(\"number\").and.to.be.above(1);\r",
									"});\r",
									"\r",
									"// Проверка, что \"nextMultiplier\" существует и больше \"currentMultiplier\"\r",
									"pm.test(\"NextMultiplier exists and is greater than currentMultiplier\", function () {\r",
									"    pm.expect(jsonData.proceed).to.have.property(\"nextMultiplier\");\r",
									"    pm.expect(jsonData.proceed.nextMultiplier).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.proceed.nextMultiplier).to.be.above(jsonData.proceed.currentMultiplier);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cellIndex\": \"23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/mines/open",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"mines",
								"open"
							]
						}
					},
					"response": []
				},
				{
					"name": "cash-out Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Проверка основных полей\r",
									"pm.test(\"CurrencyId is SOL\", function () {\r",
									"    pm.expect(jsonData.currencyId).to.equal(\"EVO\");\r",
									"});\r",
									"\r",
									"pm.expect(jsonData).to.have.property(\"betId\").that.is.a(\"string\").and.is.not.empty;\r",
									"\r",
									"pm.test(\"FinishedAt is a valid ISO 8601 timestamp\", function () {\r",
									"    pm.expect(new Date(jsonData.finishedAt)).to.be.an.instanceOf(Date);\r",
									"});\r",
									"\r",
									"pm.test(\"BetAmount and Payout are positive numbers\", function () {\r",
									"    pm.expect(parseFloat(jsonData.betAmount)).to.be.a(\"number\").and.to.be.greaterThan(0);\r",
									"    pm.expect(parseFloat(jsonData.payout)).to.be.a(\"number\").and.to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Multiplier is greater than 1\", function () {\r",
									"    pm.expect(jsonData.multiplier).to.be.a(\"number\").and.to.be.greaterThan(1);\r",
									"});\r",
									"\r",
									"// Проверка данных игрового поля (board)\r",
									"pm.test(\"Board exists and has valid structure\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"board\");\r",
									"    const board = jsonData.board;\r",
									"\r",
									"    pm.expect(board.bombsCount).to.equal(1);\r",
									"    pm.expect(board.gridCellsCount).to.equal(25);\r",
									"    pm.expect(board.openedCellsCount).to.equal(1);\r",
									"    pm.expect(Object.keys(board.cells).length).to.equal(board.gridCellsCount);\r",
									"\r",
									"    // Проверка каждой ячейки\r",
									"    let hasMineCount = 0;\r",
									"    let isOpenCount = 0;\r",
									"\r",
									"    Object.values(board.cells).forEach(cell => {\r",
									"        pm.expect(cell).to.have.property(\"isOpen\").that.is.a(\"boolean\");\r",
									"        pm.expect(cell).to.have.property(\"hasMine\").that.is.a(\"boolean\");\r",
									"\r",
									"        if (cell.hasMine) {\r",
									"            hasMineCount++;\r",
									"        }\r",
									"        if (cell.isOpen) {\r",
									"            isOpenCount++;\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Проверяем количество мин и открытых ячеек\r",
									"    pm.expect(hasMineCount).to.equal(board.bombsCount);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/mines/cash-out",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"mines",
								"cash-out"
							]
						}
					},
					"response": []
				},
				{
					"name": "bj init Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Маппинг ID карт на текстовые значения и их номиналы\r",
									"const cardMapping = {\r",
									"    1: { text: \"♠2\", value: 2 }, 2: { text: \"♠3\", value: 3 }, 3: { text: \"♠4\", value: 4 },\r",
									"    4: { text: \"♠5\", value: 5 }, 5: { text: \"♠6\", value: 6 }, 6: { text: \"♠7\", value: 7 },\r",
									"    7: { text: \"♠8\", value: 8 }, 8: { text: \"♠9\", value: 9 }, 9: { text: \"♠10\", value: 10 },\r",
									"    10: { text: \"♠J\", value: 10 }, 11: { text: \"♠Q\", value: 10 }, 12: { text: \"♠K\", value: 10 },\r",
									"    13: { text: \"♠A\", value: 11 }, 14: { text: \"♥2\", value: 2 }, 15: { text: \"♥3\", value: 3 },\r",
									"    16: { text: \"♥4\", value: 4 }, 17: { text: \"♥5\", value: 5 }, 18: { text: \"♥6\", value: 6 },\r",
									"    19: { text: \"♥7\", value: 7 }, 20: { text: \"♥8\", value: 8 }, 21: { text: \"♥9\", value: 9 },\r",
									"    22: { text: \"♥10\", value: 10 }, 23: { text: \"♥J\", value: 10 }, 24: { text: \"♥Q\", value: 10 },\r",
									"    25: { text: \"♥K\", value: 10 }, 26: { text: \"♥A\", value: 11 }, 27: { text: \"♦2\", value: 2 },\r",
									"    28: { text: \"♦3\", value: 3 }, 29: { text: \"♦4\", value: 4 }, 30: { text: \"♦5\", value: 5 },\r",
									"    31: { text: \"♦6\", value: 6 }, 32: { text: \"♦7\", value: 7 }, 33: { text: \"♦8\", value: 8 },\r",
									"    34: { text: \"♦9\", value: 9 }, 35: { text: \"♦10\", value: 10 }, 36: { text: \"♦J\", value: 10 },\r",
									"    37: { text: \"♦Q\", value: 10 }, 38: { text: \"♦K\", value: 10 }, 39: { text: \"♦A\", value: 11 },\r",
									"    40: { text: \"♣2\", value: 2 }, 41: { text: \"♣3\", value: 3 }, 42: { text: \"♣4\", value: 4 },\r",
									"    43: { text: \"♣5\", value: 5 }, 44: { text: \"♣6\", value: 6 }, 45: { text: \"♣7\", value: 7 },\r",
									"    46: { text: \"♣8\", value: 8 }, 47: { text: \"♣9\", value: 9 }, 48: { text: \"♣10\", value: 10 },\r",
									"    49: { text: \"♣J\", value: 10 }, 50: { text: \"♣Q\", value: 10 }, 51: { text: \"♣K\", value: 10 },\r",
									"    52: { text: \"♣A\", value: 11 }\r",
									"};\r",
									"\r",
									"// Функция для преобразования ID карт в текстовые значения\r",
									"function getCardsText(cards) {\r",
									"    return cards.map(cardId => cardMapping[cardId]?.text || `Unknown (${cardId})`);\r",
									"}\r",
									"\r",
									"// Функция для подсчёта очков\r",
									"function calculateScore(cards) {\r",
									"    let total = 0;\r",
									"    let aces = 0;\r",
									"\r",
									"    cards.forEach(cardId => {\r",
									"        const card = cardMapping[cardId];\r",
									"        if (card) {\r",
									"            total += card.value;\r",
									"            if (card.text.includes(\"A\")) {\r",
									"                aces += 1;\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Корректируем значение тузов (A), если сумма превышает 21\r",
									"    while (total > 21 && aces > 0) {\r",
									"        total -= 10; // Считаем туза как 1 вместо 11\r",
									"        aces -= 1;\r",
									"    }\r",
									"\r",
									"    return total;\r",
									"}\r",
									"\r",
									"// Извлекаем данные\r",
									"const dealerHand = jsonData.data.dealerHand;\r",
									"const mainPlayerHand = jsonData.data.mainPlayerHand;\r",
									"const splitPlayerHand = jsonData.data.splitPlayerHand || [];\r",
									"const mainPlayerActions = jsonData.data.mainPlayerActions || [];\r",
									"const splitPlayerActions = jsonData.data.splitPlayerActions || [];\r",
									"const mainHandOutcome = jsonData.data.mainHandOutcome;\r",
									"const splitHandOutcome = jsonData.data.splitHandOutcome;\r",
									"\r",
									"// Преобразуем ID карт в текстовые значения\r",
									"const dealerHandText = getCardsText(dealerHand);\r",
									"const mainPlayerHandText = getCardsText(mainPlayerHand);\r",
									"const splitPlayerHandText = getCardsText(splitPlayerHand);\r",
									"\r",
									"// Подсчитываем очки для каждой руки\r",
									"const dealerScore = calculateScore(dealerHand);\r",
									"const mainPlayerScore = calculateScore(mainPlayerHand);\r",
									"const splitPlayerScore = splitPlayerHand.length > 0 ? calculateScore(splitPlayerHand) : null;\r",
									"\r",
									"// Выводим результаты в консоль\r",
									"console.log(\"Dealer's Hand:\", dealerHandText, \"Score:\", dealerScore);\r",
									"console.log(\"Main Player's Hand:\", mainPlayerHandText, \"Score:\", mainPlayerScore, \"Outcome:\", mainHandOutcome, \"Actions:\", mainPlayerActions);\r",
									"\r",
									"if (splitPlayerHand.length > 0) {\r",
									"    console.log(\"Split Player's Hand:\", splitPlayerHandText, \"Score:\", splitPlayerScore, \"Outcome:\", splitHandOutcome, \"Actions:\", splitPlayerActions);\r",
									"} else {\r",
									"    console.log(\"No split hand played.\");\r",
									"}\r",
									"\r",
									"// Проверяем, что карты валидны\r",
									"pm.test(\"All cards are valid\", function () {\r",
									"    dealerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
									"    mainPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
									"    splitPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"betAmount\": \"10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/blackjack/init",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"blackjack",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "bj handleAction Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Маппинг ID карт на текстовые значения и их номиналы\r",
									"const cardMapping = {\r",
									"    1: { text: \"♠2\", value: 2 }, 2: { text: \"♠3\", value: 3 }, 3: { text: \"♠4\", value: 4 },\r",
									"    4: { text: \"♠5\", value: 5 }, 5: { text: \"♠6\", value: 6 }, 6: { text: \"♠7\", value: 7 },\r",
									"    7: { text: \"♠8\", value: 8 }, 8: { text: \"♠9\", value: 9 }, 9: { text: \"♠10\", value: 10 },\r",
									"    10: { text: \"♠J\", value: 10 }, 11: { text: \"♠Q\", value: 10 }, 12: { text: \"♠K\", value: 10 },\r",
									"    13: { text: \"♠A\", value: 11 }, 14: { text: \"♥2\", value: 2 }, 15: { text: \"♥3\", value: 3 },\r",
									"    16: { text: \"♥4\", value: 4 }, 17: { text: \"♥5\", value: 5 }, 18: { text: \"♥6\", value: 6 },\r",
									"    19: { text: \"♥7\", value: 7 }, 20: { text: \"♥8\", value: 8 }, 21: { text: \"♥9\", value: 9 },\r",
									"    22: { text: \"♥10\", value: 10 }, 23: { text: \"♥J\", value: 10 }, 24: { text: \"♥Q\", value: 10 },\r",
									"    25: { text: \"♥K\", value: 10 }, 26: { text: \"♥A\", value: 11 }, 27: { text: \"♦2\", value: 2 },\r",
									"    28: { text: \"♦3\", value: 3 }, 29: { text: \"♦4\", value: 4 }, 30: { text: \"♦5\", value: 5 },\r",
									"    31: { text: \"♦6\", value: 6 }, 32: { text: \"♦7\", value: 7 }, 33: { text: \"♦8\", value: 8 },\r",
									"    34: { text: \"♦9\", value: 9 }, 35: { text: \"♦10\", value: 10 }, 36: { text: \"♦J\", value: 10 },\r",
									"    37: { text: \"♦Q\", value: 10 }, 38: { text: \"♦K\", value: 10 }, 39: { text: \"♦A\", value: 11 },\r",
									"    40: { text: \"♣2\", value: 2 }, 41: { text: \"♣3\", value: 3 }, 42: { text: \"♣4\", value: 4 },\r",
									"    43: { text: \"♣5\", value: 5 }, 44: { text: \"♣6\", value: 6 }, 45: { text: \"♣7\", value: 7 },\r",
									"    46: { text: \"♣8\", value: 8 }, 47: { text: \"♣9\", value: 9 }, 48: { text: \"♣10\", value: 10 },\r",
									"    49: { text: \"♣J\", value: 10 }, 50: { text: \"♣Q\", value: 10 }, 51: { text: \"♣K\", value: 10 },\r",
									"    52: { text: \"♣A\", value: 11 }\r",
									"};\r",
									"\r",
									"// Функция для преобразования ID карт в текстовые значения\r",
									"function getCardsText(cards) {\r",
									"    return cards.map(cardId => cardMapping[cardId]?.text || `Unknown (${cardId})`);\r",
									"}\r",
									"\r",
									"// Функция для подсчёта очков\r",
									"function calculateScore(cards) {\r",
									"    let total = 0;\r",
									"    let aces = 0;\r",
									"\r",
									"    cards.forEach(cardId => {\r",
									"        const card = cardMapping[cardId];\r",
									"        if (card) {\r",
									"            total += card.value;\r",
									"            if (card.text.includes(\"A\")) {\r",
									"                aces += 1;\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Корректируем значение тузов (A), если сумма превышает 21\r",
									"    while (total > 21 && aces > 0) {\r",
									"        total -= 10; // Считаем туза как 1 вместо 11\r",
									"        aces -= 1;\r",
									"    }\r",
									"\r",
									"    return total;\r",
									"}\r",
									"\r",
									"// Извлекаем данные\r",
									"const dealerHand = jsonData.data.dealerHand;\r",
									"const mainPlayerHand = jsonData.data.mainPlayerHand;\r",
									"const splitPlayerHand = jsonData.data.splitPlayerHand || [];\r",
									"const mainPlayerActions = jsonData.data.mainPlayerActions || [];\r",
									"const splitPlayerActions = jsonData.data.splitPlayerActions || [];\r",
									"const mainHandOutcome = jsonData.data.mainHandOutcome;\r",
									"const splitHandOutcome = jsonData.data.splitHandOutcome;\r",
									"\r",
									"// Преобразуем ID карт в текстовые значения\r",
									"const dealerHandText = getCardsText(dealerHand);\r",
									"const mainPlayerHandText = getCardsText(mainPlayerHand);\r",
									"const splitPlayerHandText = getCardsText(splitPlayerHand);\r",
									"\r",
									"// Подсчитываем очки для каждой руки\r",
									"const dealerScore = calculateScore(dealerHand);\r",
									"const mainPlayerScore = calculateScore(mainPlayerHand);\r",
									"const splitPlayerScore = splitPlayerHand.length > 0 ? calculateScore(splitPlayerHand) : null;\r",
									"\r",
									"// Выводим результаты в консоль\r",
									"console.log(\"Dealer's Hand:\", dealerHandText, \"Score:\", dealerScore);\r",
									"console.log(\"Main Player's Hand:\", mainPlayerHandText, \"Score:\", mainPlayerScore, \"Outcome:\", mainHandOutcome, \"Actions:\", mainPlayerActions);\r",
									"\r",
									"if (splitPlayerHand.length > 0) {\r",
									"    console.log(\"Split Player's Hand:\", splitPlayerHandText, \"Score:\", splitPlayerScore, \"Outcome:\", splitHandOutcome, \"Actions:\", splitPlayerActions);\r",
									"} else {\r",
									"    console.log(\"No split hand played.\");\r",
									"}\r",
									"\r",
									"// Проверяем, что карты валидны\r",
									"pm.test(\"All cards are valid\", function () {\r",
									"    dealerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
									"    mainPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
									"    splitPlayerHand.forEach(cardId => pm.expect(cardMapping).to.have.property(cardId.toString()));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//   \"action\": \"HIT\"\r\n// }\r\n// {\r\n//   \"action\": \"DOUBLE_DOWN\"\r\n// }\r\n{\r\n   \"action\": \"STAND\"\r\n}\r\n// {\r\n//   \"action\": \"SPLIT\"\r\n// }\r\n// {\r\n//   \"action\": \"BUY_INSURANCE\"\r\n// }\r\n// {\r\n//   \"action\": \"REJECT_INSURANCE\"\r\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/blackjack/handleAction",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"blackjack",
								"handleAction"
							]
						}
					},
					"response": []
				},
				{
					"name": "speed-roulette/bet Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Проверяем статус ответа (201 Created)\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// ✅ Парсим JSON-ответ\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// ✅ Проверяем, что ответ содержит все ожидаемые поля\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"gameId\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"userId\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"currencyId\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"amount\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"color\").that.is.a(\"string\");\r",
									"    \r",
									"});\r",
									"\r",
									"// ✅ Проверяем, что currencyId соответствует отправленному значению\r",
									"pm.test(\"currencyId matches request\", function () {\r",
									"    pm.expect(responseJson.currencyId).to.eql(\"EVO\");\r",
									"});\r",
									"\r",
									"// ✅ Проверяем, что color соответствует отправленному значению\r",
									"pm.test(\"color matches request\", function () {\r",
									"    pm.expect(responseJson.color).to.eql(\"RED\");\r",
									"});\r",
									"\r",
									"// ✅ Проверяем, что isSettled по умолчанию false\r",
									"pm.test(\"isSettled is false\", function () {\r",
									"    pm.expect(responseJson.isSettled).to.eql(false);\r",
									"});\r",
									"\r",
									"// ✅ Проверяем, что createdAt имеет формат ISO 8601\r",
									"pm.test(\"createdAt is a valid ISO 8601 timestamp\", function () {\r",
									"    pm.expect(responseJson.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"betAmount\": \"10\",\r\n  \"color\": \"RED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}casino/games/house/speed-roulette/bet",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"house",
								"speed-roulette",
								"bet"
							]
						}
					},
					"response": []
				},
				{
					"name": "casino/games Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверяем, что ответ содержит массив объектов игр\r",
									"pm.test(\"Response contains an array of games\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"object\"); // Обновлено: Проверяем, что ответ является объектом\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\"); // Обновлено: Проверяем, что массив игр находится в свойстве \"data\"\r",
									"    if (Array.isArray(jsonData.data) && jsonData.data.length > 0) { // Обновлено: Проверяем, что jsonData.data является массивом и не пустым\r",
									"        jsonData.data.forEach(game => {\r",
									"            pm.expect(game).to.be.an(\"object\"); // Проверяем, что каждая игра является объектом\r",
									"        });\r",
									"    } else {\r",
									"        pm.expect(jsonData.data).to.eql([]); // Обновлено: Проверяем, что jsonData.data пустой массив\r",
									"    }\r",
									"});\r",
									"\r",
									"// Проверяем обязательные поля в каждом объекте\r",
									"pm.test(\"Each game object contains required fields\", function () {\r",
									"    const jsonData = pm.response.json().data; // Обновлено: Получаем массив игр из свойства \"data\"\r",
									"    if (Array.isArray(jsonData) && jsonData.length > 0) { // Обновлено: Проверяем, что jsonData является массивом и не пустым\r",
									"        jsonData.forEach(game => {\r",
									"            pm.expect(game).to.be.an(\"object\"); // Проверяем, что каждая игра является объектом\r",
									"            pm.expect(game).to.have.property(\"id\");\r",
									"            pm.expect(game).to.have.property(\"addedAt\");\r",
									"            pm.expect(game).to.have.property(\"lastPlayedAt\");\r",
									"            pm.expect(game).to.have.property(\"type\");\r",
									"            pm.expect(game).to.have.property(\"categories\");\r",
									"            pm.expect(game).to.have.property(\"slug\");\r",
									"            pm.expect(game).to.have.property(\"name\");\r",
									"            pm.expect(game).to.have.property(\"images\");\r",
									"            pm.expect(game).to.have.property(\"provider\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"// Проверяем значения некоторых ключей\r",
									"pm.test(\"Check specific game fields\", function () {\r",
									"    const jsonData = pm.response.json().data; // Обновлено: Получаем массив игр из свойства \"data\"\r",
									"    if (Array.isArray(jsonData) && jsonData.length > 0) { // Обновлено: Проверяем, что jsonData является массивом и не пустым\r",
									"        const game = jsonData[0]; // Проверяем первую игру в списке\r",
									"\r",
									"        pm.expect(game.id).to.be.a(\"number\");\r",
									"        pm.expect(new Date(game.addedAt)).to.not.be.NaN; // Проверяем корректность даты\r",
									"        pm.expect(new Date(game.lastPlayedAt)).to.not.be.NaN; // Проверяем корректность даты\r",
									"        pm.expect(game.type).to.be.oneOf([\"HOUSE_GAME\"]); // Проверяем допустимые типы\r",
									"        pm.expect(game.categories).to.be.an(\"array\");\r",
									"        pm.expect(game.slug).to.be.a(\"string\");\r",
									"        pm.expect(game.name).to.be.a(\"string\");\r",
									"        pm.expect(game.images).to.have.property(\"imageUrl\");\r",
									"        pm.expect(game.images.imageUrl).to.be.a(\"string\").and.include(\"https://\"); // Проверяем, что это URL\r",
									"    }\r",
									"});\r",
									"\r",
									"// Проверяем структуру объекта \"provider\"\r",
									"pm.test(\"Provider object structure is valid\", function () {\r",
									"    const jsonData = pm.response.json().data; // Обновлено: Получаем массив игр из свойства \"data\"\r",
									"    if (Array.isArray(jsonData) && jsonData.length > 0) { // Обновлено: Проверяем, что jsonData является массивом и не пустым\r",
									"        const provider = jsonData[0].provider; // Проверяем первый объект провайдера\r",
									"\r",
									"        pm.expect(provider).to.have.property(\"id\");\r",
									"        pm.expect(provider).to.have.property(\"name\");\r",
									"        pm.expect(provider).to.have.property(\"prefix\");\r",
									"        pm.expect(provider).to.have.property(\"slug\");\r",
									"        pm.expect(provider).to.have.property(\"images\");\r",
									"        pm.expect(provider.images).to.have.property(\"imageUrl\");\r",
									"\r",
									"        pm.expect(provider.id).to.be.a(\"number\");\r",
									"        pm.expect(provider.name).to.be.a(\"string\");\r",
									"        pm.expect(provider.prefix).to.be.a(\"string\");\r",
									"        pm.expect(provider.slug).to.be.a(\"string\");\r",
									"        pm.expect(provider.images.imageUrl).to.be.a(\"string\").and.include(\"https://\"); // Проверяем, что это URL\r",
									"    }\r",
									"});\r",
									"\r",
									"// Проверяем типы данных в массиве категорий\r",
									"pm.test(\"Categories array contains strings\", function () {\r",
									"    const jsonData = pm.response.json().data; // Обновлено: Получаем массив игр из свойства \"data\"\r",
									"    if (Array.isArray(jsonData) && jsonData.length > 0) { // Обновлено: Проверяем, что jsonData является массивом и не пустым\r",
									"        jsonData.forEach(game => {\r",
									"            game.categories.forEach(category => {\r",
									"                pm.expect(category).to.be.a(\"string\");\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"// Add a test for response time\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}casino/games?category=HOUSE_GAME&type=HOUSE_GAME&sortBy=default&page=1&take=20",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games"
							],
							"query": [
								{
									"key": "category",
									"value": "HOUSE_GAME"
								},
								{
									"key": "category",
									"value": "SLOTS",
									"disabled": true
								},
								{
									"key": "category",
									"value": "LIVE_CASINO",
									"disabled": true
								},
								{
									"key": "category",
									"value": "BLACKJACK",
									"disabled": true
								},
								{
									"key": "category",
									"value": "ROULETTE",
									"disabled": true
								},
								{
									"key": "category",
									"value": "GAME_SHOWS",
									"disabled": true
								},
								{
									"key": "category",
									"value": "BACCARAT",
									"disabled": true
								},
								{
									"key": "category",
									"value": "VIDEO_POKER",
									"disabled": true
								},
								{
									"key": "category",
									"value": "CARD",
									"disabled": true
								},
								{
									"key": "category",
									"value": "CASUAL",
									"disabled": true
								},
								{
									"key": "category",
									"value": "LOTTERY",
									"disabled": true
								},
								{
									"key": "category",
									"value": "LIVE",
									"disabled": true
								},
								{
									"key": "category",
									"value": "POKER",
									"disabled": true
								},
								{
									"key": "category",
									"value": "CRAPS",
									"disabled": true
								},
								{
									"key": "category",
									"value": "FISHING",
									"disabled": true
								},
								{
									"key": "category",
									"value": "CRASH",
									"disabled": true
								},
								{
									"key": "category",
									"value": "VIRTUAL_SPORTS",
									"disabled": true
								},
								{
									"key": "category",
									"value": "SCRATCH",
									"disabled": true
								},
								{
									"key": "type",
									"value": "SLOTS",
									"disabled": true
								},
								{
									"key": "type",
									"value": "HOUSE_GAME"
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "name",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "addedAt",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "default"
								},
								{
									"key": "sortBy",
									"value": "popular",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "lastPlayed",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Roulette",
									"disabled": true
								},
								{
									"key": "providerId",
									"value": "1",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "take",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "favorite/slug Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Проверяем, что тело ответа содержит ключ \"success\"\r",
									"pm.test(\"Response contains 'success' key\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\");\r",
									"});\r",
									"\r",
									"// Проверяем, что значение \"success\" равно true\r",
									"pm.test(\"Value of 'success' is true\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}casino/games/favorite/blackjack",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"favorite",
								"blackjack"
							]
						}
					},
					"response": []
				},
				{
					"name": "favorite Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверяем наличие основных ключей в корневом объекте\r",
									"pm.test(\"Response contains main keys\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"take\");\r",
									"    pm.expect(jsonData).to.have.property(\"page\");\r",
									"    pm.expect(jsonData).to.have.property(\"total\");\r",
									"    pm.expect(jsonData).to.have.property(\"totalPages\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"// Проверяем структуру объекта внутри массива \"data\"\r",
									"pm.test(\"Data array contains valid objects\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const item = jsonData.data[0];\r",
									"\r",
									"    pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(item).to.have.property(\"addedAt\").that.is.a(\"string\");\r",
									"    pm.expect(item).to.have.property(\"lastPlayedAt\").that.is.a(\"string\");\r",
									"    pm.expect(item).to.have.property(\"type\").that.is.a(\"string\");\r",
									"    pm.expect(item).to.have.property(\"categories\").that.is.an(\"array\").that.is.empty;\r",
									"    pm.expect(item).to.have.property(\"slug\").that.is.a(\"string\");\r",
									"    pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(item).to.have.property(\"images\").that.is.an(\"object\");\r",
									"    pm.expect(item.images).to.have.property(\"imageUrl\").that.is.a(\"string\").and.to.not.be.empty;\r",
									"    pm.expect(item).to.have.property(\"provider\").that.is.an(\"object\");\r",
									"});\r",
									"\r",
									"// Проверяем объект \"provider\"\r",
									"pm.test(\"Provider object is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const provider = jsonData.data[0].provider;\r",
									"\r",
									"    pm.expect(provider).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(provider).to.have.property(\"prefix\").that.is.a(\"string\");\r",
									"    pm.expect(provider).to.have.property(\"slug\").that.is.a(\"string\");\r",
									"    pm.expect(provider).to.have.property(\"images\").that.is.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}casino/games/favorite?sortOrder=desc&sortBy=NAME&page=1&take=20",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"favorite"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc"
								},
								{
									"key": "sortBy",
									"value": "CREATED_AT",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "NAME"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "take",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "favorite Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверяем, что тело ответа содержит ключ \"success\"\r",
									"pm.test(\"Response contains 'success' key\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\");\r",
									"});\r",
									"\r",
									"// Проверяем, что значение \"success\" равно true\r",
									"pm.test(\"Value of 'success' is true\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}casino/games/favorite/blackjack",
							"host": [
								"{{stagingUrl}}casino"
							],
							"path": [
								"games",
								"favorite",
								"blackjack"
							]
						}
					},
					"response": []
				},
				{
					"name": "bets my Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}live-bets/my?count=100",
							"host": [
								"{{stagingUrl}}live-bets"
							],
							"path": [
								"my"
							],
							"query": [
								{
									"key": "count",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "me stats Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Проверяем, что все поля существуют и их значения не равны null\r",
									"pm.test(\"Response contains all required fields and they are not null\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"totalWagered\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"totalBets\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"joined\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"withdrawalLimit\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"totalWithdraw\").and.to.not.be.null;\r",
									"});\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}user/me/stats",
							"host": [
								"{{stagingUrl}}user"
							],
							"path": [
								"me",
								"stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/{username}/stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Проверяем, что все поля существуют и их значения не равны null\r",
									"pm.test(\"Response contains all required fields and they are not null\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"isPrivate\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"username\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"avatar\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"vipLevel\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"exp\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"totalWagered\").and.to.not.be.null;\r",
									"    pm.expect(jsonData).to.have.property(\"totalBets\").and.to.not.be.null;\r",
									"});\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}user/nebajis208/stats",
							"host": [
								"{{stagingUrl}}user"
							],
							"path": [
								"nebajis208",
								"stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "rakeback Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\r",
									"// Проверяем статус ответа\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Функция для проверки rakeback\r",
									"function validateRakeback(type, expectedEmpty) {\r",
									"    pm.test(`${type} rakeback validation`, function () {\r",
									"        const rakeback = responseData[type]?.rakeback;\r",
									"\r",
									"        // Проверяем, что поле существует и является массивом\r",
									"        pm.expect(rakeback).to.be.an(\"array\");\r",
									"\r",
									"        if (expectedEmpty) {\r",
									"            // Если ожидается пустой массив\r",
									"            pm.expect(rakeback).to.have.lengthOf(0);\r",
									"        } else {\r",
									"            // Если массив может содержать элементы\r",
									"            pm.expect(rakeback.length).to.be.at.least(0); // Массив может быть пустым или содержать элементы\r",
									"\r",
									"            if (rakeback.length > 0) {\r",
									"                // Если есть элементы, проверяем их структуру\r",
									"                rakeback.forEach(item => {\r",
									"                    pm.expect(item).to.have.property(\"amount\").that.is.a(\"string\");\r",
									"                    pm.expect(item).to.have.property(\"currencyId\").that.is.a(\"string\");\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"// Проверяем \"instant\" (может содержать элементы)\r",
									"validateRakeback(\"instant\", false);\r",
									"\r",
									"// Проверяем \"daily\" (может содержать элементы)\r",
									"validateRakeback(\"daily\", false);\r",
									"\r",
									"// Проверяем \"weekly\" (может содержать элементы)\r",
									"validateRakeback(\"weekly\", false);\r",
									"\r",
									"// Проверяем \"monthly\" (ожидается пустой массив)\r",
									"validateRakeback(\"monthly\", true);\r",
									"\r",
									"// Дополнительный лог для проверки содержимого\r",
									"console.log(\"Instant rakeback:\", responseData.instant?.rakeback || \"No data\");\r",
									"console.log(\"Daily rakeback:\", responseData.daily?.rakeback || \"No data\");\r",
									"console.log(\"Weekly rakeback:\", responseData.weekly?.rakeback || \"No data\");\r",
									"console.log(\"Monthly rakeback:\", responseData.monthly?.rakeback || \"No data\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{stagingUrl}}rakeback",
							"host": [
								"{{stagingUrl}}rakeback"
							]
						}
					},
					"response": []
				},
				{
					"name": "rakeback/claim Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"// Проверяем, что \"instant.rakeback\" не пустое\r",
									"pm.test(\"rakeback is not empty\", function () {\r",
									"    pm.expect(responseData.rakeback).to.be.an(\"array\").and.to.have.length.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\":\"INSTANT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}rakeback/claim",
							"host": [
								"{{stagingUrl}}rakeback"
							],
							"path": [
								"claim"
							]
						}
					},
					"response": []
				},
				{
					"name": "rakeback Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Проверяем, что \"instant.rakeback\" существует и является пустым массивом\r",
									"pm.test(\"Instant rakeback is empty\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"instant\");\r",
									"    pm.expect(jsonData.instant).to.have.property(\"rakeback\").that.is.an(\"array\").and.to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{stagingUrl}}rakeback",
							"host": [
								"{{stagingUrl}}rakeback"
							]
						}
					},
					"response": []
				},
				{
					"name": "vault-deposit Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const requestBody = pm.request.body ? JSON.parse(pm.request.body.raw) : {};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Check that the response status is 201\r",
									"pm.test(\"Response status is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Check that the \"amount\" and \"vaultAmount\" fields exist in the response\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    // Check if the response contains the required vaultAmount and requestBody contains the required amount\r",
									"    pm.expect(jsonData).to.have.property(\"vaultAmount\").and.not.to.be.null;\r",
									"    pm.expect(requestBody).to.have.property(\"amount\").and.not.to.be.null;\r",
									"});\r",
									"\r",
									"// Check that \"vaultAmount\" increased by the amount\r",
									"pm.test(\"vaultAmount increased by the amount\", function () {\r",
									"    // Calculate the previousVaultAmount and verify if the vaultAmount increased by the amount\r",
									"    const requestAmount = parseFloat(requestBody.amount);\r",
									"    const responseVaultAmount = parseFloat(jsonData.vaultAmount);\r",
									"    const previousVaultAmount = responseVaultAmount - requestAmount;\r",
									"\r",
									"    pm.expect(previousVaultAmount).to.be.a(\"number\").and.to.be.greaterThan(-1);\r",
									"    pm.expect(responseVaultAmount).to.equal(previousVaultAmount + requestAmount);\r",
									"\r",
									"    console.log(\"Previous Vault Amount:\", previousVaultAmount);\r",
									"    console.log(\"Request Amount:\", requestAmount);\r",
									"    console.log(\"Response Vault Amount:\", responseVaultAmount);\r",
									"});\r",
									"\r",
									"// Save currencyId in a variable\r",
									"pm.collectionVariables.set(\"currencyId\", jsonData.currencyId);\r",
									"\r",
									"// Save vaultAmount in a variable\r",
									"pm.collectionVariables.set(\"vaultAmount\", jsonData.vaultAmount);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Saved currencyId:\", jsonData.currencyId);\r",
									"console.log(\"Saved vaultAmount:\", jsonData.vaultAmount);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"amount\": \"3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}accounting/to-vault",
							"host": [
								"{{stagingUrl}}accounting"
							],
							"path": [
								"to-vault"
							]
						}
					},
					"response": []
				},
				{
					"name": "vault-balances Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Получаем сохранённые значения из переменных\r",
									"const savedCurrencyId = pm.collectionVariables.get(\"currencyId\");\r",
									"const savedVaultAmount = pm.collectionVariables.get(\"vaultAmount\");\r",
									"\r",
									"// Проверяем, что массив содержит объект с нужными данными\r",
									"pm.test(\"Response contains the saved currencyId and vaultAmount\", function () {\r",
									"    // Находим объект в массиве, соответствующий сохранённым значениям\r",
									"    const matchingItem = jsonData.find(item => \r",
									"        item.currencyId === savedCurrencyId && \r",
									"        item.vaultAmount === savedVaultAmount\r",
									"    );\r",
									"\r",
									"    // Проверяем, что объект найден\r",
									"    pm.expect(matchingItem).to.exist;\r",
									"\r",
									"    // Проверяем, что значения совпадают\r",
									"    pm.test(\"Matching object values match saved values\", function () {\r",
									"        pm.expect(matchingItem.currencyId).to.equal(savedCurrencyId);\r",
									"        pm.expect(matchingItem.vaultAmount).to.equal(savedVaultAmount);\r",
									"    });\r",
									"\r",
									"    // Логируем найденный объект для проверки\r",
									"    console.log(\"Matching object found:\", matchingItem);\r",
									"    console.log(\"Saved currencyId:\", savedCurrencyId);\r",
									"    console.log(\"Saved vaultAmount:\", savedVaultAmount);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}accounting/vault-balances",
							"host": [
								"{{stagingUrl}}accounting"
							],
							"path": [
								"vault-balances"
							]
						}
					},
					"response": []
				},
				{
					"name": "vault-withdraw Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const requestBody = pm.request.body ? JSON.parse(pm.request.body.raw) : {};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Проверяем, что статус ответа 201\r",
									"pm.test(\"Response status is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Проверяем, что поля \"amount\" и \"vaultAmount\" существуют в ответе\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"vaultAmount\").and.to.not.be.null;\r",
									"    pm.expect(requestBody).to.have.property(\"amount\").and.to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currencyId\": \"EVO\",\r\n  \"amount\": \"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}accounting/from-vault",
							"host": [
								"{{stagingUrl}}accounting"
							],
							"path": [
								"from-vault"
							]
						}
					},
					"response": []
				},
				{
					"name": "tips Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Проверяем, что тело ответа содержит ключ \"success\" со значением true\r",
									"pm.test(\"Response contains success: true\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Проверяем, что тело ответа имеет правильный формат\r",
									"pm.test(\"Response is a valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"amount\": \"3\",\r\n  \"currencyId\": \"EVO\",\r\n  \"recipientUsername\": \"nebajis208\",\r\n  \"isPublic\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{stagingUrl}}tips",
							"host": [
								"{{stagingUrl}}tips"
							]
						}
					},
					"response": []
				},
				{
					"name": "log-out/current Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем статус ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверяем, что тело ответа содержит \"OK\"\r",
									"pm.test(\"Response body is 'OK'\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{stagingUrl}}session/log-out/current",
							"host": [
								"{{stagingUrl}}session"
							],
							"path": [
								"log-out",
								"current"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "TestApi",
			"value": "",
			"type": "default"
		},
		{
			"key": "betId",
			"value": ""
		},
		{
			"key": "targetSlug",
			"value": ""
		},
		{
			"key": "currencyId",
			"value": ""
		},
		{
			"key": "vaultAmount",
			"value": ""
		},
		{
			"key": "USDT_PreviousAmount",
			"value": ""
		}
	]
}